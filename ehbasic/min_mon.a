
; minimal monitor for EhBASIC and 6502 simulator V1.05
; Modified to support the Replica 1 by Jeff Tranter <tranter@pobox.com>

; To run EhBASIC on the simulator load and assemble [F7] this file, start the simulator
; running [F6] then start the code with the RESET [CTRL][SHIFT]R. Just selecting RUN
; will do nothing, you'll still have to do a reset to run the code.

!src <defs.h.a>
!src <bios.h.a>
!src <via.h.a>

	;.include "basic.asm"
	!src "basic.a"

ESC = $1B        ; Escape character
CR  = $0D        ; Return character
LF  = $0A        ; Line feed character

;IN    = $0200    ; Buffer used by GetLine. From $0200 through $027F (shared with Woz Mon)
IN    = $0350    ; Buffer used by GetLine. From $0200 through $027F (shared with Woz Mon)

; put the IRQ and MNI code in RAM so that it can be changed

IRQ_vec	= VEC_SV+2		; IRQ code vector
NMI_vec	= IRQ_vec+$0A	; NMI code vector

; setup for the 6502 simulator environment

IO_AREA	= $0200		; set I/O area for this monitor

; now the code. all this does is set up the vectors and interrupt code
; and wait for the user to select [C]old or [W]arm start. nothing else
; fits in less than 128 bytes

;	.org	$FF80			; pretend this is in a 1/8K ROM

; reset vector points here

RES_vec
	CLD				; clear decimal mode
	LDX	#$FF			; empty stack
	TXS				; set the stack

; set up vectors and interrupt code, copy them to page 2

	+SetVector .getkey, VEC_IN
	+SetVector chrout, VEC_OUT
	
; 	LDY	#END_CODE-LAB_vec	; set index/count
; LAB_stlp
; 	LDA	LAB_vec-1,Y		; get byte from interrupt code
; 	STA	VEC_IN-1,Y		; save to RAM
; 	DEY				; decrement index/count
; 	BNE	LAB_stlp		; loop if more to do
	ldy #$00
; now do the signon message, Y = $00 here

LAB_signon
	LDA	LAB_mess,Y		; get byte from sign on message
	BEQ	LAB_nokey		; exit loop if done

	JSR	V_OUTP		; output character

	INY				; increment index
	BNE	LAB_signon		; loop, branch always

LAB_nokey
	JSR	V_INPT		; call scan input device
	BCC	LAB_nokey		; loop if no key

	AND	#$DF			; mask xx0x xxxx, ensure upper case
	CMP	#'W'			; compare with [W]arm start
	BEQ	LAB_dowarm		; branch if [W]arm start

	CMP	#'C'			; compare with [C]old start
	BNE	RES_vec		; loop if not [C]old start

	JMP	LAB_COLD		; do EhBASIC cold start

LAB_dowarm
	JMP	LAB_WARM		; do EhBASIC warm start



; Implementation of LOAD using a CFFA1 flash interface if present.
LOAD:
        RTS                            ; and return

; Need to save the page zero locations used by the CFFA1 because they are also used by BASIC.

; Implementation of SAVE using a CFFA1 flash interface if present.
SAVE:
        RTS                            ; and return


; Print a string
; Pass address of string in X (low) and Y (high).
; String must be terminated in a null.
; Cannot be longer than 256 characters.
; Registers changed: A, Y
;
PrintString:
        STX Itempl
        STY Itempl+1
        LDY #0
-	LDA (Itempl),Y
        BEQ done
        JSR chrout
        INY
        BNE -       ; if doesn't branch, string is too long
done:   RTS

; String input routine.
; Enter characters from the keyboard terminated in <Return> or <ESC>.
; Characters are echoed.
; Can be up to 127 characters.
; Returns:
;   Length stored at IN (doesn't include zero byte).
;   Characters stored starting at IN+1 ($0201-$027F, same as Woz Monitor)
;   String is terminated in a 0 byte.
;   Carry set if user hit <Esc>, clear if used <Enter> or max string length reached.
; Registers changed: A, X
GetLine:
        LDX  #0                 ; Initialize index into buffer
-		JSR  .getkey		; Get character from keyboard
        BCC  -
        CMP  #CR                ; <Enter> key pressed?
        BEQ  EnterPressed       ; If so, handle it
        CMP  #ESC               ; <Esc> key pressed?
        BEQ  EscapePressed      ; If so, handle it
        JSR  chrout            ; Echo the key pressed
        STA  IN+1,X             ; Store character in buffer (skip first length byte)
        INX                     ; Advance index into buffer
        CPX  #$7E               ; Buffer full?
        BEQ  EnterPressed       ; If so, return as if <Enter> was pressed
        BNE  -               ; Always taken
EnterPressed:
        CLC                     ; Clear carry to indicate <Enter> pressed and fall through
EscapePressed:
        LDA  #0
        STA  IN+1,X             ; Store 0 at end of buffer
        STX  IN                 ; Store length of string
        RTS                     ; Return

.getkey
	phx

	lda via1portb
	and #%01111110
	cmp #$7e
	bne +

	lda #%01111010
	sta via1portb

	TAX             ; aufheben
    ORA #$01
    !for .i,0,7 {
		STA via1portb ; Takt An 1
		STX via1portb ; Takt aus  
    }
       
	ldx #%11111110
	stx via1portb

	
	lda via1sr
	bne +
	clc
	bra ++
+	sec
	
++
	plx
	rts

FilenameString:
  !raw "FILENAME? ",0

; vector tables

LAB_vec
	!word	chrin		; byte in from simulated ACIA
	!word	chrout		; byte out to simulated ACIA
	!word	LOAD		; load vector for EhBASIC
	!word	SAVE		; save vector for EhBASIC

; EhBASIC IRQ support

IRQ_CODE
	PHA				; save A
	LDA	IrqBase		; get the IRQ flag byte
	LSR				; shift the set b7 to b6, and on down ...
	ORA	IrqBase		; OR the original back in
	STA	IrqBase		; save the new IRQ flag byte
	PLA				; restore A
	RTI

; EhBASIC NMI support

NMI_CODE
	PHA				; save A
	LDA	NmiBase		; get the NMI flag byte
	LSR				; shift the set b7 to b6, and on down ...
	ORA	NmiBase		; OR the original back in
	STA	NmiBase		; save the new NMI flag byte
	PLA				; restore A
	RTI

END_CODE

LAB_mess
	!raw	$0D,$0A,"6502 EhBASIC [C]old/[W]arm ?",$00
					; sign on string

; system vectors

	;.org	$FFFA

	;.word	NMI_vec		; NMI vector
	;.word	RES_vec		; RESET vector
	;.word	IRQ_vec		; IRQ vector
