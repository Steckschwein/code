*= $d600
.shell_addr		= $d000
text_mode_40 = 1
num_ls_entries = $03

!src <defs.h.a>
!src <bios.h.a>
!src <via.h.a>
!src <fat32.h.a>
; !src <params.h.a>
; !src <errors.h.a>

!address {
.key = $10
}


kern_init
	sei
	
	stz .key	
	
	lda #<count
	sta via1t1cl            ; set low byte of count
	lda #>count
	sta via1t1ch            ; set high byte of count

	lda #%11000000
	sta via1ier             ; enable VIA1 T1 interrupts

	lda #%01000000
	sta via1acr             ; T1 continuous, PB7 disabled

	+SetVector .kern_irq, irqvec


	; read from keyboard buffer until empty to filter crap from kbd init
-	lda #%01111010
	sta via1portb

	TAX             ; aufheben
    ORA #$01
    !for .i,0,7 {
		STA via1portb ; Takt An 1
		STX via1portb ; Takt aus  
    }
       
	ldx #%11111110
	stx via1portb

	lda via1sr
	cmp #$00
	bne -

	jsr	.textui_init0

	+SetVector _textui_chrout, outvec

	cli
	+SetVector .kernel_version, msgptr
	jsr strout
; -	jsr .keyin
; 	jsr chrout 
; 	jmp -

	jsr .fat_mount 
	lda errno
	bne .error 
	
	+SetVector .filename, filenameptr

	jsr .fat_open 
	lda errno
	bne .error 

	+SetVector .shell_addr, sd_blkptr

	; +SetVector .txt_msg_loading, msgptr
	; jsr strout
	; +SetVector .filename, msgptr
	; jsr strout
	; +SetVector .crlf, msgptr
	; jsr strout


	jsr .fat_read
	lda errno
	bne .error 

	ldx #$ff 
	txs 


	jmp .shell_addr	

.error
	tax 
	lda #'E'
	jsr chrout 
	txa 
	jsr hexout
-	jmp -

.keyin
-	lda .key 		; wait for .key to become != 00
	beq -
	stz .key 		; reset .key to signal isr to fetch next key
	rts


; system interrupt handler
; handle keyboard input and text screen refresh
.kern_irq
	+save

	;via
	bit via1ifr		; Interrupt from VIA?
	bpl +			; no? get out

	bit via1t1cl	; Acknowledge timer interrupt

	lda .key		; already char in buffer? do nothing
	bne +

	; jsr getkey
	lda via1portb
	and #%01111110
	cmp #$7e
	bne +

	lda #%01111010
	; and via1portb
	sta via1portb

	TAX             ; aufheben
    ORA #$01
    !for .i,0,7 {
		STA via1portb ; Takt An 1
		STX via1portb ; Takt aus  
    }
       
	ldx #%11111110
	stx via1portb

	lda via1sr
	cmp #$00
	beq +
	sta .key

+
	bit	a_vreg
	bpl +	   ; VDP IRQ flag set?

	jsr	.textui_update_screen
+
	+restore
	rti

!src "../shell/shell.textui.a"
!src "../shell/shell.gfxui.a"
!src <fat.a>

; "kernel" jumptable
krn_keyin			jmp .keyin
krn_mount 			jmp .fat_mount 
krn_open 			jmp .fat_open
krn_read_dir		jmp .fat_read_dir
krn_close 			jmp .fat_close
krn_read 			jmp .fat_read 
krn_open_rootdir 	jmp .fat_open_rootdir

krn_list_entry 		jmp .fat_list_entry
krn_list_entry_short jmp .fat_list_entry_short
krn_dir_filter_default			jmp .fat_dir_filter_default

krn_textui_init 		jmp	.textui_init
krn_textui_enable		jmp	.textui_enable
krn_textui_disable		jmp .textui_disable			;disable textui
krn_gfxui_init			jmp	.gfxui_init
krn_display_off			jmp vdp_display_off
; strings
.kernel_version 	!text "SteckOS Kernel 0.1",$0d,$0a,$00
.crlf			!byte $0a,$0d,$00
.txt_msg_loading !text "Loading ",$00
.filename		!text "shell.bin",$00
