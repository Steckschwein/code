*=$1000
!src "../bios/defs.h.a"
!src "../bios/bios.h.a"
!src "fat32.h.a"

!macro Copy .src, .trgt, .len {
!for i,0,.len {
	lda .src  + i
	sta .trgt + i
}	
}

!macro SDBlockAddr .src {
	lda .src + 3
	sta sd_cmd_param+0
	lda .src + 2
	sta sd_cmd_param+1
	lda .src + 1
	sta sd_cmd_param+2
	lda .src + 0
	sta sd_cmd_param+3
}


fat_errno	 		= $0300
fat_begin_lba 		= $0310 ; Begin of FAT32, 4 bytes
fat_reserved_sect 	= $0314 ; number of reserved sectors, 2 bytes
cluster_begin_lba 	= $0316 ; begin of cluster area, 4 bytes
sectors_per_fat 	= $0320 ; sectors per fat, 4 bytes

sd_blktarget = $0400

add32op1	= $8000
add32op2	= $8000 + 4
add32res	= $8000 + 8

	jmp main 

;----------------------------------------------------------------------------------------------
; add 2 32bit numbers in add32op1 and add32op2, result in add32res
;----------------------------------------------------------------------------------------------
add32
	pha
	clc

!for i,0,3 {
	lda add32op1 + i
	adc add32op2 + i
	sta add32res + i	
}
	pla
	rts

main

    lda #dev_uart
    sta chn_out
	sei

	jsr sd_select_card

	jsr lcdclear

	jsr sd_param_init

	lda #$00
	sta sd_blkptr
	lda #$04
	sta sd_blkptr+1

	jsr sd_read_block
	jsr fat_check_signature
	lda fat_errno
	beq +
	+PrintString fat_err_signature
-	jmp -

+
	lda sd_blkptr
	sta tmp6
	lda sd_blkptr+1
	sta tmp6+1

	clc
	lda tmp6
	adc #<BS_Partition0
	sta tmp6
	lda tmp6+1
	adc #>BS_Partition0
	sta tmp6+1


	ldy #PE_TypeCode
	; Check Partition 0 type code
	lda (tmp6),y 
	cmp #$0b
	beq +
	cmp #$0c
	beq +

	; type code not $0b or $0c
	+PrintString fat_err_partition
-	jmp -

+
	; Get LBA start sector
	ldy #PE_LBABegin+3
	lda (tmp6),y
	sta fat_begin_lba + 3 

	dey
	lda (tmp6),y
	sta fat_begin_lba + 2

	dey
	lda (tmp6),y
	sta fat_begin_lba + 1
	
	dey
	lda (tmp6),y
	sta fat_begin_lba + 0

	; Write LBA start address to sd param buffer
	+SDBlockAddr fat_begin_lba

	; Read FAT Volume ID at LBABegin and Check signature
	jsr sd_read_block
	jsr fat_check_signature
	lda fat_errno
	beq +
	+PrintString fat_err_signature
-	jmp -

+
	; Bytes per Sector, must be 512 = $0200
	; lda sd_blktarget + BPB_BytsPerSec + 1
	; lda sd_blktarget + BPB_BytsPerSec 

	; Sectors per Cluster. Valid: 1,2,4,8,16,32,64,128
	; lda sd_blktarget + BPB_SecPerClus

	; Number of reserved Sectors, $20

	ldy #BPB_RsvdSecCnt +1
	lda (sd_blkptr),y
	sta fat_reserved_sect + 1 

	dey
	lda (sd_blkptr),y
	sta fat_reserved_sect 
	
	; Number of FATs. Must be 2
	; lda sd_blktarget + BPB_NumFATs


	ldy #BPB_FATSz32 + 3
	lda (sd_blkptr),y
	sta sectors_per_fat + 3
	dey
	lda (sd_blkptr),y
	sta sectors_per_fat + 2
	dey
	lda (sd_blkptr),y
	sta sectors_per_fat + 1
	dey
	lda (sd_blkptr),y
	sta sectors_per_fat 

	+Copy fat_begin_lba, add32op1, 3

	stz add32op2 + 3
	stz add32op2 + 2

	lda fat_reserved_sect + 1
	sta add32op2 + 1 

	lda fat_reserved_sect 
	sta add32op2 

	jsr add32

	+Copy add32res, fat_begin_lba, 3
	+Copy fat_begin_lba, add32op1, 3
	+Copy sectors_per_fat, add32op2, 3

	jsr add32

	+Copy add32res, add32op1, 3

	jsr add32
	
	+Copy add32res, cluster_begin_lba, 3

	jsr sd_param_init


	+SDBlockAddr cluster_begin_lba
	

	jsr sd_read_block

	ldx #$00

	lda sd_blkptr
	sta tmp6

	lda sd_blkptr+1
	sta tmp6+1

-	ldy #DIR_Name
--	lda (tmp6),y
	cpy #DIR_Name
	bne +
	
	cmp #$e5 ; deleted file
	beq .next

	cmp #$00 ; end of dir
	beq .end
+	jsr chrout
	iny
	cpy #$0b
	bne --

	lda #' '
	jsr chrout

	ldy #DIR_Attr
	lda (tmp6),y
	jsr hexout

	lda #10
	jsr chrout
	lda #13
	jsr chrout

.next
	clc
	lda tmp6
	adc #<32
	sta tmp6

	lda tmp6+1
	adc #>32
	sta tmp6+1

	bra -

.end
	lda #'X'
	jsr chrout
	jsr sd_deselect_card



-	jmp -


fat_check_signature
	pha
	stz fat_errno

	lda sd_blkptr
	sta tmp6
	lda sd_blkptr+1
	sta tmp6+1

	
	clc
	lda tmp6
	adc #<BS_Signature
	sta tmp6


	lda tmp6+1
	adc #>BS_Signature
	sta tmp6+1

	ldy #$00
	lda (tmp6),y
	cmp #$55
	bne +

	iny

	lda (tmp6),y
	cmp #$aa
	bne +
	
	pla
	rts


+	inc fat_errno
	pla
	rts




;fat_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors;
;cluster_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors + (Number_of_FATs * Sectors_Per_FAT);
fat_err_signature !text "bad block signature", $00
fat_err_partition !text "invalid partition type", $00


