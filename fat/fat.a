*=$1000
!src "../bios/defs.h.a"
!src "../bios/bios.h.a"
!src "fat32.h.a"

!macro Copy .src, .trgt, .len {
!for i,0,.len {
	lda .src  + i
	sta .trgt + i
}
}

!macro SDBlockAddr .src {
	lda .src + 3
	sta sd_cmd_param+0
	lda .src + 2
	sta sd_cmd_param+1
	lda .src + 1
	sta sd_cmd_param+2
	lda .src + 0
	sta sd_cmd_param+3
}

!address {

fat_errno	 		= $0300
fat_begin_lba 		= $0310 ; Begin of FAT32, 4 bytes
fat_reserved_sect 	= $0314 ; number of reserved sectors, 2 bytes
cluster_begin_lba 	= $0316 ; begin of cluster area, 4 bytes
sectors_per_fat 	= $0320 ; sectors per fat, 4 bytes
sectors_per_cluster = $0324 ; sectors per cluster, 1 byte
lba_addr			= $0325 ; lba address, 4 bytes
cluster_number		= $0329

sd_blktarget 		= $0400


steckos_start		= $c000	

}



main

    lda #dev_uart
    sta chn_out
	sei


	jsr lcdclear

	jsr fat_mount


	; just use cluster_begin_lba if reading root dir cluster
	+Copy cluster_begin_lba, lba_addr, 3

	; Calculate cluster LBA address for anything else
	; jsr calc_lba_addr
	jsr fat_read_dir

	jsr sd_deselect_card

-	jmp -


fat_check_signature
	pha
	stz fat_errno

	lda sd_blktarget + BS_Signature
	cmp #$55
	bne +
	lda sd_blktarget + BS_Signature+1
	cmp #$aa
	bne +
	
	pla
	rts

+	inc fat_errno
	pla
	rts

calc_lba_addr
	pha
	phy

	; lba_addr = cluster_begin_lba + (cluster_number - 2) * sectors_per_cluster;

	sec
	lda cluster_number 
	sbc #$02
	sta cluster_number 

!for i,1,3 {
	lda cluster_number + i 
	sbc #$00
	sta cluster_number + i
}

	+Copy cluster_begin_lba, lba_addr, 3
	
	ldy sectors_per_cluster

-	clc
	lda cluster_number + 0
	adc lba_addr + 0
	sta lba_addr + 0
	lda cluster_number + 1
	adc lba_addr + 1
	sta lba_addr + 1
	lda cluster_number + 2
	adc lba_addr + 2
	sta lba_addr + 2
	lda cluster_number + 3
	adc lba_addr + 3
	sta lba_addr + 3
	dey
	bne -

	ply
	pla

	rts

fat_mount
	jsr sd_select_card
	jsr sd_param_init

	+SetVector sd_blktarget, sd_blkptr

	jsr sd_read_block
	jsr fat_check_signature

	pha
	phy
	phx

	lda fat_errno
	beq +
	+PrintString fat_err_signature
-	jmp -

+	
	part0 = sd_blktarget + BS_Partition0

	lda part0 + PE_TypeCode
	cmp #$0b
	beq +
	cmp #$0c
	beq +

	; type code not $0b or $0c
	+PrintString fat_err_partition
-	jmp -

+
	ldx #$00
-	
	lda part0 + PE_LBABegin,x
	sta fat_begin_lba,x
	inx
	cpx #$04
	bne -


	; Write LBA start address to sd param buffer
	+SDBlockAddr fat_begin_lba

	+SetVector sd_blktarget, sd_blkptr
	; Read FAT Volume ID at LBABegin and Check signature
	jsr sd_read_block

	jsr fat_check_signature
	lda fat_errno
	beq +
	+PrintString fat_err_signature
-	jmp -

+
	; Bytes per Sector, must be 512 = $0200
	lda sd_blktarget + BPB_BytsPerSec
	bne +

	lda sd_blktarget + BPB_BytsPerSec + 1
	cmp #$02
	beq ++
+	+PrintString fat_err_bad_sect_size
-	jmp -
++
	; Sectors per Cluster. Valid: 1,2,4,8,16,32,64,128
	lda sd_blktarget + BPB_SecPerClus
	sta sectors_per_cluster
	
	; Number of reserved Sectors, $20
	lda sd_blktarget + BPB_RsvdSecCnt + 1
	sta fat_reserved_sect + 1 

	lda sd_blktarget + BPB_RsvdSecCnt 
	sta fat_reserved_sect 

	ldx #$00
-	
	lda sd_blktarget + BPB_FATSz32,x
	sta sectors_per_fat,x
	inx
	cpx #$04
	bne -

	ldx #$00
-	
	lda sd_blktarget + BPB_RootClus,x
	sta cluster_number,x
	inx
	cpx #$04
	bne -

	; cluster_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors + (Number_of_FATs * Sectors_Per_FAT);

	clc
!for i,0,1 {
	lda fat_begin_lba + i
	adc fat_reserved_sect + i
	sta cluster_begin_lba + i	
}

!for i,2,3 {
	lda fat_begin_lba + i
	adc #$00
	sta cluster_begin_lba + i	
}


	; Number of FATs. Must be 2
	lda sd_blktarget + BPB_NumFATs
	tax

-	clc
	ldy #$00
--
	lda cluster_begin_lba,y
	adc sectors_per_fat,y
	sta cluster_begin_lba,y
	iny 
	cpy #$04
	bne --	

	dex
	bne -

	plx
	ply
	pla

	rts


fat_read_dir
	pha
	phy

	jsr sd_param_init
	
	+SetVector sd_blktarget, sd_blkptr
	+SDBlockAddr lba_addr
	jsr sd_read_block

-	ldy #DIR_Attr
	lda (sd_blkptr),y
	cmp #$0f ; Long filename, skip this one
	beq .next
	bit #$02 ; Hidden attribute set, skip
    bne .next

    pha
    ldy #DIR_Name
	lda (sd_blkptr),y

	cmp #$e5 ; deleted file
	beq .next
	cmp #$00 ; end of dir
	beq .end

	jsr fat_list_entry

	pla
   	bit #$04 ; System attribute. load file
   	
   	bne .load


.next
	clc
	lda sd_blkptr
	adc #32
	sta sd_blkptr
	bcc +
	inc sd_blkptr+1	
+
	jmp -

.end
	ply
	pla
	rts

.load
	+PrintString fat_loading

	ldy #DIR_Name
--	lda (sd_blkptr),y
	jsr chrout
	iny
	cpy #$0b
	bne --
	ldy #DIR_FstClusHI +1
	lda (sd_blkptr),y
	sta cluster_number +3

	dey
	lda (sd_blkptr),y
	sta cluster_number +2

	ldy #DIR_FstClusLO +1
	lda (sd_blkptr),y
	sta cluster_number +1
	dey
	lda (sd_blkptr),y
	sta cluster_number 

	jsr calc_lba_addr

	+SetVector steckos_start, sd_blkptr
	+SDBlockAddr lba_addr
	jsr sd_read_block

	+PrintString fat_loading_done

	jmp steckos_start

;-	jmp -

fat_list_entry
	ldy #DIR_Name
-	lda (sd_blkptr),y
	jsr chrout
	iny
	cpy #$0b
	bne -

	jsr space

	ldy #DIR_FileSize + 3

	lda (sd_blkptr),y
	jsr hexout
	dey
	lda (sd_blkptr),y
	jsr hexout
	dey
	lda (sd_blkptr),y
	jsr hexout
	dey
	lda (sd_blkptr),y
	jsr hexout

	jsr space

	ldy #DIR_Attr
	lda (sd_blkptr),y

 	bit #$10 ; Is a directory
    beq +
    lda #'D'
    bra ++ 

+	bit #$04 ; Is system
	beq +
    lda #'S'
    bra ++
 
+	bit #$08 ; Is volume ID
	beq +
    lda #'V'
    bra ++ 
+	
	lda #'F'
++	jsr chrout
	jmp crlf
;	rts


crlf
	lda #10
	jsr chrout
	lda #13
	jmp chrout
	; rts

space 
	lda #' '
	jmp chrout
	; rts

;fat_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors;
;cluster_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors + (Number_of_FATs * Sectors_Per_FAT);
fat_err_signature !text "bad block signature", $00
fat_err_partition !text "invalid partition type", $00
fat_err_bad_sect_size !text "sector size unsupported", $00
fat_err_num_fats	  !text "invalid number of FATs (!= 2)", $00
fat_loading		  !text "Loading ",$00
fat_loading_done  !text " done.",$00
