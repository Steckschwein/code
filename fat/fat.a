*=$1000
!src "../bios/defs.h.a"
!src "../bios/bios.h.a"
!src "fat32.h.a"

fat_errno	 = $0300
lba_begin 	 = $0310 ; Begin of FAT32, 4 bytes
fat_reserved_sect = $0314 ; number of reserved sectors, 2 bytes
cluster_begin_lba = $0316 ; begin of cluster area, 4 bytes
sectors_per_fat = $0320 ; sectors per fat, 4 bytes

sd_blktarget = $0400

add32op1	= $8000
add32op2	= $8000 + 4
add32res	= $8000 + 8

	jmp main 

;----------------------------------------------------------------------------------------------
; add 2 32bit numbers in add32op1 and add32op2, result in add32res
;----------------------------------------------------------------------------------------------
add32
	pha
	clc

!for i,0,3 {
	lda add32op1 + i
	adc add32op2 + i
	sta add32res + i	
}
	pla
	rts

main

    lda #dev_lcd
    sta chn_out
	sei

	jsr sd_select_card

	jsr lcdclear

	jsr sd_param_init

	lda #$00
	sta sd_blkptr
	lda #$04
	sta sd_blkptr+1

	jsr sd_read_block
	jsr fat_check_signature

	lda fat_errno
	beq +

	+PrintString fat_err_signature
-	jmp -

+
	
	; Check Partition 0 type code
	lda sd_blktarget+BS_Partition0+PE_TypeCode
	cmp #$0b
	beq +

	cmp #$0c
	beq +

	; type code not $0b or $0c
	+PrintString fat_err_partition
-	jmp -

+

	; write start sector from partition entry to cmd param buffer (in reverse order)
	lda sd_blktarget+BS_Partition0+PE_LBABegin+3
	sta sd_cmd_param
	sta fat_begin_lba + 3 

	lda sd_blktarget+BS_Partition0+PE_LBABegin+2
	sta sd_cmd_param+1
	sta fat_begin_lba + 2

	lda sd_blktarget+BS_Partition0+PE_LBABegin+1
	sta sd_cmd_param+2
	sta fat_begin_lba + 1
	
	lda sd_blktarget+BS_Partition0+PE_LBABegin
	sta sd_cmd_param+4	
	sta fat_begin_lba + 0
	
	; Read FAT Volume ID at LBABegin and Check signature
	jsr sd_read_block
	jsr fat_check_signature

	lda fat_errno
	beq +

	+PrintString fat_err_signature
-	jmp -

+

	; Bytes per Sector, must be 512 = $0200
	; lda sd_blktarget + BPB_BytsPerSec + 1
	; lda sd_blktarget + BPB_BytsPerSec 

	; Sectors per Cluster. Valid: 1,2,4,8,16,32,64,128
	; lda sd_blktarget + BPB_SecPerClus

	; Number of reserved Sectors, $20
	lda sd_blktarget + BPB_RsvdSecCnt + 1
	sta fat_reserved_sect + 1 

	lda sd_blktarget + BPB_RsvdSecCnt 
	sta fat_reserved_sect 

	; Number of FATs. Must be 2
	; lda sd_blktarget + BPB_NumFATs

	lda sd_blktarget + BPB_FATSz32 + 3
	sta sectors_per_fat + 3
	lda sd_blktarget + BPB_FATSz32 + 2
	sta sectors_per_fat + 2
	lda sd_blktarget + BPB_FATSz32 + 1
	sta sectors_per_fat + 1
	lda sd_blktarget + BPB_FATSz32 + 0
	sta sectors_per_fat + 0



!for i,0,3 {
	lda fat_begin_lba + i
	sta add32op1 + i
}	

	stz add32op2 + 3
	stz add32op2 + 2

	lda fat_reserved_sect + 1
	sta add32op2 + 1 

	lda fat_reserved_sect 
	sta add32op2 

	jsr add32

!for i,0,3 {
	lda add32res + i
	sta fat_begin_lba + i
}	

!for i,0,3 {
	lda fat_begin_lba + i
	sta add32op1 + i
}
!for i,0,3 {
	lda sectors_per_fat + i
	sta add32op2 + i
}
	jsr add32

!for i,0,3 {
	lda add32res + i
	sta add32op1 + i
}

	jsr add32
	
!for i,0,3 {
	lda add32res + i
	sta cluster_begin_lba + i
}

	jsr sd_param_init


	lda cluster_begin_lba + 3
	sta sd_cmd_param+0
	lda cluster_begin_lba + 2
	sta sd_cmd_param+1
	lda cluster_begin_lba + 1
	sta sd_cmd_param+2
	lda cluster_begin_lba + 0
	sta sd_cmd_param+3
	
	jsr sd_read_block

	ldx #$00

-	lda sd_blktarget + 160 + DIR_Name,x
	jsr chrout
	inx
	cpx #$0b
	bne -

	lda #' '
	jsr chrout

	lda sd_blktarget + 160 + DIR_Attr
	jsr hexout

	jsr sd_deselect_card



-	jmp -


fat_check_signature
	pha
	stz fat_errno

	lda sd_blktarget + BS_Signature
	cmp #$55
	bne +

	lda sd_blktarget + BS_Signature+1
	cmp #$aa
	bne +
	
	pla
	rts


+	inc fat_errno
	pla
	rts




;fat_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors;
;cluster_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors + (Number_of_FATs * Sectors_Per_FAT);
fat_err_signature !text "bad block signature", $00
fat_err_partition !text "invalid partition type", $00

; some space for numbers
fat_begin_lba !byte $00,$00,$00,$00
