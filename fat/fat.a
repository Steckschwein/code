*=$1000
!src "../bios/defs.h.a"
!src "../bios/bios.h.a"
!src "fat32.h.a"

!macro Copy .src, .trgt, .len {
!for i,0,.len {
	lda .src  + i
	sta .trgt + i
}
}

!macro SDBlockAddr .src {
	lda .src + 3
	sta sd_cmd_param+0
	lda .src + 2
	sta sd_cmd_param+1
	lda .src + 1
	sta sd_cmd_param+2
	lda .src + 0
	sta sd_cmd_param+3
}


fat_errno	 		= $0300
fat_begin_lba 		= $0310 ; Begin of FAT32, 4 bytes
fat_reserved_sect 	= $0314 ; number of reserved sectors, 2 bytes
cluster_begin_lba 	= $0316 ; begin of cluster area, 4 bytes
sectors_per_fat 	= $0320 ; sectors per fat, 4 bytes
sectors_per_cluster = $0324 ; sectors per cluster, 1 byte
lba_addr			= $0325 ; lba address, 4 bytes
cluster_number		= $0329

sd_blktarget = $0400

add32op1	= $8000
add32op2	= $8000 + 4
add32res	= $8000 + 8

	jmp main 



main

    lda #dev_uart
    sta chn_out
	sei


	jsr lcdclear

	jsr fat_mount


	; just use cluster_begin_lba if reading root dir cluster
	+Copy cluster_begin_lba, lba_addr, 3

	; Calculate cluster LBA address for anything else
	; jsr calc_lba_addr

	
	jsr fat_list_dir
	jsr sd_deselect_card

-	jmp -


fat_check_signature
	pha
	stz fat_errno

	clc
	lda sd_blkptr
	adc #<BS_Signature
	sta tmp6
	lda sd_blkptr+1
	adc #>BS_Signature
	sta tmp6+1

	ldy #$00
	lda (tmp6),y
	cmp #$55
	bne +

	iny

	lda (tmp6),y
	cmp #$aa
	bne +
	
	pla
	rts


+	inc fat_errno
	pla
	rts

calc_lba_addr
	pha
	phy

	; lba_addr = cluster_begin_lba + (cluster_number - 2) * sectors_per_cluster;

	sec
	lda cluster_number 
	sbc #$02
	sta cluster_number 

!for i,1,3 {
	lda cluster_number + i 
	sbc #$00
	sta cluster_number + i
}

	+Copy cluster_begin_lba, lba_addr, 3
	
	ldy sectors_per_cluster

-	clc
	lda cluster_number + 0
	adc lba_addr + 0
	sta lba_addr + 0
	lda cluster_number + 1
	adc lba_addr + 1
	sta lba_addr + 1
	lda cluster_number + 2
	adc lba_addr + 2
	sta lba_addr + 2
	lda cluster_number + 3
	adc lba_addr + 3
	sta lba_addr + 3
	dey
	bne -

	ply
	pla

	rts

fat_mount
	jsr sd_select_card
	jsr sd_param_init

	+SetVector $0400, sd_blkptr

	jsr sd_read_block
	jsr fat_check_signature

	pha
	phy

	lda fat_errno
	beq +
	+PrintString fat_err_signature
-	jmp -

+	clc
	lda sd_blkptr
	adc #<BS_Partition0
	sta sd_blkptr
	lda sd_blkptr+1
	adc #>BS_Partition0
	sta sd_blkptr+1


	ldy #PE_TypeCode
	; Check Partition 0 type code
	lda (sd_blkptr),y 
	cmp #$0b
	beq +
	cmp #$0c
	beq +

	; type code not $0b or $0c
	+PrintString fat_err_partition
-	jmp -

+
	; Get LBA partition start sector
	ldy #PE_LBABegin+3
	lda (sd_blkptr),y
	sta fat_begin_lba + 3 

	dey
	lda (sd_blkptr),y
	sta fat_begin_lba + 2

	dey
	lda (sd_blkptr),y
	sta fat_begin_lba + 1
	
	dey
	lda (sd_blkptr),y
	sta fat_begin_lba + 0

	; Write LBA start address to sd param buffer
	+SDBlockAddr fat_begin_lba

	+SetVector $0400, sd_blkptr
	; Read FAT Volume ID at LBABegin and Check signature
	jsr sd_read_block

	jsr fat_check_signature
	lda fat_errno
	beq +
	+PrintString fat_err_signature
-	jmp -

+
	; Bytes per Sector, must be 512 = $0200
	; lda sd_blktarget + BPB_BytsPerSec + 1
	; lda sd_blktarget + BPB_BytsPerSec 

	; Sectors per Cluster. Valid: 1,2,4,8,16,32,64,128
	ldy #BPB_SecPerClus
	lda (sd_blkptr),y
	sta sectors_per_cluster
	
	; Number of reserved Sectors, $20
	ldy #BPB_RsvdSecCnt +1
	lda (sd_blkptr),y
	sta fat_reserved_sect + 1 

	dey
	lda (sd_blkptr),y
	sta fat_reserved_sect 
	
	; Number of FATs. Must be 2
	; lda sd_blktarget + BPB_NumFATs


	ldy #BPB_FATSz32 + 3
	lda (sd_blkptr),y
	sta sectors_per_fat + 3
	dey
	lda (sd_blkptr),y
	sta sectors_per_fat + 2
	dey
	lda (sd_blkptr),y
	sta sectors_per_fat + 1
	dey
	lda (sd_blkptr),y
	sta sectors_per_fat 

	ldy #BPB_RootClus +3
	lda (sd_blkptr),y
	sta cluster_number + 3
	dey
	lda (sd_blkptr),y
	sta cluster_number + 2
	dey
	lda (sd_blkptr),y
	sta cluster_number + 1
	dey
	lda (sd_blkptr),y
	sta cluster_number 


	; cluster_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors + (Number_of_FATs * Sectors_Per_FAT);

	; +Copy fat_begin_lba, add32op1, 3

	stz add32op2 + 3
	stz add32op2 + 2

	lda fat_reserved_sect + 1
	sta add32op2 + 1 

	lda fat_reserved_sect 
	sta add32op2 

	; jsr add32
	clc
!for i,0,3 {
	lda fat_begin_lba + i
	adc add32op2 + i
	sta cluster_begin_lba + i	
}


	; +Copy add32res, fat_begin_lba, 3
	; +Copy fat_begin_lba, add32op1, 3
	; +Copy sectors_per_fat, add32op2, 3

	; jsr add32
	clc
!for i,0,3 {
	lda cluster_begin_lba + i
	adc sectors_per_fat + i
	sta cluster_begin_lba + i	
}
	clc
!for i,0,3 {
	lda cluster_begin_lba + i
	adc sectors_per_fat + i
	sta cluster_begin_lba + i	
}

	; +Copy add32res, add32op1, 3

	; jsr add32
	
	; +Copy add32res, cluster_begin_lba, 3

	ply
	pla

	rts


fat_list_dir
	pha
	phx	
	phy

	jsr sd_param_init

	+SetVector $0400, sd_blkptr
	+SDBlockAddr lba_addr
	jsr sd_read_block

-	ldy #DIR_Attr
	lda (sd_blkptr),y
	cmp #$0f ; Long filename, skip this one
	beq .next
	bit #$02 ; Hidden attribute set, skip
    bne .next


	tax


	ldy #DIR_Name
--	lda (sd_blkptr),y
	cpy #DIR_Name 	; First character?
	bne +			; yes, check stuff
	
	cmp #$e5 ; deleted file
	beq .next

	cmp #$00 ; end of dir
	beq .end
+	jsr chrout
	iny
	cpy #$0b
	bne --

	lda #' '
	jsr chrout

    jsr foo



	lda #' '
	jsr chrout



	txa
 	bit #$10 ; Is a directory
    beq +
    lda #'D'
    jsr chrout
    bra ++ 

+	bit #$04 ; Is system, load file
	beq +
    lda #'S'
    jsr chrout

	bne .load

+	bit #$08 ; Is volume ID
	beq +
    lda #'V'
    jsr chrout


    bra ++ 
+	

	lda #'F'
    jsr chrout

++	
	; ldy #DIR_FileSize + 3
	; lda (sd_blkptr),y
	; jsr hexout
	; dey
	; lda (sd_blkptr),y
	; jsr hexout
	; dey
	; lda (sd_blkptr),y
	; jsr hexout
	; dey
	; lda (sd_blkptr),y
	; jsr hexout


    jsr crlf


.next
	clc
	lda sd_blkptr
	adc #<32
	sta sd_blkptr

	lda sd_blkptr+1
	adc #>32
	sta sd_blkptr+1

	jmp -

.end
	ply
	plx
	pla
	rts

.load
	
	+SetVector $c000, sd_blkptr
	+SDBlockAddr lba_addr
	jsr sd_read_block

	; lda #'X'
	; jsr lcdprint

	jsr sd_read_block

	; lda #'Y'
	; jsr lcdprint


	jmp $c000

-	jmp -

foo
	lda #' '
    jsr chrout

	ldy #DIR_FstClusHI +1
	lda (sd_blkptr),y
	sta cluster_number +3
	jsr hexout

	dey
	lda (sd_blkptr),y
	sta cluster_number +2
	jsr hexout

	lda #' '
    jsr chrout

	ldy #DIR_FstClusLO +1
	lda (sd_blkptr),y
	sta cluster_number +1
	jsr hexout
	dey
	lda (sd_blkptr),y
	sta cluster_number 
	jsr hexout

	lda #' '
    jsr chrout

	jsr calc_lba_addr

!for i,3,0 {
	lda lba_addr +i
	jsr hexout
}

	rts

crlf
	pha
	lda #10
	jsr chrout
	lda #13
	jsr chrout
	pla
	rts




;fat_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors;
;cluster_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors + (Number_of_FATs * Sectors_Per_FAT);
fat_err_signature !text "bad block signature", $00
fat_err_partition !text "invalid partition type", $00


