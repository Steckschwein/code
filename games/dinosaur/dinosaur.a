*=$1000
	jmp main
	
!src <defs.h.a>
!src <bios.h.a>
!src <macro.h.a>
!src <kernel.h.a>
!src <via.h.a>
!src <joystick.h.a>
!src <t99xx.lib.a>
	
.frame_cnt=tmp0
.seed=tmp1
.status=tmp2
.dinosaur_state=tmp3
.score_board_cnt=tmp4
.sin_tab_offs=tmp5
.sin_tab_ptr=.ptr1

.BLANK=210
.A_GX_SCR=$1800
.A_GX_COL=$1c80
.A_GX_PAT_1=$0000
.A_GX_PAT_2=$0800
.A_SP_PAT=$1000
.A_SP_ATR=$1c00
.GAME_CHAR_OFFS=$0400
.screen=$2000
.dinosaur_color=Dark_Green
.DINOSAUR_Y=125
.DINOSAUR_JUMP=1<<0

main:
	sei
	jsr	.init_via
	jsr	vdp_display_off
	jsr	.init_vram
	jsr	.init_screen
	
	lda	#33
	sta	.seed
	stz	.status
	stz	.dinosaur_state	; run initialy
	stz .score_board_cnt
	stz	.sin_tab_offs

	jsr	.update_vram

	+SetVector	.game_isr, irqvec
	
	lda	#Light_Blue
	sta	.adrl		;set character color
	ldx	#$20
	lda	#<.A_GX_COL
	ldy	#.WRITE_ADDRESS + >.A_GX_COL	;color vram
	jsr	vdp_fills
	
	lda	#$d0					;sprites off, at least y=$d0 will disable the sprite subsystem
	sta	.adrl
	ldx	#32*4
	lda	#<.A_SP_ATR
	ldy	#.WRITE_ADDRESS + >.A_SP_ATR
	jsr	vdp_fills
	
	+SetVector .vdp_init_gfx, .adrl
	jsr	vdp_init_reg
	
	cli
	
-	
	bra	-

.vdp_init_gfx
	!byte 	0
	!byte	v_reg1_16k|v_reg1_display_on|v_reg1_spr_size|v_reg1_int
	!byte 	(.A_GX_SCR / $400)	; name table - value * $400					--> characters 
	!byte 	(.A_GX_COL /  $40)	; color table - value * $40 (gfx1), 7f/ff (gfx2)
	!byte 	(.A_GX_PAT_2 / $800) ; pattern table (charset) - value * $800  	--> offset in VRAM 
	!byte	(.A_SP_ATR / $80)	; sprite attribute table - value * $80 		--> offset in VRAM
	!byte 	(.A_SP_PAT / $800)  ; sprite pattern table - value * $800  		--> offset in VRAM
	!byte	Light_Blue

.init_via
	;via port a
	lda #$00
	sta via1ier             ; disable VIA1 T1 interrupts
	lda #%00000000 			; set latch
	sta via1acr
	lda #%11001100 			; set level
	sta via1pcr
	lda #%11000000 			; set PA6,7 to output (port select), PA1-5 to input (directions)
	sta via1ddra
	rts 
	
.init_screen
	ldx	#$00
-	lda	.game_char_tab,x
	sta	.screen,x
	inx
	cpx	#32*4
	bne	-
	rts
	
.scroll_background
	lda	.status
	bne	+
	inc	.status
	lda	#00
	ldy	#v_reg4
	jmp	vdp_sreg
+	stz	.status
	lda	#(.A_GX_PAT_2 / $800)
	ldy	#v_reg4
	jsr	vdp_sreg

	lda	.screen
	sta	.screen+128
	lda	.screen+32
	sta	.screen+128+1
	lda	.screen+64
	sta	.screen+128+2
	lda	.screen+96
	sta	.screen+128+3
	
	ldx	#$00
-	lda	.screen+1,x
	sta	.screen,x
	lda	.screen+32+1,x
	sta	.screen+32,x
	lda	.screen+64+1,x
	sta	.screen+64,x
	lda	.screen+96+1,x
	sta	.screen+96,x
	inx	
	cpx	#32
	bne	-
	lda	.screen+128
	sta	.screen+31
	lda	.screen+128+1
	sta	.screen+31+32
	lda	.screen+128+2
	sta	.screen+31+64
	lda	.screen+128+3
	sta	.screen+31+96
	
	rts

.animate_dinosaur
	lda	.dinosaur_state
	and	#.DINOSAUR_JUMP
	beq	++
	lda	#28
	sta	.sprite_tab+3*4+2
	ldy .sin_tab_offs
	lda	#.DINOSAUR_Y
	clc
	sbc	(.sin_tab_ptr), y
	sta	.sprite_tab		
	sta	.sprite_tab+2*4
	clc
	adc #16				;+16px y offset for the lower sprites
	sta	.sprite_tab+1*4
	sta	.sprite_tab+3*4
	iny
	cmp	#(.DINOSAUR_Y+16) ;detect end of sin tab, accu must be dino y+16
	bne	+
	lda	.dinosaur_state
	and	#(!.DINOSAUR_JUMP)
	sta .dinosaur_state
	ldy	#$00
+	sty	.sin_tab_offs
	rts
++	lda	.frame_cnt
	and	#3
	bne	++	
	lda	.sprite_tab+2*4+2
	cmp	#$08
	beq	+
	lda	#08
	sta	.sprite_tab+2*4+2
	lda	#12
	sta	.sprite_tab+3*4+2
++	rts	
+	lda	#16
	sta	.sprite_tab+2*4+2
	lda	#20
	sta	.sprite_tab+3*4+2
	rts

.animate_sky
	ldx	#$00
-	dec	.sprite_tab_sky+1,x
	bne	++
	lda	.sprite_tab_sky+3,x
	tay
	and	#Sprite_EC
	bne	+
	tya	
	ora	#Sprite_EC
	sta	.sprite_tab_sky+3,x
	lda	#32
	sta .sprite_tab_sky+1,x
	bra	++
+	tya
	and	#<!Sprite_EC
	sta	.sprite_tab_sky+3,x
	lda	#$ff
	sta .sprite_tab_sky+1,x
++	inx
	inx
	inx
	inx
	cpx	#32
	bne	-
	rts
	
.game_isr
	bit	a_vreg
	bpl	.game_isr_exit
	+save
	
	lda	#Dark_Yellow
;	jsr	vdp_bgcolor
	
	jsr	.scroll_background
	
	jsr	.update_vram
	
	jsr	.action_handler
	jsr	.animate_dinosaur
	jsr	.animate_sky
	jsr	.score_board

	inc	.frame_cnt

	lda	#Black
	jsr	vdp_bgcolor
	
	+restore
.game_isr_exit	
	rti
	
.score_board
	lda	.score_board_cnt	;every 5 frames update score, which means 10 digits per second
	inc
	cmp #$05
	beq	+
	sta	.score_board_cnt
	rts
+	stz	.score_board_cnt

	sed						;add in decimal mode
	lda .score_value+2
	clc
	adc	#$01
	sta .score_value+2
	bcc	+
	adc	.score_value+1
	sta	.score_value+1
	bcc	+
	adc	.score_value
	sta	.score_value	
+	cld
	rts
	
	
.action_handler
	lda	#PORT_SEL_2		;port 1
	sta	via1porta
	lda	via1porta
	and #JOY_UP
	beq	+
	lda	via1porta
	and #JOY_FIRE
	bne	++
+	lda	#.DINOSAUR_JUMP
	ora	.dinosaur_state
	sta .dinosaur_state
	+SetVector .sin_tab, .sin_tab_ptr	;long jump
	rts
++	lda	.sin_tab_offs	;no joy/key pressed after 5 frames, switch to short jump
	cmp	#6
	bne	+
	+SetVector .sin_tab_short, .sin_tab_ptr
+
	rts
		
.init_vram
	stz	.frame_cnt

	ldx	#$03
	lda	#.BLANK					;fill vram screen with blank
	sta	.adrl
	lda	#<.A_GX_SCR
	ldy	#.WRITE_ADDRESS + >.A_GX_SCR
	jsr	vdp_fill

	+SetVector charset, .adrl			; init 2 game charset with character set
	lda #<.A_GX_PAT_1
	ldy #.WRITE_ADDRESS + >.A_GX_PAT_1
	ldx	#$08
	jsr	vdp_memcpy
	+SetVector charset, .adrl			; 
	lda #<.A_GX_PAT_2
	ldy #.WRITE_ADDRESS + >.A_GX_PAT_2
	ldx	#$08
	jsr	vdp_memcpy
	
	+SetVector .game_chars, .adrl		; first game charset
	lda #<(.A_GX_PAT_1+.GAME_CHAR_OFFS)
	ldy #.WRITE_ADDRESS + >(.A_GX_PAT_1+.GAME_CHAR_OFFS)
	ldx	#$03
	jsr	vdp_memcpy
	
	+SetVector .game_chars_4px, .adrl	; 2nd game charset with 4px offset
	lda #<(.A_GX_PAT_2+.GAME_CHAR_OFFS)
	ldy #.WRITE_ADDRESS + >(.A_GX_PAT_2+.GAME_CHAR_OFFS)
	ldx	#$03
	jsr	vdp_memcpy
	
	+SetVector .sprites, .adrl
	lda	#<.A_SP_PAT
	ldy	#.WRITE_ADDRESS + >.A_SP_PAT
	ldx	#$02
	jsr	vdp_memcpy

	+SetVector .screen, .adrl
	lda	#<(.A_GX_SCR + (22*32))
	ldy	#.WRITE_ADDRESS + >(.A_GX_SCR+(22*32))
	jsr	vdp_sreg
	ldx	#$00
-	lda	.text_game_label,x
	beq	+
	sta	a_vram
	inx
	bne	-
	
+	rts
	
.update_vram
	+SetVector .sprite_tab, .adrl		;update sprite tab
	lda	#<.A_SP_ATR
	ldy	#.WRITE_ADDRESS + >.A_SP_ATR
	ldx	#12*4
	jsr	vdp_memcpys

	+SetVector .screen, .adrl			;score_board
	lda	#<(.A_GX_SCR + (1*32))+17
	ldy	#.WRITE_ADDRESS + >(.A_GX_SCR+(1*32)+17)
	jsr	vdp_sreg
	ldx	#$00
-	lda	.text_score_board,x
	beq	+
	sta	a_vram
	inx
	bne	-
+	lda	.score_value_high
	jsr .digit_out
	lda	.score_value_high+1
	jsr .digits_out
	lda	.score_value_high+2
	jsr .digits_out
	lda	#' '
	sta a_vram
	lda	.score_value
	jsr .digit_out
	lda	.score_value+1
	jsr .digits_out
	lda	.score_value+2
	jsr .digits_out
	
	+SetVector .screen, .adrl			;copy screen
	lda	#<(.A_GX_SCR + (16*32))
	ldy	#.WRITE_ADDRESS + >(.A_GX_SCR+(16*32))
	ldx	#32*4
	jmp	vdp_memcpys
	
	rts

.digits_out
	pha
	lsr
	lsr
	lsr
	lsr
	ora	#'0'
	sta a_vram
	pla
.digit_out
	and #$0f
	ora	#'0'
	sta a_vram
	rts
	
.rnd:
   lda .seed
   beq .doEor
   asl
   beq .noEor ;if the input was $80, skip the EOR
   bcc .noEor
.doEor:    
	eor #$1d
.noEor:  
	sta .seed
	rts

.sprite_tab
	!byte	.DINOSAUR_Y,	32,0, .dinosaur_color
	!byte	.DINOSAUR_Y+16,	32,4, .dinosaur_color
	!byte	.DINOSAUR_Y,	16,8, .dinosaur_color	;0100 ->  1000
	!byte	.DINOSAUR_Y+16,	16,12, .dinosaur_color  ;1100 -> 10100
.sprite_tab_sky
	!byte	40,100,36, White
	!byte	40,116,40, White
	!byte	56,30,36, White
	!byte	56,46,40, White
	!byte	72,70,36, White
	!byte	72,86,40, White
	!byte	98,200,36, White
	!byte	98,216,40, White

.text_game_label	!text " Verbindung zum Internet konnte  nicht hergestellt werden.",$0
.text_game_over		!text "GAME OVER",$0
.text_score_board	!text "HI ",$0
.score_value		!byte 0,0,0
.score_value_high 	!byte 0,0,0

.sprites
+SpriteLine16start
!src "dinosaur.sprites.a"

.game_char_tab
	!byte 128, 132, 136, 210, 210, 210, 210, 210, 128, 155, 159, 163, 167, 171, 175, 179, 183, 187, 191, 195, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210
	!byte 129, 133, 137, 140, 143, 146, 149, 152, 129, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210
	!byte 130, 134, 138, 141, 144, 147, 150, 153, 130, 157, 161, 165, 169, 173, 177, 181, 185, 189, 193, 197, 199, 201, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210
	!byte 131, 135, 139, 142, 145, 148, 151, 154, 131, 158, 162, 166, 170, 174, 178, 182, 186, 190, 194, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 206, 207, 208

.level_bg_1; cactus
	!byte 128, 132, 136 
	!byte 129, 133, 137 
	!byte 130, 134, 138 
	!byte 131, 135, 139
.level_bg_2 ;3 cacti
	!byte 210, 210, 210, 210, 210
	!byte 140, 143, 146, 149, 152
	!byte 141, 144, 147, 150, 153
	!byte 142, 145, 148, 151, 154
.level_bg_3 ;4 cacti
	!byte 128, 155, 159, 163, 167, 171, 175
	!byte 129, 156, 160, 164, 168, 172, 176
	!byte 130, 157, 161, 165, 169, 173, 177
	!byte 131, 158, 162, 166, 170, 174, 178
.level_bg_4 ;2 cacti
	!byte 179, 183, 187, 191, 195
	!byte 180, 184, 188, 192, 196 
	!byte 181, 185, 189, 193, 197 
	!byte 182, 186, 190, 194, 198 
.level_bg_5 ;hills
	!byte 210, 210, 210, 210, 210
	!byte 210, 210, 210, 210, 210 
	!byte 199, 201, 210, 210, 210 
	!byte 200, 202, 203, 204, 205
.level_bg_6 ;desert
	!byte 210, 210, 210, 210
	!byte 210, 210, 210, 210
	!byte 210, 210, 210, 210
	!byte 206, 207, 208, 209

.sin_tab
	!src "sintab.a"
.sin_tab_short
	!src "sintab.short.a"

.game_chars
!src "dinosaur.chars.1.res"
!src "dinosaur.chars.2.res"
!src "dinosaur.chars.3.res"
!src "dinosaur.chars.4.res"
!src "dinosaur.chars.5.res"
!src "dinosaur.chars.6.res"
.game_chars_4px
!src "dinosaur.chars.1.4px.res"
!src "dinosaur.chars.2.4px.res"
!src "dinosaur.chars.3.4px.res"
!src "dinosaur.chars.4.4px.res"
!src "dinosaur.chars.5.4px.res"
!src "dinosaur.chars.6.4px.res"

!fill 255,0