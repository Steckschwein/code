*=$1000
	jmp main
	
!src <defs.h.a>
!src <bios.h.a>
!src <macro.h.a>
!src <kernel.h.a>
!src <via.h.a>
!src <joystick.h.a>
!src <t99xx.lib.a>
	
.frame_cnt=tmp0
.seed=tmp1
.game_status=tmp2
.dinosaur_state=tmp3
.score_board_cnt=tmp4
.sin_tab_offs=tmp5
.level_bg_cnt=tmp6
.level_script_ptr=tmp7
.level_bg_ptr=.ptr2
.sin_tab_ptr=.ptr1

.CHAR_BLANK=210
.CHAR_LAST_FG=198		; last character of foreground (cacti), range 128-198

.A_GX_SCR=$1800
.A_GX_COL=$1c80
.A_GX_PAT_1=$0000
.A_GX_PAT_2=$0800
.A_SP_PAT=$1000
.A_SP_ATR=$1c00
.GAME_CHAR_OFFS=$0400
.Y_OFS_GAME_OVER=11
.screen=$2000
.dinosaur_color=Dark_Green
.DINOSAUR_X=20
.DINOSAUR_Y=125
;.PD_Y=114
.PD_Y=40
.DINOSAUR_HEIGHT=30
.DINOSAUR_RUN=1<<0
.DINOSAUR_JUMP=1<<1
.DINOSAUR_DUCK=1<<2
.DINOSAUR_DEAD=1<<3
.STATUS_PLAY=1<<0
.STATUS_GAME_OVER=1<<1

main:
	sei
	lda	a_vreg

	jsr	.init_via
	jsr	vdp_display_off
	jsr	.init_vram
	jsr	.init_screen
	
	lda	#33
	sta	.seed

	jsr	.new_game
	lda #.STATUS_GAME_OVER
	sta	.game_status

	jsr	.update_vram

	+SetVector	.game_isr, irqvec
	
	lda	#Light_Blue
	sta	.adrl		;set character color
	ldx	#$20
	lda	#<.A_GX_COL
	ldy	#.WRITE_ADDRESS + >.A_GX_COL	;color vram
	jsr	vdp_fills
	
	lda	#$d0					;sprites off, at least y=$d0 will disable the sprite subsystem
	sta	.adrl
	ldx	#32*4
	lda	#<.A_SP_ATR
	ldy	#.WRITE_ADDRESS + >.A_SP_ATR
	jsr	vdp_fills
	
	+SetVector .vdp_init_gfx, .adrl
	jsr	vdp_init_reg
	
	cli
	
-	bra	-

.vdp_init_gfx
	!byte 	0
	!byte	v_reg1_16k|v_reg1_display_on|v_reg1_spr_size|v_reg1_int
	!byte 	(.A_GX_SCR / $400)	; name table - value * $400					--> characters 
	!byte 	(.A_GX_COL /  $40)	; color table - value * $40 (gfx1), 7f/ff (gfx2)
	!byte 	(.A_GX_PAT_2 / $800) ; pattern table (charset) - value * $800  	--> offset in VRAM 
	!byte	(.A_SP_ATR / $80)	; sprite attribute table - value * $80 		--> offset in VRAM
	!byte 	(.A_SP_PAT / $800)  ; sprite pattern table - value * $800  		--> offset in VRAM
	!byte	Light_Blue

.init_via
	;via port a
	; lda #$00
	stz via1ier             ; disable VIA1 T1 interrupts
	stz via1acr
	lda #%11001100 			; set level
	sta via1pcr
	lda #%11000000 			; set PA6,7 to output (port select), PA1-5 to input (directions)
	sta via1ddra
	rts
	
.init_screen				;draw desert 
	ldx	#$00
	ldy	#206
-	lda	#.CHAR_BLANK
	sta	.screen,x
	sta	.screen+32*1,x
	sta	.screen+32*2,x
	tya
	sta	.screen+32*3,x
	iny
	cpy	#.CHAR_BLANK
	bne	+
	ldy	#206
+	inx
	cpx	#32
	bne	-
	rts
	
.scroll_background
	lda	.frame_cnt
	and	#01
	bne	+
	lda	#00
	ldy	#v_reg4
	jmp	vdp_sreg
+	lda	#(.A_GX_PAT_2 / $800)
	ldy	#v_reg4
	jsr	vdp_sreg
	
	ldx	#$00
-	lda	.screen+1,x
	sta	.screen,x
	lda	.screen+32+1,x
	sta	.screen+32,x
	lda	.screen+32*2+1,x
	sta	.screen+32*2,x
	lda	.screen+32*3+1,x
	sta	.screen+32*3,x
	inx	
	cpx	#32
	bne	-
	
	lda	.level_bg_cnt		;
	cmp	(.level_bg_ptr)
	beq	+
--	asl	; x4, rows
	asl
	tay	
	iny ;+1 into bg table
	lda	(.level_bg_ptr),y
	sta	.screen+31
	iny
	lda	(.level_bg_ptr),y
	sta	.screen+31+(32*1)
	iny
	lda	(.level_bg_ptr),y
	sta	.screen+31+(32*2)
	iny
	lda	(.level_bg_ptr),y
	sta	.screen+31+(32*3)
	inc	.level_bg_cnt
	rts	
+	
-	ldx	.level_script_ptr
	lda	.level_script, x
	bpl	+
	stz	.level_script_ptr
	bra	-
+	tax
	inc .level_script_ptr
	txa
	beq	+				;background desert/hills
	jsr .rnd			;otherwise choose cacti randomly
	and	#$03
	asl
	tax
	lda	.bg_table, x	;set level background ptr into level table
	sta	.level_bg_ptr
	lda	.bg_table+1, x
	sta	.level_bg_ptr+1
	bra	++
	
+	jsr .rnd			;desert/hills randomly
	and	#$10
	beq	+
	+SetVector .level_bg_5, .level_bg_ptr
	bra	++
+	+SetVector .level_bg_6, .level_bg_ptr
++	lda	#$00
	sta .level_bg_cnt
	bra	--

.bg_table
	!word .level_bg_1
	!word .level_bg_2
	!word .level_bg_3
	!word .level_bg_4
	
.level_script ; 0 - background, 1 cacti
	!byte 0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,$80
	
;	detection algorithm - dinosaur is 32*32px, we check only char positions and sprites as follows, best matches the dinosaur shape
;	 ##		-> ##
;	 ##		   #
;	##		  #
;	##
.detect_collision
	ldx	#(.DINOSAUR_Y-4*8+.DINOSAUR_HEIGHT)	; 4x8px height cacti char
	lda	#.CHAR_LAST_FG							; test cacti chars
	cmp	.screen+(.DINOSAUR_X/8)+1
	bcs	+
	cmp	.screen+(.DINOSAUR_X/8)+2
	bcs	+
	ldx	#(.DINOSAUR_Y-3*8+.DINOSAUR_HEIGHT)		; 3x8px height cacti char
	cmp	.screen+(.DINOSAUR_X/8)+1+32*1
	bcs	+
	ldx	#(.DINOSAUR_Y-2*8+.DINOSAUR_HEIGHT)		; 2x8px height cacti char
	cmp	.screen+(.DINOSAUR_X/8)+32*2
	bcs	+
	rts
+
	txa
	cmp	.sprite_tab+1*4					; test the y pos of the lower sprites, sufficient for collision
	bcc	+
	beq	+
	cmp	.sprite_tab+3*4					
	bcc	+
	beq	+
	rts
+	lda	#.DINOSAUR_DEAD
	sta .dinosaur_state
	jmp	.game_over
	rts
	
.game_over
	lda	#.STATUS_GAME_OVER
	sta .game_status
	
	+SetVector .text_game_over, .adrl
	lda	#<(.A_GX_SCR + (.Y_OFS_GAME_OVER*32))
	ldy	#.WRITE_ADDRESS + >(.A_GX_SCR+(.Y_OFS_GAME_OVER*32))
	jsr .vdp_print
	rts
	
.vdp_print
	jsr	vdp_sreg
	ldy	#$00
-	lda	(.adrl), y
	beq	+
	sta	a_vram
	iny
	bne	-
+	rts

	
.animate_dinosaur
	lda	.dinosaur_state
	bit	#.DINOSAUR_JUMP
	beq	++
	+SetVector	.dino_jump, .adrl
	jsr	.set_sprite_pointer
	ldy .sin_tab_offs
	lda	#.DINOSAUR_Y
	clc
	sbc	(.sin_tab_ptr), y
	sta	.sprite_tab
	sta	.sprite_tab+2*4
	clc
	adc #16				;+16px y offset for the lower sprites
	sta	.sprite_tab+1*4
	sta	.sprite_tab+3*4
	iny
	cmp	#(.DINOSAUR_Y+16) ;detect end of sin tab, accu must be dino y+16
	bne	+
	lda	#.DINOSAUR_RUN
	sta .dinosaur_state
	ldy	#$00
+	sty .sin_tab_offs
-	rts
++	bit #.DINOSAUR_DEAD
	beq	+
	+SetVector	.dino_dead, .adrl
	bra	.set_sprite_pointer
+	lda	.frame_cnt
	bit	#03
	bne	-
	lda	.dinosaur_state
	and	#.DINOSAUR_DUCK
	beq	++
	lda	.frame_cnt
	and	#04
	beq	+
	+SetVector	.dino_duck_1, .adrl
	bra .set_sprite_pointer
+	+SetVector	.dino_duck_2, .adrl
	bra .set_sprite_pointer
++	lda	.frame_cnt
	and	#04
	beq	+
	+SetVector	.dino_run_1, .adrl
	bra .set_sprite_pointer
+	+SetVector	.dino_run_2, .adrl
	bra .set_sprite_pointer

.set_sprite_pointer	
	ldy	#$00
	lda	(.adrl),y
	sta	.sprite_tab+2
	iny
	lda	(.adrl),y
	sta	.sprite_tab+2+1*4
	iny
	lda	(.adrl),y
	sta	.sprite_tab+2+2*4
	iny
	lda	(.adrl),y
	sta	.sprite_tab+2+3*4
	rts
	
.animate_enemy
	dec	.sprite_tab_enemy+1
	dec	.sprite_tab_enemy+1
	dec	.sprite_tab_enemy+1+1*4
	dec	.sprite_tab_enemy+1+1*4
	dec	.sprite_tab_enemy+1+2*4
	dec	.sprite_tab_enemy+1+2*4
	dec	.sprite_tab_enemy+1+3*4
	dec	.sprite_tab_enemy+1+3*4
	lda	.score_board_cnt	;every 5 frames update score, which means 10 digits per second
	beq	+
	rts
+	lda	.frame_cnt
	and	#$04
	beq	+
	lda	#56
	sta	.sprite_tab_enemy+2
	lda	#60
	sta	.sprite_tab_enemy+2+1*4
	lda	#64
	sta	.sprite_tab_enemy+2+2*4
	lda	#68
	sta	.sprite_tab_enemy+2+3*4
	rts
+	lda	#72
	sta	.sprite_tab_enemy+2
	lda	#76
	sta	.sprite_tab_enemy+2+1*4
	lda	#80
	sta	.sprite_tab_enemy+2+2*4
	lda	#84
	sta	.sprite_tab_enemy+2+3*4
	rts
	
.animate_sky
	ldx	#$00
-	dec	.sprite_tab_sky+1,x
	bne	++
	lda	.sprite_tab_sky+3,x
	tay
	and	#Sprite_EC
	bne	+
	tya	
	ora	#Sprite_EC
	sta	.sprite_tab_sky+3,x
	lda	#32
	sta .sprite_tab_sky+1,x
	bra	++
+	tya
	and	#<(!Sprite_EC)
	sta	.sprite_tab_sky+3,x
	lda	#$ff
	sta .sprite_tab_sky+1,x
++	inx
	inx
	inx
	inx
	cpx	#32
	bne	-
	rts
	
.game_isr
	bit	a_vreg
	bpl	.game_isr_exit

	+save
	
	; lda	#Dark_Yellow
	; jsr	vdp_bgcolor
	
	lda	.game_status
	and	#.STATUS_PLAY
	beq	+
		
	jsr	.scroll_background
	jsr	.animate_enemy
	jsr	.animate_sky
	jsr	.score_board
	jsr	.action_handler
	jsr	.detect_collision
	jsr	.animate_dinosaur
	bra	++
	
+	lda	#PORT_SEL_2		;port 1
	sta	via1porta
	lda	via1porta
	and #JOY_FIRE
	bne	++
	jsr .new_game	
++	
	jsr	.update_vram
	inc	.frame_cnt

	lda	#Black
	jsr	vdp_bgcolor
	
	+restore
.game_isr_exit	
	rti

.new_game
	jsr	.init_screen
	
	ldx	#$00
-	lda	.sprite_init_tab, x
	sta .sprite_tab,x
	inx	
	cpx	#4*4
	bne	-

	lda	#.CHAR_BLANK
	sta .adrl
	lda	#<(.A_GX_SCR + (.Y_OFS_GAME_OVER*32))
	ldy	#.WRITE_ADDRESS + >(.A_GX_SCR+(.Y_OFS_GAME_OVER*32))
	ldx #32
	jsr vdp_fills
	
	stz	.dinosaur_state	; run initialy
	stz .score_board_cnt
	stz	.sin_tab_offs
	stz	.level_script_ptr
	stz .frame_cnt
	stz .level_bg_cnt
	+SetVector .level_bg_3, .level_bg_ptr

	;set new highscore
	lda	.score_value
	cmp	.score_value_high
	bcc	++
	bne	+
	lda	.score_value+1
	cmp	.score_value_high+1
	bcc	++
	bne	+
	lda	.score_value+2
	cmp	.score_value_high+2
	bcc	++
	beq	++
+	lda	.score_value+2
	sta	.score_value_high+2
	lda	.score_value+1
	sta	.score_value_high+1
	lda	.score_value
	sta	.score_value_high
++	stz	.score_value
	stz	.score_value+1
	stz	.score_value+2
	
+	lda	#.STATUS_PLAY
	sta .game_status	
	rts
	
.score_board
	lda	.score_board_cnt	;every 5 frames update score, which means 10 digits per second
	inc
	cmp #$05
	beq	+
	sta	.score_board_cnt
	rts
+	stz	.score_board_cnt

	sed						;add in decimal mode
	lda .score_value+2
	clc
	adc	#$01
	sta .score_value+2
	bcc	+
	adc	.score_value+1
	sta	.score_value+1
	bcc	+
	adc	.score_value
	sta	.score_value	
+	cld
	rts
	
	
.action_handler
	lda	#PORT_SEL_2		;port 2
	sta	via1porta
	lda	via1porta
	and #JOY_UP
	bne	+
 	lda	.dinosaur_state
	and #.DINOSAUR_JUMP	;only allow jump, if dinosaur is not already jumping
	bne	++
	lda	#.DINOSAUR_JUMP
	sta .dinosaur_state
	+SetVector .sin_tab, .sin_tab_ptr	;long jump
	rts
+	lda	.sin_tab_offs	;no joy/key pressed after 5 frames, switch to short jump
	cmp	#6
	bne	+
	+SetVector .sin_tab_short, .sin_tab_ptr
+	lda	.dinosaur_state
	and #.DINOSAUR_JUMP	;only allow jump, if dinosaur is not already jumping
	bne	++
	lda via1porta
	and #JOY_DOWN
	bne	+
	lda	#.DINOSAUR_DUCK
	sta .dinosaur_state
	rts
+	lda	#.DINOSAUR_RUN
	sta .dinosaur_state		
++	rts
		
.init_vram
	ldx	#$03
	lda	#.CHAR_BLANK					;fill vram screen with blank
	sta	.adrl
	lda	#<.A_GX_SCR
	ldy	#.WRITE_ADDRESS + >.A_GX_SCR
	jsr	vdp_fill

	+SetVector charset, .adrl			; init 2 game charset with character set
	lda #<.A_GX_PAT_1
	ldy #.WRITE_ADDRESS + >.A_GX_PAT_1
	ldx	#$08
	jsr	vdp_memcpy
	+SetVector charset, .adrl			; 
	lda #<.A_GX_PAT_2
	ldy #.WRITE_ADDRESS + >.A_GX_PAT_2
	ldx	#$08
	jsr	vdp_memcpy
	
	+SetVector .game_chars, .adrl		; first game charset
	lda #<(.A_GX_PAT_1+.GAME_CHAR_OFFS)
	ldy #.WRITE_ADDRESS + >(.A_GX_PAT_1+.GAME_CHAR_OFFS)
	ldx	#$03
	jsr	vdp_memcpy
	
	+SetVector .game_chars_4px, .adrl	; 2nd game charset with 4px offset
	lda #<(.A_GX_PAT_2+.GAME_CHAR_OFFS)
	ldy #.WRITE_ADDRESS + >(.A_GX_PAT_2+.GAME_CHAR_OFFS)
	ldx	#$03
	jsr	vdp_memcpy
	
	+SetVector .sprites, .adrl
	lda	#<.A_SP_PAT
	ldy	#.WRITE_ADDRESS + >.A_SP_PAT
	ldx	#$03			; 3 pages, 768 sprite bytes
	jsr	vdp_memcpy

	+SetVector .text_game_label, .adrl
	lda	#<(.A_GX_SCR + (22*32))
	ldy	#.WRITE_ADDRESS + >(.A_GX_SCR+(22*32))
	jsr .vdp_print
	rts
	
.update_vram
	;update sprite tab
	+SetVector .sprite_tab, .adrl		
	lda	#<.A_SP_ATR
	ldy	#.WRITE_ADDRESS + >.A_SP_ATR
	ldx	#16*4
	jsr	vdp_memcpys
	
	;score_board
	lda	#<(.A_GX_SCR + (1*32))+17
	ldy	#.WRITE_ADDRESS + >(.A_GX_SCR+(1*32)+17)
	jsr	vdp_sreg
	ldx	#$00
-	lda	.text_score_board,x
	beq	+
	sta	a_vram
	inx
	bne	-
+	lda	.score_value_high
	jsr .digit_out
	lda	.score_value_high+1
	jsr .digits_out
	lda	.score_value_high+2
	jsr .digits_out
	lda	#' '
	sta a_vram
	lda	.score_value
	jsr .digit_out
	lda	.score_value+1
	jsr .digits_out
	lda	.score_value+2
	jsr .digits_out
	
	+SetVector .screen, .adrl			;copy screen
	lda	#<(.A_GX_SCR + (16*32))
	ldy	#.WRITE_ADDRESS + >(.A_GX_SCR+(16*32))
	ldx	#32*4
	jmp	vdp_memcpys
	
	rts

.digits_out
	pha
	lsr
	lsr
	lsr
	lsr
	ora	#'0'
	sta a_vram
	pla
.digit_out
	and #$0f
	ora	#'0'
	sta a_vram
	rts
	
.rnd:
   lda .seed
   beq .doEor
   asl
   beq .noEor ;if the input was $80, skip the EOR
   bcc .noEor
.doEor:    
	eor #$1d
.noEor:  
	sta .seed
	rts

.sprite_init_tab
	!byte	.DINOSAUR_Y		,.DINOSAUR_X+16	,0	,.dinosaur_color
	!byte	.DINOSAUR_Y+16	,.DINOSAUR_X+16	,4	,.dinosaur_color
	!byte	.DINOSAUR_Y		,.DINOSAUR_X	,8	,.dinosaur_color
	!byte	.DINOSAUR_Y+16	,.DINOSAUR_X	,28	,.dinosaur_color 	
.sprite_tab
	!byte	.DINOSAUR_Y		,.DINOSAUR_X+16	,0	,.dinosaur_color
	!byte	.DINOSAUR_Y+16	,.DINOSAUR_X+16	,4	,.dinosaur_color
	!byte	.DINOSAUR_Y		,.DINOSAUR_X	,8	,.dinosaur_color
	!byte	.DINOSAUR_Y+16	,.DINOSAUR_X	,28	,.dinosaur_color
.sprite_tab_enemy
	!byte	.PD_Y		,100,	56, Dark_Red
	!byte	.PD_Y+16	,100,	60, Dark_Red
	!byte	.PD_Y		,100+16,64, Dark_Red
	!byte	.PD_Y+16	,100+16,68, Dark_Red
.sprite_tab_sky
	!byte	40,100,48, White
	!byte	40,116,52, White
	!byte	56,30,48, White
	!byte	56,46,52, White
	!byte	72,70,48, White
	!byte	72,86,52, White
	!byte	98,200,48, White
	!byte	98,216,52, White
	!byte	$d0 ; end of sprites

.dino_run_1
	!byte 0,4,8,12
.dino_run_2
	!byte 0,4,16,20
.dino_duck_1
	!byte 88,36,88,40
.dino_duck_2
	!byte 88,36,88,44
.dino_jump
	!byte 0,4,8,28
.dino_dead
	!byte 32,4,8,28

	
.text_game_label	!text " Verbindung zum Internet konnte  nicht hergestellt werden.",$0
.text_game_over		!text "           GAME OVER!",$0
.text_score_board	!text "HI ",$0
.score_value		!byte 0,0,0
.score_value_high 	!byte 0,0,0

.level_bg_1; cactus
    !byte 3
	!byte 128, 129, 130, 131
	!byte 132, 133, 134, 135
	!byte 136, 137, 138, 139
.level_bg_2 ;3 cacti
	!byte 5
	!byte 210, 140, 141, 142
	!byte 210, 143, 144, 145
	!byte 210, 146, 147, 148
	!byte 210, 149, 150, 151
	!byte 210, 152, 153, 154
.level_bg_3 ;4 cacti
	!byte 7
	!byte 128, 129, 130, 131
	!byte 155, 156, 157, 158
	!byte 159, 160, 161, 162
	!byte 163, 164, 165, 166
	!byte 167, 168, 169, 170
	!byte 171, 172, 173, 174
	!byte 175, 176, 177, 178
.level_bg_4 ;2 cacti
	!byte 5
	!byte 179, 180, 181, 182
	!byte 183, 184, 185, 186
	!byte 187, 188, 189, 190
	!byte 191, 192, 193, 194
	!byte 195, 196, 197, 198
.level_bg_5 ;hills
	!byte 5
	!byte 210, 210, 199, 200
	!byte 210, 210, 201, 202
	!byte 210, 210, 210, 203
	!byte 210, 210, 210, 204
	!byte 210, 210, 210, 205
.level_bg_6 ;desert
	!byte 4
	!byte 210, 210, 210, 206
	!byte 210, 210, 210, 207
	!byte 210, 210, 210, 208
	!byte 210, 210, 210, 209

.sin_tab
	; !src "sintab.a"
PI = 3.14159265358979323846
!for .i, 1, 35 {
	!byte sin(float(.i) * 5 * PI/180)*56 + 0.5
}
!byte	$ff

foo
.sin_tab_short
	; !src "sintab.short.a"
!for .i, 0, 23 {
	!byte sin(float(.i) * 5 * 1.5 * PI/180)*48 + 0.5
}
!byte	$ff

.sprites
+SpriteLine16start
!src "dinosaur.sprites.res"
!src "dinosaur.sprites.pterodactyl.res"
; the empty sprite
!fill 32,0

.game_chars
!src "dinosaur.chars.1.res"
!src "dinosaur.chars.2.res"
!src "dinosaur.chars.3.res"
!src "dinosaur.chars.4.res"
!src "dinosaur.chars.5.res"
!src "dinosaur.chars.6.res"
.game_chars_4px
!src "dinosaur.chars.1.4px.res"
!src "dinosaur.chars.2.4px.res"
!src "dinosaur.chars.3.4px.res"
!src "dinosaur.chars.4.4px.res"
!src "dinosaur.chars.5.4px.res"
!src "dinosaur.chars.6.4px.res"