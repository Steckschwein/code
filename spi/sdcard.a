!macro SDCommand .cmd, .numres {
	ldx #$00
-	lda .cmd,x
	
	
	jsr spibyte
	

	inx
	cpx #$06
	bne -

	lda #$ff
	jsr spibyte

	ldx #$00
-	lda #$ff
	
	jsr spibyte

	sta sdcmdres,x
	inx
	cpx #.numres
	bne -

}


!macro PrintSDRes .numres { 
	lda #'['
	jsr lcdprint
	ldx #$00
-	lda sdcmdres, x
	jsr lcdhex
	inx
	cpx #.numres
	bne -

	lda #']'
	jsr lcdprint
}


*=$1000
!src "../bios/defs.h.a"
!src "../bios/bios.h.a"
; sdcard pin assignment:
; SD   | Signal 		| VIA Port B
;   1  |    /CS 		|          1
;   2  | CMD/DI (mosi)|          6
;   5  |    CLK |	   0
;   7  | DAT/DO |          7

; outb 	= $f0
; inb		= $f1
sdcmdres	= $e0


	jsr lcdclear
	sei

	stz via1porta
	stz tmp0

	; SR shift in, External clock on CB1
	lda #%00001100
	sta via1acr

	lda #%10111111
	sta via1ddrb
	lda #%10111110
	sta via1portb



!for i,0,9 { 
	lda #$ff
	jsr spibyte
}

	; set CS line to LOW
	lda #%11111101
	and via1portb	
	sta via1portb
	


	; send CMD0 - init SD card to SPI mode
	+SDCommand cmd0, $01

	lda sdcmdres
	cmp #$01
	beq +
	
	+PrintString nocard	
-	jmp -


+	+PrintString cardok	


	lda #' '
	jsr lcdprint

	+SDCommand cmd58, $01

!for i,0,2 {	
	+SDCommand cmd55, $01
	+PrintSDRes $01
	+SDCommand acmd41, $01
	+PrintSDRes $01
}

	lda #'B'
	jsr lcdprint

	+SDCommand cmd16, $01
	+PrintSDRes $01

	; lda #' '
	; jsr lcdprint

	
-	jmp -

; Transmit byte VIA SPI
; Byte to transmit in A, received byte in A at exit

spibyte
	phx
	phy

	tay		; zu transferierendes byte im akku nach y retten

	ldx #$08
	
	lda via1portb	; Port laden
	rol		; Nach links rotieren, damit das bit nachher an der richtigen stelle steht
	sta tmp0		; bunkern

-	tya		; zu transferierendes byte in den akku
	clc
	rol		; nach links, bit 7 ins carry
	tay		; Akku nach Y retten fuer naechsten durchlauf

	lda tmp0		; rotierten portinhalt zurueckholen
	
	ror 	; nach rechts, carry nach bit7
	
	sta via1portb	; ab in den port
	
	inc via1portb	; takt an
	nop
	dec via1portb	; takt aus 

	dex
	bne -		; schon acht mal?
	
	lda via1sr

	ply
	plx
	rts
	
; ; Transmit byte VIA SPI
; ; Byte to transmit in A, received byte in A at exit
; spibyte	
; 	phx
; 	phy
; 	ldx #$08
; 	clc
; --
; 	asl

; 	tay
; 	bcs one

; 	bit 
; zero	
; 	lda #%01111111
; 	and via1portb
; 	sta via1portb
; 	bra clk

; one	lda #%10000000
; 	ora via1portb	
; 	sta via1portb
	
; clk
; 	inc via1portb
; 	tya
; 	dec via1portb

; 	dex
; 	bne --
; 	lda via1sr
; 	ply
; 	plx
; 	rts

; cmd0 reset card to IDLE state
cmd0	!byte %01000000, %00000000, %00000000, %00000000, %00000000, %10010101
; cmd8 Sends SD Memory Card interface condition (old)
cmd8 	!byte %01001000, %00000000, %00000000, %00000001, %10101010, %00001111
; cmd58 Sends SD Memory Card interface condition
cmd58	!byte %01111010, %00000000, %00000000, %00000000, %00000000, %01110101
; cmd55
cmd55	!byte $77, $00, $00, $00, $00, $01
; acmd41
acmd41  !byte $69, $00, $00, $00, $00, $01
; cmd16 SET_BLOCKLEN
cmd16	!byte $50, $00, $00, $02, $00, $01


cardok	!text "Card OK!", $00
nocard	!text "No Card!", $00
