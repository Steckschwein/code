; sdcard pin assignment:
; SD   | Signal 		| VIA Port
;   1  |    /CS 		|          PB1
;   2  | CMD/DI (mosi)		|          CB2
;   5  |    CLK 		|	   PB0/CB1
;   7  | DAT/DO 		|          PB7

*=$1000
!src "../bios/defs.h.a"
!src "../bios/bios.h.a"

sd_init_num_tries = $ff
sd_blktarget = $2000

!macro SDCommand .cmd, .numres {
	ldx #$00
-	lda .cmd,x
	
	jsr spi_rw_byte
	
	inx
	cpx #$06
	bne -

	jsr spi_r_byte		; byte lesen

	ldx #$00
-		
	jsr spi_r_byte		; byte lesen

+	sta sdcmdres,x		; 
 	inx
 	cpx #.numres
 	bne -
}


!macro PrintSDRes .numres { 
	pha
	phx

	lda #'['
	jsr lcdprint
	ldx #$00
-	lda sdcmdres, x
	jsr lcdhex
	inx
	cpx #.numres
	bne -

	lda #']'
	jsr lcdprint

	pla
	plx
}




; outb 	= $f0
; inb		= $f1
;sdcmdres	= $e0

	jsr lcdclear
	sei

	; SR shift in, External clock on CB1
	; lda #%00001100
	; sta via1acr

	; lda #$ff
	; sta via1ddrb

	; lda #%01111110
	; sta via1portb
	jsr init_sdcard
	jsr sd_read_block

	ldx #$00
- 	lda sd_blktarget,x
	jsr lcdprint
	inx
	cpx #32
	bne -


	; set CS line to HI
	lda #%01111110
	ora via1portb	
	sta via1portb

	jmp upload


; Read block from SD Card
sd_read_block
	+SDCommand cmd17, $01
	; +PrintSDRes $01

	; Wait for data block to become ready
-	jsr spi_r_byte
	cmp #$fe
	bne -

	ldx #$00
-
	jsr spi_r_byte
	sta sd_blktarget,x
	inx
	bne -

	ldx #$00
-
	jsr spi_r_byte
	sta sd_blktarget+$100,x
	inx
	bne -

	; Read CRC bytes	
	jsr spi_r_byte
	jsr spi_r_byte

	rts



init_sdcard
	; set ALL CS lines to HIGH
	lda #%01111110
	ora via1portb	
	sta via1portb

	; 80 Taktzyklen
	ldx #80

	lda #%11111110
	sta via1portb
	
	tay
	iny

-	sty via1portb
	sta via1portb
	dex
	bne -

	; set CS line to LOW
	lda #%11111101
	and via1portb	
	sta via1portb
	
init
	; send CMD0 - init SD card to SPI mode
	+SDCommand cmd0, $01
	; +PrintSDRes $01
	lda sdcmdres
	cmp #$01
	beq +
	
	+PrintString nocard	
	rts

+	+PrintString cardok	

	+SDCommand cmd8, $05
;	+PrintSDRes $05

	ldx #$04
	lda sdcmdres,x
	cmp #$aa
	bne sdver1

	ldx #$03
	lda sdcmdres,x
	cmp #$01
	bne sdver1

	; SD Cart Version 2.0
sdver2
	; lda #'2'
	; jsr lcdprint
	lda #$40
	sta acmd41+1

	; SD Cart Version 1.0
sdver1
	; lda #'1'
	; jsr lcdprint

	ldx #$00

	; Try to initialize card. Retry $ff times.
initloop	
	phx
	+SDCommand cmd55, $01
	+SDCommand acmd41, $01
	plx

	lda sdcmdres
	cmp #$00
	beq sdinitok
	inx
	cpx #sd_init_num_tries
	bne initloop

	; MMC Card
	; Try to initialize card with cmd1. Retry $ff times.
	ldx #$00
	; lda #'M'
	; jsr lcdprint


initloop2
	phx
	+SDCommand cmd1, $01
	plx

	lda sdcmdres
	cmp #$00
	beq setblksize
	inx
	cpx #sd_init_num_tries
	bne initloop2


	+PrintString initfail
	rts

sdinitok
	+SDCommand cmd58, $05
	
	; TODO
	; CCS bit set? Yes, go to initdone
	bit sdcmdres+1
	bvs initdone

setblksize
	+SDCommand cmd16, $01

initdone
	+PrintString initdonetxt
	rts


; cmd0 reset card to IDLE state
cmd0	!byte %01000000, %00000000, %00000000, %00000000, %00000000, %10010101
cmd1	!byte %01000001, %00000000, %00000000, %00000000, %00000000, %00000001
								      
; cmd8 Sends SD Memory Card interface condition (SD 2.0)
cmd8 	!byte %01001000, %00000000, %00000000, %00000001, %10101010, $87
;cmd8 	!byte %01001000, %00000000, %00000000, %00000001, %10101010, %10010101
; cmd58 Sends SD Memory Card interface condition
cmd58	!byte %01111010, %00000000, %00000000, %00000000, %00000000, %01110101
; cmd55
cmd55	!byte $77, $00, $00, $00, $00, $01
; acmd41
acmd41  !byte $69, $00, $00, $00, $00, $01
; cmd16 SET_BLOCKLEN
cmd16	!byte $50, $00, $00, $02, $00, $01
cmd17	!byte $51, $00, $00, $00, $00, $01
cmd24	!byte $58, $00, $00, $00, $00, $01

cardok	!text "SD Card Found!", $00
nocard	!text "No SD Card!", $00
initdonetxt	!text "Init OK!", $00
initfail	!text "Init Failed!", $00
