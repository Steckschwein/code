!macro SDCommand .cmd {
	ldx #$00
-	lda .cmd,x
	
	jsr spibyte
	
	inx
	cpx #$06
	bne -

	lda #$ff
	jsr spibyte

	ldx #$00
-	lda #$ff
	jsr spibyte
	sta sdcmdres,x
	inx
	cpx #$05
	bne -

}


!macro PrintSDRes { 
	lda #'['
	jsr lcdprint
	ldx #$00
-	lda sdcmdres, x
	jsr lcdhex
	inx
	cpx #$05
	bne -

	lda #']'
	jsr lcdprint
}


*=$1000
!src "../bios/defs.h.a"
!src "../bios/bios.h.a"
; sdcard pin assignment:
; SD   | Signal 		| VIA Port B
;   1  |    /CS 		|          1
;   2  | CMD/DI (mosi)|          6
;   5  |    CLK |	   0
;   7  | DAT/DO |          7

; outb 	= $f0
; inb		= $f1
sdcmdres	= $e0

	jsr lcdclear

	sei

	stz via1porta

	lda #%01111111
	sta via1ddrb
	lda #%01111110
	sta via1portb

!for i,0,9 { 
	lda #$ff
	jsr spibyte
}

	; set CS line to LOW
	lda #%11111101
	and via1portb	
	sta via1portb
	


	; send CMD0 - init SD card to SPI mode
	+SDCommand cmd0

	lda sdcmdres
	cmp #$01
	beq +
	
	err	+PrintString nocard	
-	jmp -


+	+PrintString cardok	


	lda #' '
	jsr lcdprint

;	+SDCommand cmd8
	

	+SDCommand cmd58

!for i,0,9 {	
	+SDCommand cmd55
	+PrintSDRes
	+SDCommand acmd41
	+PrintSDRes
}

	; lda #'B'
	; jsr lcdprint

	; +SDCommand cmd16
	; +PrintSDRes

	; lda #' '
	; jsr lcdprint

	
-	jmp -


; Transmit byte VIA SPI
; Byte to transmit in A, received byte in A at exit
spibyte	
	phx
	phy
	ldx #$08
	clc
--
	asl

	tay
	bcs one

zero	
	lda #%10111111
	and via1portb
	sta via1portb
	bra clk

one	lda #%01000000
	ora via1portb	
	sta via1portb
	
clk
	inc via1portb
	tya
	dec via1portb

	dex
	bne --
	lda via1porta
	ply
	plx
	rts


; spibyte:
; 	phx
; 	phy
; 	sta outb
; 	ldy #0
; 	sty inb
; 	ldx #8
; spibytelp:
; 	tya		; (2) set A to 0
; 	asl outb	; (5) shift MSB in to carry
; 	bcc spibyte1	; (2)
; 	ora #%01000000	; (2) set MOSI if MSB set
; spibyte1:
; 	sta via1portb	; (4) output (MOSI, SCS low, SCLK low)
; 	tya		; (2) set A to 0 (Do it here for delay reasons)
; 	inc via1portb	; (6) toggle clock high (SCLK is bit 0)
; 	clc		; (2) clear C (Not affected by bit)
; 	bit via1portb	; (4) copy MISO (bit 7) in to N (and MOSI in to V)
; 	bpl spibyte2	; (2)
; 	sec		; (2) set C is MISO bit is set (i.e. N)
; spibyte2:
; 	rol inb		; (5) copy C (i.e. MISO bit) in to bit 0 of result
; 	dec via1portb	; (6) toggle clock low (SCLK is bit 0)
; 	dex		; (2) next bit
; 	bne spibytelp	; (2) loop
; 	lda inb		; get result
; 	plx
; 	ply
; 	rts


; cmd0 reset card to IDLE state
cmd0	!byte %01000000, %00000000, %00000000, %00000000, %00000000, %10010101
; cmd8 Sends SD Memory Card interface condition (old)
cmd8 	!byte %01001000, %00000000, %00000000, %00000001, %10101010, %00001111
; cmd58 Sends SD Memory Card interface condition
cmd58	!byte %01111010, %00000000, %00000000, %00000000, %00000000, %01110101
; cmd55
cmd55	!byte $77, $00, $00, $00, $00, $01
; acmd41
acmd41  !byte $69, $00, $00, $00, $00, $01
; cmd16 SET_BLOCKLEN
cmd16	!byte $50, $00, $00, $02, $00, $01


cardok	!text "Card OK!", $00
nocard	!text "No Card!", $00