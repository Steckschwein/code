; sdcard pin assignment:
; SD   | Signal 		| VIA Port
;   1  |    /CS 		|          PB1
;   2  | CMD/DI (mosi)		|          CB2
;   5  |    CLK 		|	   PB0/CB1
;   7  | DAT/DO 		|          PB7

*=$2000
!src "../bios/defs.h.a"
!src "../bios/bios.h.a"
!src "fat32.h.a"

sd_init_num_tries = $ff
sd_blktarget = $0400
sd_cmd_param = $0300
sd_cmd_chksum	= sd_cmd_param+4
sd_cmd_result = $031f
sdcmdres = sd_cmd_result
sd_cmd_errno = $0320

cmd0 	= $40       ; GO_IDLE_STATE
cmd1 	= $40 + 1 	; SEND_OP_COND
cmd8 	= $40 + 8   ; SEND_IF_COND
cmd16	= $40 + 16 	; SET_BLOCKLEN
cmd17	= $40 + 17	; READ_SINGLE_BLOCK
cmd24	= $40 + 24	; WRITE_BLOCK
cmd55	= $40 + 55	; APP_CMD
cmd58	= $40 + 58	; READ_OCR
acmd41	= $69


main
	jsr lcdclear
	sei


	jsr init_sdcard

	jsr sd_param_init

	lda #$00
	sta sd_blkptr
	lda #$04
	sta sd_blkptr+1

	jsr sd_read_block

	; write start sector from partition entry to cmd param buffer (in reverse order)
	lda sd_blktarget+BS_Partition0+PE_LBABegin+3
	sta sd_cmd_param

	lda sd_blktarget+BS_Partition0+PE_LBABegin+2
	sta sd_cmd_param+1
	
	lda sd_blktarget+BS_Partition0+PE_LBABegin+1
	sta sd_cmd_param+2
	
	lda sd_blktarget+BS_Partition0+PE_LBABegin
	sta sd_cmd_param+4	


	lda #$00
	sta sd_blkptr
	lda #$04
	sta sd_blkptr+1
	
	jsr sd_read_block

	ldx #$00
-	lda sd_blktarget + BS_VolLab2,x
	jsr lcdprint
	inx
	cpx #11
	bne -


	; lda #'#'
	; sta sd_blktarget + BS_VolLab2

	; jsr sd_write_block


	; jsr sd_deselect_card

	jmp upload




init_sdcard

	; 80 Taktzyklen
	ldx #74

	; set ALL CS lines and DO to HIGH 
	lda #%11111110
	sta via1portb

	tay
	iny

-	sty via1portb
	sta via1portb
	dex
	bne -

	jsr sd_select_card
	
init
	jsr sd_param_init

	; CMD0 needs CRC7 checksum to be correct
	lda #$95
	sta sd_cmd_chksum

	; send CMD0 - init SD card to SPI mode
	lda #cmd0
	jsr sd_cmd

	; get result
	lda #$ff
	jsr spi_rw_byte

	cmp #$01
	beq +
	
	+PrintString nocard	
	lda #$01
	sta sd_cmd_errno
	rts

+	+PrintString cardok	

	; stz sd_cmd_param
	; stz sd_cmd_param+1
	lda #$01
	sta sd_cmd_param+2
	lda #$aa
	sta sd_cmd_param+3
	lda #$87
	sta sd_cmd_chksum

	jsr sd_busy_wait

	lda #cmd8
	jsr sd_cmd

	ldx #$00
-	
	lda #$ff
	phx
	jsr spi_rw_byte
	plx
	sta sd_cmd_result,x
	inx
	cpx #$05
	bne -

	lda sd_cmd_result
	cmp #$01
	beq +
	jsr lcdhex
	+PrintString invalidcard
	jsr sd_deselect_card	
-	jmp -
	rts
+

-
	
	jsr sd_busy_wait

	jsr sd_param_init

	lda #cmd55
	jsr sd_cmd

	jsr spi_r_byte
	cmp #$01
	bne sd_error

	lda #$40
	sta sd_cmd_param

	lda #$10
	sta sd_cmd_param+1

	lda #acmd41
	jsr sd_cmd

	lda #$ff
	jsr spi_r_byte

	cmp #$00
	bne -

	stz sd_cmd_param

	lda #cmd58
	jsr sd_cmd

	ldx #$00
-	
	lda #$ff
	phx
	jsr spi_rw_byte
	plx
	sta sd_cmd_result,x
	inx
	cpx #$05
	bne -

	bit sd_cmd_result+1
	bvs +

; cmd16	!byte $50, $00, $00, $02, $00, $01
	; Set block size to 512 bytes
	lda #$02
	sta sd_cmd_param+2

	lda #cmd16
	jsr sd_cmd

	jsr spi_r_byte
	jsr lcdhex

+	
	+PrintString initdonetxt
;	jsr sd_deselect_card	
	rts

sd_error
	+PrintString initfail
	jsr sd_deselect_card	
	rts



;---------------------------------------------------------------------
; Send SD Card Command
; cmd byte in A
; parameters in sd_cmd_param
;---------------------------------------------------------------------
sd_cmd

	; transfer command byte
	jsr spi_rw_byte
	
	; transfer parameter buffer
	ldx #$00
-	lda sd_cmd_param,x
	phx
	jsr spi_rw_byte
	plx
	inx
	cpx #$05
	bne -

	; send 8 clocks with DI 1
	lda #$ff
	jsr spi_rw_byte		

	rts
	
;---------------------------------------------------------------------
; Read block from SD Card
;---------------------------------------------------------------------
sd_read_block
	;jsr sd_select_card

	jsr sd_busy_wait

	lda #cmd17
	jsr sd_cmd

	lda #$ff
	jsr spi_rw_byte		


-	lda #$ff
	jsr spi_rw_byte		
	cmp #$fe
	bne -


	ldy #$00
-	
	phy
	jsr spi_r_byte
	ply

	sta (sd_blkptr),y
	iny
	bne -

	inc sd_blkptr+1

	ldy #$00
-	
	phy
	jsr spi_r_byte
	ply

	sta (sd_blkptr),y
	iny
	bne -

	dec sd_blkptr+1

	; Read CRC bytes	
	jsr spi_r_byte
	jmp spi_r_byte

;	jsr sd_deselect_card

;	rts

;---------------------------------------------------------------------
; Write block to SD Card
;---------------------------------------------------------------------
sd_write_block
;	jsr sd_select_card

	jsr sd_busy_wait

	lda #cmd24
	jsr sd_cmd
	
-	lda #$ff
	jsr spi_rw_byte		
	bne -

	lda #$fe
	jsr spi_rw_byte

	ldy #$00
-	lda (sd_blkptr),y
	phy
	jsr spi_rw_byte
	ply
	iny
	bne -

	inc sd_blkptr+1

	ldy #$00
-	lda (sd_blkptr),y
	phy
	jsr spi_rw_byte
	ply
	iny
	bne -
	dec sd_blkptr+1

	; Send fake CRC bytes
	lda #$00
	jsr spi_rw_byte
	lda #$00
	jsr spi_rw_byte

	jmp spi_r_byte		
	;rts	

;---------------------------------------------------------------------
; wait while sd card is busy
;---------------------------------------------------------------------
sd_busy_wait
-	lda #$ff
	jsr spi_rw_byte
	cmp #$ff
	bne -
	rts


;---------------------------------------------------------------------
; select sd card, pull CS line to low
;---------------------------------------------------------------------
sd_select_card
	pha
	; set CS line to LOW
	lda #%11111101
	and via1portb	
	sta via1portb
	pla

	rts

;---------------------------------------------------------------------
; deselect sd card, puSH CS line to HI and generate few clock cycles 
; to allow card to deinit
;---------------------------------------------------------------------
sd_deselect_card
	pha
	; set CS line to HI
	lda #%01111110
	ora via1portb	
	sta via1portb

	lda #$ff
	jsr spi_rw_byte
	
	pla

	rts

;---------------------------------------------------------------------
; clear sd card parameter buffer
;---------------------------------------------------------------------
sd_param_init
	stz sd_cmd_param
	stz sd_cmd_param+1
	stz sd_cmd_param+2
	stz sd_cmd_param+3
	stz sd_cmd_chksum
	inc sd_cmd_chksum
	rts


; outhex    	pha
; 			phy
; 			phx
			
; 			tax
; 			lsr                ;shift high nybble into low nybble
; 			lsr 
; 			lsr 
; 			lsr 
; 			tay
; 			lda hexascii,y      ;convert to ascii
; 			jsr chrout  
			
; 			txa                 ;restore original value
; 			and #$0f            ;select low nybble
; 			tay
; 			lda hexascii,y      ;convert to ascii
; 			jsr chrout  
			
; 			plx
; 			ply
; 			pla
; 			rts
; hexascii	!text "0123456789ABCDEF"

; cmd0 reset card to IDLE state
; cmd0	!byte %01000000, %00000000, %00000000, %00000000, %00000000, %10010101
; cmd1	!byte %01000001, %00000000, %00000000, %00000000, %00000000, %00000001
								      
; ; cmd8 Sends SD Memory Card interface condition (SD 2.0)
; cmd8 	!byte %01001000, %00000000, %00000000, %00000001, %10101010, $87
; ;cmd8 	!byte %01001000, %00000000, %00000000, %00000001, %10101010, %10010101
; ; cmd58 Sends SD Memory Card interface condition
; cmd58	!byte %01111010, %00000000, %00000000, %00000000, %00000000, %01110101
; ; cmd55
; cmd55	!byte $77, $00, $00, $00, $00, $01
; ; acmd41
; acmd41  !byte $69, $00, $00, $00, $00, $01
; ; cmd16 SET_BLOCKLEN
; cmd16	!byte $50, $00, $00, $02, $00, $01
; cmd17	!byte $51, $00, $00, $00, $00, $01
; cmd24	!byte $58, $00, $00, $00, $00, $01

cardok	!text "SD Card Found!", $00
nocard	!text "No SD Card!", $00
invalidcard	!text "Invalid Card!", $00
initdonetxt	!text "Init OK!", $00
initfail	!text "Init Failed!", $00
