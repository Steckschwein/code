# not used yet, we use static addressing, means fixed during compile time (assembly phase)
#
# FEATURES {
#      STARTADDRESS: default = $1000;  # default, must be defined before any segments below
#}

SYMBOLS {
        __APP_START__: type=import;  # __APP_START__ will be imported from source code and is fixed after assembly phase (see appstart.inc) :/
        __STACKSIZE__: type = weak, value = $0800; # c runtime, 2k stack
        __SHELL_START__: type = weak, value=$e000;
        #kernel start address
        kernel_start: type=export, value=$e400;
      	bios_start: type=export, value=$8000;
        # default app size
        __APP_SIZE__: type=weak, value=__SHELL_START__-__APP_START__;
}

MEMORY
{
   ZP: start=$0, size=$100, type=rw, define=yes;
   ZPEXT: start=$0280, size=$80, type=rw, define=no;
   LOADADDR: start=__APP_START__-2, size = $0002;
   RAM: start=__APP_START__, size=__APP_SIZE__, type=rw, define=yes,fill=no,file=%O;
   # SHELL_RAM: start=__SHELL_START__, size=kernel_start-__SHELL_START__, type=rw,file=%O;
   KERNEL_RAM: start=kernel_start, size=$10000-kernel_start, type=rw, define=yes, fill=no, file=%O;
}

SEGMENTS
{
    ZEROPAGE:  load = ZP, type=zp;
    LOADADDR:  load = LOADADDR, type = ro, optional=yes;
    STARTUP:   load = RAM, type = ro, define = yes, optional=yes;
    CODE:      load = RAM, type = rw;
    ONCE:      load = RAM, type = ro, optional = yes;
    RODATA:    load = RAM, type = ro, define = yes, optional=yes;
    INIT:      load = RAM, type = rw, optional = yes;
    # NOTE: align causes simple prg files even without a DATA segment to be +$100 in size
    DATA:      load = RAM, type = rw, define = yes, optional=yes, align = $100;
    BSS:       load = RAM, type = bss, define = yes, optional = yes;

    # kernel segments
    JUMPTABLE: load=KERNEL_RAM, type=rw, start=$ff7a, optional=yes;
    VECTORS:   load=KERNEL_RAM, type=ro, start=$fffa, optional=yes;

}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
