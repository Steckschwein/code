!to "acia.bin", plain
!cpu 65c02

*= $e000			; ROM Start

;----------------------------------------------------------------------------------------------
; zeropage locations 
;----------------------------------------------------------------------------------------------
;byterx		= $fc ; acia received byte
;byterxf		= $fd ; acia received byte flag
buf            = $0200
MSGBASE        = $fe

;----------------------------------------------------------------------------------------------


;----------------------------------------------------------------------------------------------
; LCD 
;----------------------------------------------------------------------------------------------
LCD  		= $d300
LCD0   		= LCD 		; LCD control register
LCD1	     	= LCD0+1 	; LCD data register
;----------------------------------------------------------------------------------------------


;----------------------------------------------------------------------------------------------
; ACIA 
;----------------------------------------------------------------------------------------------
acia 		= $d000
txdata		= acia
rxdata		= acia
aciast		= acia+1 	; ACIA status register
aciacmd		= acia+2 	; ACIA command register
aciactl		= acia+3 	; ACIA control register
;----------------------------------------------------------------------------------------------

	

main	
			lda #'O'
			jsr LCDPRINT
			lda #'K'
			jsr LCDPRINT

               lda #<message
               sta MSGBASE

               lda #>message
               sta MSGBASE+1

               jsr strout

--             jsr showprompt

               ldx #$00
-              jsr rxbyte
               cmp #$0d
               beq +
               jsr txbyte
               sta buf,x
               inx
               lda #$00
               sta buf,x
               bra -

+              lda #<crlf
               sta MSGBASE
               lda #>crlf
               sta MSGBASE+1
               
               jsr strout

               lda #<buf
               sta MSGBASE

               lda #>buf
               sta MSGBASE+1
               jsr strout
               ldx #$00
               txa
               sta buf,x
               jmp --

crlf           !text $0a, $0d, $00
message        !text "hello world", $0a, $0d, $00
showprompt     pha
               lda #<prompt
               sta MSGBASE
               lda #>prompt
               sta MSGBASE+1
               
               jsr strout

               pla
               rts
prompt         !text $0a, $0d, "> ", $00
;----------------------------------------------------------------------------------------------
; RESET Routine. Call subroutines to init all components 
;----------------------------------------------------------------------------------------------
do_reset
               sei
               ; ACIA
               ; set 1 stop bit, 8 bit data, internal clock, 19200bps
               lda #%00011111
               sta aciactl

               ; set no parity, no echo, no tx interrupts, rts low, no rx interrupts, dtr low  
               lda #%00001011
               sta aciacmd

               jsr LINIT
               jsr LCDCLEAR

;               cli 

               jmp main


;----------------------------------------------------------------------------------------------
; IO_NMI Routine. Handle NMI
;----------------------------------------------------------------------------------------------
do_nmi                
               lda #'O'
               jsr txbyte
               lda #'K'
               jsr txbyte

			rti

;----------------------------------------------------------------------------------------------
; IO_IRQ Routine. Handle IRQ
;----------------------------------------------------------------------------------------------
do_irq
               rti

;----------------------------------------------------------------------------------------------
; Delay loop. burn cycles like hell
;----------------------------------------------------------------------------------------------
!zone cyclewaster {
waste_cycles
			phx
			phy
			ldy #$1f
--			ldx #$ff
-			!for i,10{
			nop
			}
			DEX
			bne -
			dey
			bne --
			plx
			ply
			rts
}

;----------------------------------------------------------------------------------------------
; RXBYTE - receive byte from ACIA and store it in A
;----------------------------------------------------------------------------------------------
rxbyte		lda #$08
-		     bit aciast
			beq -
			lda rxdata
			rts

;----------------------------------------------------------------------------------------------
; TXBYTE - send byte in A via ACIA
;----------------------------------------------------------------------------------------------
txbyte	    pha
    		    lda #$10
-             bit aciast ; wait for tdre bit = 1
		    beq -
		    pla
		    sta txdata
		    rts
;----------------------------------------------------------------------------------------------
strout         pha                 ;save a, y to stack
               tya
               pha
               ldy #$00
-              lda (MSGBASE),y
               beq +
               jsr txbyte
               iny
               bne -
+              pla                 ;restore a, y
               tay
               pla
               rts


;----------------------------------------------------------------------------------------------
; *** LCD initialisation
;----------------------------------------------------------------------------------------------
!zone lcd {
LINIT     LDX #$04            ;do function set 4 times
LINIT0    LDA #$38            ;function set: 8 bit, 2 lines, 5x7
          STA LCD0
          JSR LCDBUSY         ;wait for busy flag to clear
          DEX
          BNE LINIT0
          LDA #$06            ;entry mode set: increment, no shift
          STA LCD0
          JSR LCDBUSY
          LDA #$0E            ;display on, cursor on, blink off
          STA LCD0
          JSR LCDBUSY
          LDA #$01            ;clear display
          STA LCD0
          JSR LCDBUSY
          LDA #$80            ;DDRAM address set: $00
          STA LCD0
          JSR LCDBUSY
          RTS

; *** Clear LCD display and return cursor to home
; registers preserved
LCDCLEAR  PHA
          LDA #$01
          STA LCD0
          JSR LCDBUSY
          LDA #$80
          STA LCD0
          JSR LCDBUSY
          PLA
          RTS

; *** Wait for LCD busy bit to clear
; registers preserved
LCDBUSY   PHA
LCDBUSY0  LDA LCD0            ;read from LCD register 0
          AND #$80            ;check bit 7 (busy)
          BNE LCDBUSY0
          PLA
          RTS

; *** Print character on LCD (40 character)
; registers preserved
LCDPRINT  PHA
          STA LCD1            ;output the character
          JSR LCDBUSY
          LDA LCD0            ;get current DDRAM address
          AND #$7F
          ;CMP #$13          ;wrap from pos $13 (line 1 char 20)...
          cmp #$10
          BNE LCDPRINT0
          LDA #$c0            ;...to $40 (line 2 char 1)
          STA LCD0
          JSR LCDBUSY
LCDPRINT0 PLA
          RTS

; *** Print string on LCD
; registers preserved
LCDSTRING PHA                 ;save A, Y to stack
          TYA
          PHA
          LDY #$00
LCDSTR0   LDA (MSGBASE),Y
          BEQ LCDSTR1
          JSR LCDPRINT
          INY
          BNE LCDSTR0
LCDSTR1   PLA                 ;restore A, Y
          TAY
          PLA
          RTS

; *** Print 2 digit hex number on LCD
; A, X registers preserved
LCDHEX    PHA
          LSR                ;shift high nybble into low nybble
          LSR 
          LSR 
          LSR 
          TAY
          LDA HEXASCII,Y      ;convert to ASCII
          JSR LCDPRINT        ;print value on the LCD
          PLA                 ;restore original value
          PHA
          AND #$0F            ;select low nybble
          TAY
          LDA HEXASCII,Y      ;convert to ASCII
          JSR LCDPRINT        ;print value on the LCD
          PLA
          RTS

; *** Lookup table for HEX to ASCII
HEXASCII	!text "0123456789ABCDEF"

}

			

; $FFFA/$FFFB NMI Vector
*= $fffa
!byte <do_nmi
!byte >do_nmi
; $FFFC/$FFFD reset vector
;*= $fffc
!byte <do_reset
!byte >do_reset
; $FFFE/$FFFF IRQ vector
;*= $fffe
!byte <do_irq
!byte >do_irq