!to "rom2.bin", plain
!cpu 65c02

*= $e000		; ROM Start

nopslide = $1000

MSGBASE = $00
ZPDATA 	= $00
LCD 	= $d300
LCD0   	= LCD 		; LCD control register
LCD1	= LCD0+1 	; LCD data register


init
;	jsr LINIT

;	jsr memtest

	jsr makenopslide

endless
;	jsr LCDCLEAR

;	lda #<nopslidemsg
;	sta MSGBASE

;	lda #>nopslidemsg
;	sta MSGBASE+1

;	jsr LCDSTRING

	
	jsr nopslide

;	lda #<nopslidemsgend
;	sta MSGBASE

;	lda #>nopslidemsgend
;	sta MSGBASE+1

;	jsr LCDSTRING

	!for i, 256 {
		nop
	}

	!for i, 256 {
		cmp #$c9
	}

;	jsr LCDCLEAR

	jmp init

makenopslidemsg	!text "Writing NOPs to RAM"
				!byte 0
nopslidemsg	!text "Nopslide! "
			!byte 0
nopslidemsgend	!text "END"
				!byte 0

makenopslide
	pha
	txa
	pha	

;	lda #<makenopslidemsg
;	sta MSGBASE

;	lda #>makenopslidemsg
;	sta MSGBASE+1

;	jsr LCDSTRING


	LDA #$ea        
	LDX #$00 
write       
	STA nopslide,X     
	INX             
	CPX #$ff        
	BNE write    
	LDA #$60        
	STA nopslide + $ff
	pla
	txa
	pla
	rts

memtest
	pha
	lda #<memtestmsg
	sta MSGBASE

	lda #>memtestmsg
	sta MSGBASE+1

	jsr LCDSTRING

	lda #$ff
	jsr check_zeropage

	lda #$00
	jsr check_zeropage

	lda #<msgok
	sta MSGBASE

	lda #>msgok
	sta MSGBASE+1

	jsr LCDSTRING
	pla
	rts

check_zeropage
	phx
	ldx #$00
store
	sta $00,x
	cmp $00,x
	bne stop
	INX
	cpx #$ff
	bne store
	plx
	rts
stop
	lda #<msgfail
	sta MSGBASE

	lda #>msgfail
	sta MSGBASE+1

	jsr LCDSTRING
chkend
	bra chkend




	; *** LCD initialisation
LINIT     LDX #$04            ;do function set 4 times
LINIT0    LDA #$38            ;function set: 8 bit, 2 lines, 5x7
          STA LCD0
          JSR LCDBUSY         ;wait for busy flag to clear
          DEX
          BNE LINIT0
          LDA #$06            ;entry mode set: increment, no shift
          STA LCD0
          JSR LCDBUSY
          LDA #$0E            ;display on, cursor on, blink off
          STA LCD0
          JSR LCDBUSY
          LDA #$01            ;clear display
          STA LCD0
          JSR LCDBUSY
          LDA #$80            ;DDRAM address set: $00
          STA LCD0
          JSR LCDBUSY
          RTS

          ; *** Clear LCD display and return cursor to home
; registers preserved
LCDCLEAR  PHA
          LDA #$01
          STA LCD0
          JSR LCDBUSY
          LDA #$80
          STA LCD0
          JSR LCDBUSY
          PLA
          RTS

; *** Wait for LCD busy bit to clear
; registers preserved
LCDBUSY   PHA
LCDBUSY0  LDA LCD0            ;read from LCD register 0
          AND #$80            ;check bit 7 (busy)
          BNE LCDBUSY0
          PLA
          RTS

; *** Print character on LCD (40 character)
; registers preserved
LCDPRINT  PHA
          STA LCD1            ;output the character
          JSR LCDBUSY
          LDA LCD0            ;get current DDRAM address
          AND #$7F
          CMP #$13          ;wrap from pos $13 (line 1 char 20)...
          BNE LCDPRINT0
          LDA #$40            ;...to $40 (line 2 char 1)
          STA LCD0
          JSR LCDBUSY
LCDPRINT0 PLA
          RTS

; *** Print string on LCD
; registers preserved
LCDSTRING PHA                 ;save A, Y to stack
          TYA
          PHA
          LDY #$00
LCDSTR0   LDA (MSGBASE),Y
          BEQ LCDSTR1
          JSR LCDPRINT
          INY
          BNE LCDSTR0
LCDSTR1   PLA                 ;restore A, Y
          TAY
          PLA
          RTS

; Text
memtestmsg	!text "Memtest: "
			!byte 0 
msgok		!text "  OK!"
			!byte 0
msgfail 	!text "FAIL!"
			!byte 0


; NMI Vector
*= $fffa
 !byte $00
 !byte $00
; reset vector
*= $fffc
 !byte $00
 !byte $e0
; IRQ vector
*= $fffe
 !byte $00
 !byte $00