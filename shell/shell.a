*= $c800

;text_mode_40 = 1

!src <defs.h.a>
!src <bios.h.a>
!src <via.h.a>
!src <fat32.h.a>

	jmp	.init0
!src "shell.textui.a"
!src "shell.gfxui.a"
; !src "util.h.a"

!address {
.key = $10
.buf 				= $0350 ; Input buffer 80 bytes. end: $03a1
.filename  			= $03a2
}

!macro ShellPrint {
	jsr chrout
}

!macro ShellPrintChar char {
	lda #char
    jsr chrout
}

!macro ShellPrintHex {
	jsr	hexout
}
!macro ShellPrintDec {
	; leading zero hack
	cmp #10
	bcs +
	pha
	+ShellPrintChar '0'
	pla
+	
	jsr decout
}

!macro ShellPrintString .word {
	+SetVector .word,	msgptr
	jsr _textui_print
}

!macro toUpper {
    cmp #$60 ; Is lowercase?
	bcc +
	sec
	sbc #$20 ; Yes, make uppercase
+	
}

.init0
	sei
	
	stz .key	
	+SetVector _textui_chrout, outvec
	
	lda #<count
	sta via1t1cl            ; set low byte of count
	lda #>count
	sta via1t1ch            ; set high byte of count

	lda #%11000000
	sta via1ier             ; enable VIA1 T1 interrupts

	lda #%01000000
	sta via1acr             ; T1 continuous, PB7 disabled

	+SetVector .irq, irqvec


	; read from keyboard buffer until empty to filter crap from kbd init
-	lda #%01111010
	sta via1portb

	TAX             ; aufheben
    ORA #$01
    !for .i,0,7 {
		STA via1portb ; Takt An 1
		STX via1portb ; Takt aus  
    }
       
	ldx #%11111110
	stx via1portb

	lda via1sr
	cmp #$00
	bne -

	jsr	.textui_init0
	
	cli
	
	+V_ToggleCursorBusy	
	jsr .fat_mount
	+V_ToggleCursorBusy
	
.init
	lda #dev_uart
	sta chn_out
	stz chn_in

	
	jmp	.hello

	
mainloop
	+ShellPrintString .crlf
	+ShellPrintString .prompt
	ldx #$00
	stz .buf
	
.inputloop	
	jsr .keyin
	cmp #$0d ; return?
	beq .parse

	cmp #$08 ; backspace?
	beq .backspace

.next
	+ShellPrint

	+toUpper

	sta .buf, x
	inx
	stz .buf, x

	; prevent overflow of input buffer 
	cpx #30
	beq mainloop
	
	bra .inputloop

.backspace
	dex
	stz .buf, x
	bra .next	

.parse
	lda .buf

	ldx #$00
	ldy #$00

-	inx
	lda .buf,x
	beq .end_parse   ; end of input line?
    cmp #"-" ; Ignore everything below "-"
    bcc -
    
    cpy #12
    beq -   ; read 11 bytes?


    sta .filename,y
	iny
	lda #$00
	sta .filename,y

; ++	
	bra -


.end_parse
	ldx #$00
-	lda .cmdlist+2,x
	beq +
	
	cmp .buf
	bne ++
	
+	jmp (.cmdlist,x) ; 65c02 FTW!!

++	; Next entry in list
	inx
	inx
	inx
	bra -
	
.dir
	+ShellPrintString .crlf
	; php
	; sei
	
	jsr .fat_read_dir
	
	; plp
	jmp mainloop


.cdroot
	+ShellPrintChar '/'
	jsr .fat_open_rootdir
	jmp mainloop 

.cd
	+ShellPrintString .crlf
	; php
	; sei
	jsr .fat_open
	; plp
-	jmp mainloop 


.load	
	+ShellPrintString .crlf
	jsr .readfile		
	
	lda fat_errno
	bne -

	ldx #$ff
	txs

	php
	sei

	jsr .steckos_start

	plp
	jmp .init 

.type
	+ShellPrintString .crlf
	jsr .readfile
	lda fat_errno
	bne +
	+ShellPrintString .crlf
	+ShellPrintString .steckos_start	

+	jmp mainloop
	
.gfxview
	jsr .readfile	; read data to .steckos_start ($1000)
	lda fat_errno
	bne +
	jsr	.textui_disable			;disable textui
	jsr	.gfxui_init
-	jsr .keyin
	cmp #$0d ; wait return?
	bne	-
	jsr	vdp_display_off			;restore textui
	jsr	.textui_init
	jsr	.textui_enable

+	jmp mainloop

.readfile
	; php
	; sei

	jsr .fat_open
 	sta tmp5
 
	lda fat_errno
	bne +

	
	+SetVector .steckos_start, sd_blkptr
	lda tmp5
	; jsr .fat_read_singleblock
	jsr .fat_read

	lda tmp5
	jsr .fat_close
	
+	
	; plp	
	rts

.irq
	+save

	;via
	bit via1ifr		; Interrupt from VIA?
	bpl +			; no? get out

	bit via1t1cl	; Acknowledge timer interrupt

	lda .key		; already char in buffer? do nothing
	bne +

	; jsr getkey
	lda via1portb
	and #%01111110
	cmp #$7e
	bne +

	lda #%01111010
	; and via1portb
	sta via1portb

	TAX             ; aufheben
    ORA #$01
    !for .i,0,7 {
		STA via1portb ; Takt An 1
		STX via1portb ; Takt aus  
    }
       
	ldx #%11111110
	stx via1portb

	lda via1sr
	cmp #$00
	beq +
	sta .key

+
	jsr	.textui_update_screen
	
	+restore
	rti

.keyin
-	lda .key 		; wait for .key to become != 00
	beq -

	stz .key 		; reset .key to signal isr to fetch next key
	rts

.upload

	sei
	jsr lcdclear
	+SetVector .uploadtxt, msgptr
	jsr lcdstring
	ldx #$00
	ldy #$02
	jsr lcdxy

	jsr upload

	ldx #$ff
	txs
	; jump to new code
	jmp (.startaddr)


	
.unknown
	lda .buf
	beq +
	+ShellPrintString .txt_msg_unknown_cmd
+	jmp mainloop

.hello
	+ShellPrintString .crlf
	+ShellPrintString .hellotxt
	; +ShellPrintString .helptxt
	jmp mainloop

.help
	+ShellPrintString .crlf
	; +ShellPrintString .hellotxt
	+ShellPrintString .helptxt
	jmp mainloop

.cmdlist
	!word .dir
	!byte 'D'
	
	!word .load
	!byte 'L'

	!word .type
	!byte 'T'
	
	!word .gfxview
	!byte 'V'

	!word .cd
	!byte 'C'
	
	!word .cdroot
	!byte '/'
	
	!word .upload
	!byte 'U'

	!word .help
	!byte 'H'

	; End of list
	!word .unknown
	!byte $00



!src <fat.a>

.hellotxt		!text "SteckShell 0.06 ",$00
.helptxt		!text $0a,$0d,"d        - directory"
				!text $0a,$0d,"/        - root dir"
				!text $0a,$0d,"c <name> - change directory"
				!text $0a,$0d,"l <name> - load file"
				!text $0a,$0d,"t <name> - display file"
				!text $0a,$0d,"v <name> - display gfx file"
				!text $0a,$0d,"u        - serial upload"
.crlf			!byte $0a,$0d,$00
.prompt			!text ">",$00
.uploadtxt		!text "serial upload",$00
.txt_msg_unknown_cmd	!text $0a,$0d,"unknown command (h for help)",$00
.assets
!src "sanduhr.raw"
!src "sanduhr_45.raw"
!src "sanduhr_90.raw"
!src "sanduhr_135.raw"
!src "sanduhr_180.raw"
!src "sanduhr_225.raw"
!src "sanduhr_270.raw"
!src "sanduhr_315.raw"
