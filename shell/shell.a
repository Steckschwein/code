*= $d000

text_mode_40 = 1
num_ls_entries = $03

.nvram = $a000
!src <defs.h.a>
!src <bios.h.a>
!src <kernel.h.a>
!src <via.h.a>
!src <fat32.h.a>
!src <params.h.a>
!src <errors.h.a>
!src <t9929.h.a>

	

!address {
.buf 				= $0350 ; Input buffer 80 bytes. end: $03a1
.cmdptr				= .ptr1
.paramptr			= .ptr2
}


;---------------------------------------------------------------------------------------------------------
; init shell
;  - init sd card (again)
;  - mount sd card
;  - print welcome message
;---------------------------------------------------------------------------------------------------------

.init	
	sei
	jsr init_sdcard
	cli
	lda errno
	beq +

	+ShellPrintString .txt_msg_sd_init_error
	jmp .hello

+	lda #%01111110
	sta via1portb
	
	jsr mount
	

	jmp	.hello

	
	
mainloop
	; output prompt character
	+ShellPrintString .prompt

	; reset input buffer
	ldx #$00
	stz .buf
	

	; put input into buffer until return is pressed
.inputloop	
	jsr keyin

	cmp #$0d ; return?
	beq .parse

	cmp #$08 ; backspace?
	beq .backspace

	sta .buf, x ; put byte into buffer
	inx
-	stz .buf, x ; null termination


	; prevent overflow of input buffer 
	cpx #80
	beq mainloop

	jsr chrout

	bra .inputloop

.backspace
	cpx #$00
	bne +
	stz .buf, x
	bra .inputloop	
+	dex
	bra -


.parse

	+SetVector .buf, .cmdptr

-	lda (.cmdptr)	; skip non alphanumeric stuff	
	cmp #$20
	bne +
	inc .cmdptr
	bra -
+

	
	ldx #$00
-	ldy #$00
--	lda .cmdlist,x
	cmp #$ff
	beq .unknown

	; command string in buffer is terminated with $20 if there are cmd line arguments
	cmp #$20
	beq .cmdfound
	; if not, there is a terminating null
	cmp #$00
	beq .cmdfound

	; cmp .buf,y
	cmp (.cmdptr),y
	bne +	; difference. this isnt the command were looking for

	iny
	inx

	bra --

	; next cmdlist entry
+
--	inx
	lda .cmdlist,x
	bne --
	inx
	inx
	inx
	bra -

.cmdfound

	; find begin of parameter part
-	iny
	lda .buf,y
	beq +
	cmp #$20
	beq -

	; add offset to first character of parameter to paramptr
+	+SetVector .buf, .paramptr
	tya

	clc
	adc .paramptr
	sta .paramptr

	inx

	jmp (.cmdlist,x) ; 65c02 FTW!!	

.unknown
	lda .buf
	beq +

	+SetVector .buf, .paramptr
	+ShellPrintString .crlf
	bra .run

+	jmp mainloop



.ls
	+SetVector .dir_show_entry_short, fat_dir_display_hook
	lda #num_ls_entries
	sta .entries
	bra +
.dir
	+SetVector .dir_show_entry, fat_dir_display_hook
+	+ShellPrintString .crlf

	jsr read_dir
	jmp mainloop


.cd
	; is it a slash?
	ldy #$00
	lda (.paramptr),y
	cmp #'/'
	bne +
	iny
	lda (.paramptr),y
	bne +
	
	; its a slash, nothing else. cd to /
	jsr open_rootdir
	jmp mainloop

+	; not a slash. cd to whatever
	lda .paramptr
	sta filenameptr
	lda .paramptr+1
	sta filenameptr+1
	
	+ShellPrintString .crlf
	jsr open

	lda errno
	beq +
	jsr .errmsg
	; +ShellPrintString .txt_cd
	jmp mainloop
+
	+ShellPrintString .txt_cd
-	jmp mainloop 


.run

-	lda (.paramptr)	; skip non alphanumeric stuff	
	cmp #$20
	bne +
	inc .paramptr
	bra -
+

	ldy #$00
-	lda (.paramptr),y
	beq ++
	cmp #' '
	beq ++
	
	cmp #'.'
	beq + ; has extension
	iny
	bra -	

++	
	ldx #$00
-	lda .exec_extension,x
	sta (.paramptr),y
	iny
	inx
	cpx #$05
	bne -

	; +ShellPrintString .filename

+	jsr .readfile		
	
	lda errno
	beq + 
	jmp mainloop
+

	; ldx #$ff
	; txs

	sei
	; jmp  .steckos_start

	jsr .steckos_start

.load
	jsr .readfile		
	
	jmp mainloop

.type
	jsr .readfile
	lda errno
	bne +
	+ShellPrintString .crlf
	+ShellPrintString .steckos_start	

+	jmp mainloop


.dumpvec 		= tmp2
.dumpvec_end   	= .dumpvec
.dumpvec_start 	= .dumpvec+2

.dump
	; stz .dumpvec
	stz .dumpvec+1
	stz .dumpvec+2
	stz .dumpvec+3

	ldy #$00
	ldx #$03
-	lda (.paramptr),y
	beq +

	jsr .atoi
	asl
	asl
	asl
	asl
	sta .dumpvec,x

	iny
	lda (.paramptr),y
	beq +
	jsr .atoi
	ora .dumpvec,x
	sta .dumpvec,x
	dex
	iny
	cpy #$04
	bne -

	iny
	bra -

+	cpy #$00
	bne ++

	+ShellPrintString .txt_msg_param_error
	bra +

++	

-	
	+ShellPrintString .crlf
	lda .dumpvec_start+1
	jsr hexout
	lda .dumpvec_start
	jsr hexout
	lda #':'
	jsr chrout
	lda #' '
	jsr chrout

	ldy #$00
--	lda (.dumpvec_start),y
	jsr hexout 
	lda #' '
	jsr chrout
	iny
	cpy #$08
	bne --

	lda #' '
	jsr chrout
	
	ldy #$00
--	lda (.dumpvec_start),y
	cmp #$20
	bcs ++
	lda #'.'
++	jsr chrout
	iny
	cpy #$08
	bne --

	lda .dumpvec_start+1
	cmp .dumpvec_end+1
	bne ++
	lda .dumpvec_start
	cmp .dumpvec_end
	beq +
	bcs +

++
	jsr getkey
	cmp #$03
	beq +
	clc
	lda .dumpvec_start

	adc #$08
	sta .dumpvec_start
	lda .dumpvec_start+1
	adc #$00
	sta .dumpvec_start+1
	bra -

+	jmp mainloop

	
.gfxview
	jsr .readfile	; read data to .steckos_start ($1000)
	lda errno
	bne +
	jsr	textui_disable			;disable textui
	jsr	gfxui_init
    jsr	gfxui_blend_on
-	jsr keyin
	beq -
	jsr	gfxui_blend_off
	jsr	display_off			;restore textui
	jsr	textui_init
	jsr	textui_enable

+	jmp mainloop

.readfile

	lda .paramptr
	sta filenameptr
	lda .paramptr+1
	sta filenameptr+1


	jsr open
 	stx tmp5
 
	lda errno
	bne +

	
	+SetVector .steckos_start, sd_blkptr
	jsr read

	ldx tmp5
	jsr close
	rts

+	
	+ShellPrintString .crlf
	ldy #$00
-	lda (filenameptr),y
	beq +
	jsr chrout
	iny
	bra -
+
	lda #':'
	jsr chrout	
	lda #' '
	jsr chrout

	lda errno
	jsr .errmsg
	; plp	
	rts


.upload
	sei

	jsr upload

	ldx #$ff
	txs
	; jump to new code
	jmp (.startaddr)


	

.hello
	+ShellPrintString .crlf
	+ShellPrintString .hellotxt
	; +ShellPrintString .helptxt
	jmp mainloop

.help
	+ShellPrintString .crlf
	; +ShellPrintString .hellotxt
	+ShellPrintString .helptxt1
	+ShellPrintString .helptxt2
	jmp mainloop


.date 
-	lda via1portb ; wait for spi bus to become free
    and #%01111110
    cmp #$7e
    bne -

    ; Select SPI SS for RTC
	lda #%01110110
	; and via1portb
	sta via1portb

    lda #$00
    jsr spi_rw_byte

    jsr spi_r_byte
    sta tmp6
	
	jsr spi_r_byte
    sta tmp7
	
	jsr spi_r_byte
    jsr hexout
	+PrintChar ':'

	lda tmp7
    jsr hexout
	+PrintChar ':'
	
	lda tmp6	
	jsr hexout


    jsr spi_r_byte
	+PrintChar ' '

    jsr spi_r_byte
    jsr hexout
    +PrintChar '.'
	
	jsr spi_r_byte
    jsr hexout
    +PrintChar '.'
	
	jsr spi_r_byte
    jsr hexout

    lda #$7e
    sta via1portb

    jmp mainloop


.cmdlist
	!text "dir"
	!byte $00
	!word .dir

	!text "ll"
	!byte $00
	!word .dir

	!text "ls"
	!byte $00
	!word .ls

	!text "load"
	!byte $00
	!word .load

	; !text "run"
	; !byte $00
	; !word .run

	!text "type"
	!byte $00
	!word .type

	!text "view"
	!byte $00	
	!word .gfxview

	!text "cd"
	!byte $00	
	!word .cd
	
	!text "date"
	!byte $00	
	!word .date

	!text "upload"
	!byte $00	
	!word .upload

	!text "init"
	!byte $00	
	!word .init

	!text "help"
	!byte $00	
	!word .help

	!text "dump"
	!byte $00	
	!word .dump
	
	; End of list
	!byte $ff


.errmsg
		; jsr hexout

		+errMsgEntry fat_bad_block_signature, .fat_err_signature
		+errMsgEntry fat_invalid_partition_type, .fat_err_partition
		+errMsgEntry fat_invalid_sector_size, .fat_err_bad_sect_size
		+errMsgEntry fat_invalid_num_fats, .fat_err_bad_sect_size		
		+errMsgEntry fat_open_error, .fat_err_open
		+errMsgEntry fat_too_many_files, .fat_err_too_many_open
		+errMsgEntry fat_file_not_found, .fat_err_no_such_file
		+errMsgEntry fat_file_not_open, .fat_err_file_not_open

		jsr strout
		
		rts


.hellotxt		!text "SteckShell 0.10 ",$00
.helptxt1		
				!text $0a,$0d,"ll/ls       - directory (long/short)"
				!text $0a,$0d,"cd <name>   - change directory"
				!text $0a,$0d,"load <name> - load file"
				; !text $0a,$0d,"run <name>  - run program"		
				!text $0a,$0d,"type <name> - display text file"
				!text $0a,$0d,"view <name> - display gfx file"
				!text $0a,$0d,"dump <addr> <addr> - dump memory"
				!byte $00
.helptxt2				
				!text $0a,$0d,"date        - show time and date"
.crlf			!byte $0a,$0d,$00
.prompt			!text $0a,$0d,">",$00
.txt_msg_unknown_cmd	!text $0a,$0d,"unknown command (try 'help')",$00
.txt_msg_param_error	!text $0a,$0d,"parameter error",$0a,$0d,$00
.txt_msg_sd_init_error	!text $0a,$0d,"sdcard init error",$0a,$0d,$00
.txt_cd 				!text "cd ok",$00

.fat_err_signature 		!text "bad block signature", $00
.fat_err_partition 		!text "invalid partition type", $00
.fat_err_bad_sect_size 	!text "sector size unsupported", $00
.fat_err_open			!text "open error",$00
.fat_err_no_such_file	!text "no such file or directory",$00
.fat_err_file_not_open	!text "file not open error",$00
.fat_err_too_many_open	!text "too many open files",$00
.exec_extension			!text ".bin",$00

.filename !text "            ",$00
.atoi
	cmp #"9"+1
	bcc + 	; 0-9?
	; must be hex digit
	adc #$08
	and #$0f
	rts

+	sec
	sbc #$30
	rts


.dir_show_entry_short
	pha
	jsr .print_filename
	+PrintChar ' '
	+PrintChar ' '
	dec .entries
	bne +	
	+ShellPrintString .crlf
	lda #$03
	sta .entries
+
	pla
	rts

.dir_show_entry
	pha
	jsr .print_filename
	+PrintChar ' '

	ldy #DIR_Attr
	lda (dirptr),y

	ror
	ror
	ror
	bcc +
	lda #'V'
	bra ++
+
	ror
	bcc +
    lda #'S'
    bra ++
+	
	ror
	bcc +
	lda #'D'
	bra ++
+
	lda #'F'	

++	+ShellPrint

	+PrintChar ' '
	ldy #DIR_FileSize + 1 +1
-	dey
	lda (dirptr),y
	+ShellPrintHex
	cpy #DIR_FileSize
	bne -	

	+PrintChar ' '

	; day
	ldy #DIR_WrtDate 
	lda (dirptr),y
	and #%00011111
	jsr .decoutz
	
	; +PrintChar '.'
	; month
	iny
	lda (dirptr),y
	lsr
	tax
	dey
	lda (dirptr),y
	ror
	lsr
	lsr
	lsr
	lsr
	
	jsr .decoutz
	
	; +PrintChar '.'
	; year
	txa
	clc 
	adc #80   	; add begin of msdos epoch (1980)
	cmp #100	
	bcc +		; greater than 100 (post-2000)
	sec 		; yes, substract 100
	sbc #100
+	jsr .decoutz ; there we go

	

	+PrintChar ' '

	ldy #DIR_WrtTime +1
	lda (dirptr),y
	tax
	lsr
	lsr
	lsr
	
	jsr .decoutz

	+PrintChar ':'

	txa
	and #%00000111
	sta tmp1
	dey
	lda (dirptr),y
	
	!for .i,0,4 {
		lsr tmp1
		ror 
	}	


	jsr .decoutz


	; Bits 11–15: Hours, valid value range 0–23 inclusive.
	
	+ShellPrintString .crlf
	pla
	rts	

.print_filename
	ldy #DIR_Name
-	lda (dirptr),y
	+ShellPrint	
	iny
	cpy #$0b
	bne -
	rts


!src <util.a>
