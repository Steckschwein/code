*= $c800

text_mode_40 = 1

.nvram = $a000
!src <defs.h.a>
!src <bios.h.a>
!src <via.h.a>
!src <fat32.h.a>
!src <params.h.a>

	jmp	.init0
!src "shell.textui.a"
!src "shell.gfxui.a"

!address {
.key = $10
.buf 				= $0350 ; Input buffer 80 bytes. end: $03a1
.cmd  				= $03a2
.filename 			= .cmd + 12
}

!macro ShellPrint {
	jsr chrout
}

!macro ShellPrintChar char {
	lda #char
    jsr chrout
}

!macro ShellPrintHex {
	jsr	hexout
}
!macro ShellPrintDec {
	; leading zero hack
	cmp #10
	bcs +
	pha
	+ShellPrintChar '0'
	pla
+	
	jsr decout
}

!macro ShellPrintString .word {
	+SetVector .word,	msgptr
	jsr _textui_print
}

!macro toUpper {
    cmp #$60 ; Is lowercase?
	bcc +
	sec
	sbc #$20 ; Yes, make uppercase
+	
}

.init0
	sei
	
	stz .key	
	+SetVector _textui_chrout, outvec
	
	lda #<count
	sta via1t1cl            ; set low byte of count
	lda #>count
	sta via1t1ch            ; set high byte of count

	lda #%11000000
	sta via1ier             ; enable VIA1 T1 interrupts

	lda #%01000000
	sta via1acr             ; T1 continuous, PB7 disabled

	+SetVector .irq, irqvec


	; read from keyboard buffer until empty to filter crap from kbd init
-	lda #%01111010
	sta via1portb

	TAX             ; aufheben
    ORA #$01
    !for .i,0,7 {
		STA via1portb ; Takt An 1
		STX via1portb ; Takt aus  
    }
       
	ldx #%11111110
	stx via1portb

	lda via1sr
	cmp #$00
	bne -

	jsr	.textui_init0
	
	cli

	+V_ToggleCursorBusy	
	jsr .fat_mount
	+V_ToggleCursorBusy
	
.init	
	jmp	.hello

	
mainloop
	stz .filename
	stz .cmd

	+ShellPrintString .crlf
	+ShellPrintString .prompt
	ldx #$00
	stz .buf
	
.inputloop	
	jsr .keyin
	cmp #$0d ; return?
	beq .parse

	cmp #$08 ; backspace?
	beq .backspace

.next
	+ShellPrint

	sta .buf, x
	inx
	stz .buf, x

	; prevent overflow of input buffer 
	cpx #30
	beq mainloop
	
	bra .inputloop

.backspace
	dex
	stz .buf, x
	bra .next	


.parse
	+ShellPrintString .crlf

	ldx #$00
-	lda .buf,x
	beq .end_parse
	
	cmp #$20
	beq .param	; everything till space is our command
	+toUpper	; uppercase
	sta .cmd,x
	inx
	stz .cmd,x
	bra -

.param
	ldy #$00
-	inx
	lda .buf,x
	beq .end_parse
    
    cmp #$20 
    beq .end_parse

    cpy #11
    beq .end_parse

    +toUpper
    sta .filename,y
	iny
	lda #$00
	sta .filename,y

	bra -


.end_parse
	ldx #$00
-	ldy #$00
--	lda .cmdlist,x
	cmp #$ff
	beq .unknown

	cmp .cmd,y
	bne +	; difference. this isnt the command were looking for

	cmp #$00
	beq .cmdfound


	iny
	inx

	jmp --

	; next cmdlist entry
+
--	inx
	lda .cmdlist,x
	bne --
	inx
	inx
	inx
	jmp -

.cmdfound	
	inx
	jmp (.cmdlist,x) ; 65c02 FTW!!	

.unknown
	lda .buf
	beq +
	+ShellPrintString .txt_msg_unknown_cmd
+	jmp mainloop


!src <fat.a>
dir
.dir
	+ShellPrintString .crlf
	; php
	; sei
	
	jsr .fat_read_dir
	
	; plp
	jmp mainloop


.cdroot
	+ShellPrintChar '/'
	jsr .fat_open_rootdir
	jmp mainloop 

.cd
	+SetVector .filename, filenameptr
	; php
	; sei
	jsr .fat_open
	; plp
-	jmp mainloop 


.load	
	jsr .readfile		
	
	lda fat_errno
	bne -

	ldx #$ff
	txs

	php
	sei

	jsr .steckos_start

	plp
	jmp .init 

.type
	jsr .readfile
	lda fat_errno
	bne +
	+ShellPrintString .crlf
	+ShellPrintString .steckos_start	

+	jmp mainloop
	
.gfxview
	jsr .readfile	; read data to .steckos_start ($1000)
	lda fat_errno
	bne +
	jsr	.textui_disable			;disable textui
	jsr	.gfxui_init
-	jsr .keyin
	cmp #$0d ; wait return?
	bne	-
	jsr	vdp_display_off			;restore textui
	jsr	.textui_init
	jsr	.textui_enable

+	jmp mainloop

.readfile
	+SetVector .filename, filenameptr
	; php
	; sei

	jsr .fat_open
 	sta tmp5
 
	lda fat_errno
	bne +

	
	+SetVector .steckos_start, sd_blkptr
	lda tmp5
	; jsr .fat_read_singleblock
	jsr .fat_read

	lda tmp5
	jsr .fat_close
	
+	
	; plp	
	rts

.irq
	+save

	;via
	bit via1ifr		; Interrupt from VIA?
	bpl +			; no? get out

	bit via1t1cl	; Acknowledge timer interrupt

	lda .key		; already char in buffer? do nothing
	bne +

	; jsr getkey
	lda via1portb
	and #%01111110
	cmp #$7e
	bne +

	lda #%01111010
	; and via1portb
	sta via1portb

	TAX             ; aufheben
    ORA #$01
    !for .i,0,7 {
		STA via1portb ; Takt An 1
		STX via1portb ; Takt aus  
    }
       
	ldx #%11111110
	stx via1portb

	lda via1sr
	cmp #$00
	beq +
	sta .key

+
	jsr	.textui_update_screen
	
	+restore
	rti

.keyin
-	lda .key 		; wait for .key to become != 00
	beq -

	stz .key 		; reset .key to signal isr to fetch next key
	rts

.upload

	sei

	jsr upload

	ldx #$ff
	txs
	; jump to new code
	jmp (.startaddr)


	

.hello
	+ShellPrintString .crlf
	+ShellPrintString .hellotxt
	; +ShellPrintString .helptxt
	jmp mainloop

.help
	+ShellPrintString .crlf
	; +ShellPrintString .hellotxt
	+ShellPrintString .helptxt
	jmp mainloop


.date 
-	lda via1portb ; wait for spi bus to become free
    and #%01111110
    cmp #$7e
    bne -

    ; Select SPI SS for RTC
	lda #%01110110
	; and via1portb
	sta via1portb

    lda #$00
    jsr spi_rw_byte

    jsr spi_r_byte
    sta tmp6
	
	jsr spi_r_byte
    sta tmp7
	
	jsr spi_r_byte
    jsr hexout
	+ShellPrintChar ':'

	lda tmp7
    jsr hexout
	+ShellPrintChar ':'
	
	lda tmp6	
	jsr hexout




    jsr spi_r_byte
	+ShellPrintChar ' '

    jsr spi_r_byte
    jsr hexout
    +ShellPrintChar '.'
	
	jsr spi_r_byte
    jsr hexout
    +ShellPrintChar '.'
	
	jsr spi_r_byte
    jsr hexout

    lda #$7e
    sta via1portb

    jmp mainloop



.cmdlist
	!text "DIR"
	!byte $00
	!word .dir

	!text "LL"
	!byte $00
	!word .dir

	!text "LOAD"
	!byte $00
	!word .load

	!text "TYPE"
	!byte $00
	!word .type

	!text "VIEW"
	!byte $00	
	!word .gfxview

	!text "CD"
	!byte $00	
	!word .cd

	!text "/"
	!byte $00	
	!word .cdroot
	
	!text "DATE"
	!byte $00	
	!word .date

	!text "UPLOAD"
	!byte $00	
	!word .upload

	!text "HELP"
	!byte $00	
	!word .help
	
	; End of list
	!byte $ff





.hellotxt		!text "SteckShell 0.07 ",$00
.helptxt		!text $0a,$0d,"dir         - Directory"
				!text $0a,$0d,"/           - root dir"
				!text $0a,$0d,"cd <name>   - Change directory"
				!text $0a,$0d,"load <name> - Load file"
				!text $0a,$0d,"type <name> - Type (display file)"
				!text $0a,$0d,"view <name> - View (display gfx file)"
				!text $0a,$0d,"date        - show tIme and date"
				!text $0a,$0d,"upload      - serial Upload"
.crlf			!byte $0a,$0d,$00
.prompt			!text ">",$00
.txt_msg_unknown_cmd	!text $0a,$0d,"unknown command (try 'help')",$00
.assets
!src "sanduhr.raw"
!src "sanduhr_45.raw"
!src "sanduhr_90.raw"
!src "sanduhr_135.raw"
!src "sanduhr_180.raw"
!src "sanduhr_225.raw"
!src "sanduhr_270.raw"
!src "sanduhr_315.raw"

.sprite_sanduhr
	!byte	$ff,	$f0,	0,	Gray
