*= $d000
!src "../bios/defs.h.a"
!src "../bios/bios.h.a"
!src "../bios/via.h.a"

	jmp	.init0
	
!src "shell.textui.a"
	
.screen
	!fill	$300, ' '

!address {
.key = $10
.filename  			= $03a2
.buf 				= $0350 ; Input buffer 80 bytes. end: $03a1
}

!macro toUpper {
    cmp #$60 ; Is lowercase?
	bcc +
	sec
	sbc #$20 ; Yes, make uppercase
+	
}

.init0
	stz .key

	lda #<count
	sta via1t1cl            ; set low byte of count
	lda #>count
	sta via1t1ch            ; set high byte of count

	lda #%11000000
	sta via1ier             ; enable VIA1 T1 interrupts

	lda #%01000000
	sta via1acr             ; T1 continuous, PB7 disabled

	+SetVector .irq, irqvec

	jsr	.textui_init_vdp
	
	jsr .fat_mount
	cli
	
.init
	lda #dev_uart
	sta chn_out
	stz chn_in
	
mainloop
	+PrintString .crlf
	+PrintString .prompt
	ldx #$00
	stz .buf


.inputloop	
	jsr .keyin
	cmp #$0d ; return?
	beq .parse

	cmp #$08 ; backspace?
	beq .backspace

.next	
	jsr chrout

	+toUpper

	sta .buf, x
	inx
	stz .buf, x

	; prevent overflow of input buffer 
	cpx #80
	beq mainloop
	
	bra .inputloop

.backspace
	dex
	stz .buf, x
	bra .next	

.parse
	lda .buf

	ldx #$00
	ldy #$00

-	inx
	lda .buf,x
	beq .end_parse   ; end of input line?
    cmp #"-" ; Ignore everything below "-"
    bcc -
    
    cpy #12
    beq ++   ; read 11 bytes?


    sta .filename,y
	iny
	lda #$00
	sta .filename,y

++	
	bra -


.end_parse
	ldx #$00
-	lda .cmdlist+2,x
	beq +
	
	cmp .buf
	bne ++
	
+	jmp (.cmdlist,x) ; 65c02 FTW!!

++	; Next entry in list
	inx
	inx
	inx
	bra -
	
.dir
	+PrintString .crlf
	php
	sei
	
	jsr .fat_read_dir
	
	plp
	jmp mainloop


.cdroot
	+PrintChar '/'
	jsr .fat_open_rootdir
	jmp mainloop 

.cd
	+PrintString .crlf
	
	php
	sei
	jsr .fat_open
	plp
-	jmp mainloop 


.load	
	+PrintString .crlf

	jsr .readfile		
	
	lda fat_errno
	bne -

	ldx #$ff
	txs

	php
	sei

	jsr .steckos_start

	plp
	jmp .init 

.type	
	+PrintString .crlf

	jsr .readfile
	lda fat_errno
	bne +
	+PrintString .crlf

	+PrintString .steckos_start
	
+	jmp mainloop

.readfile
	php
	sei

	jsr .fat_open
 	sta tmp5
 
	lda fat_errno
	bne +

	

	+SetVector .steckos_start, sd_blkptr
	lda tmp5
	jsr .fat_read
	
	lda tmp5
	jsr .fat_close
	
+	plp	
	rts

.irq
	pha
	phx
	
	;gfx
	bit	a_vreg
	bpl +	   ; VDP IRQ flag set? 
	jsr	.textui_update_screen

	;via
	bit via1ifr		; Interrupt from VIA?
	bpl +			; no? get out

	bit via1t1cl	; Acknowledge timer interrupt

	lda .key		; already char in buffer? do nothing
	bne +

	; jsr getkey

	lda #%01111010
	; and via1portb
	sta via1portb

	TAX             ; aufheben
    ORA #$01
    !for .i,0,7 {
		STA via1portb ; Takt An 1
		STX via1portb ; Takt aus  
    }
       
	ldx #%11111110
	stx via1portb

	lda via1sr
	cmp #$00
	beq +
	sta .key

+
	plx
	pla
	rti

.keyin
-	lda .key 		; wait for .key to become != 00
	beq -

	stz .key 		; reset .key to signal isr to fetch next key
	rts

.unknown
	lda .buf
	beq +
	+PrintString .txt_msg_unknown_cmd
+	jmp mainloop

.hello
	+PrintString .crlf
	+PrintString .hellotxt
	+PrintString .helptxt
	jmp mainloop

.cmdlist
	!word .dir
	!byte 'D'
	
	!word .load
	!byte 'L'

	!word .type
	!byte 'T'

	!word .cd
	!byte 'C'
	
	!word .cdroot
	!byte '/'
	
	!word upload
	!byte 'U'

	!word .hello
	!byte 'H'

	; End of list
	!word .unknown
	!byte $00

!src "../fat/fat.a"

.hellotxt		!text "SteckShell 0.04 ",$00
.helptxt		!text $0a,$0d,"d            - directory "
				!text $0a,$0d,"l <name>     - load file "
				!text $0a,$0d,"t <name>     - dump file to screen"
				!text $0a,$0d,"c <name>     - change directory "
				!text $0a,$0d,"u            - serial upload",$0a,$0d,$00
.prompt			!text "> ",$00
.crlf			!byte $0a,$0d,$00

.txt_msg_unknown_cmd	!text $0a,$0d,"unknown command",$00