*= $d000
!src "../bios/defs.h.a"
!src "../bios/bios.h.a"
!src "../bios/via.h.a"
!src "../fat/fat32.h.a"
!address {
.key = $10
.filename  			= $03a2
.buf 				= $0350 ; Input buffer 80 bytes. end: $03a1
}

!macro toUpper {
    cmp #$60 ; Is lowercase?
	bcc +
	sec
	sbc #$20 ; Yes, make uppercase
+	
}

	jsr lcdclear
	lda #dev_lcd
	sta chn_out
	stz chn_in

	jsr chrin

	; stz .key

	; lda #<count
	; sta via1t1cl            ; set low byte of count
	; lda #>count
	; sta via1t1ch            ; set high byte of count

	; lda #%11000000
	; sta via1ier             ; enable VIA1 T1 interrupts

	; lda #%01000000
	; sta via1acr             ; T1 continuous, PB7 disabled

	; +SetVector .irq, irqvec

	; cli

	+PrintString .hellotxt


	lda #dev_uart
	sta chn_out


	jsr .fat_mount


	
.hello
	+PrintString .crlf
	+PrintString .hellotxt
	+PrintString .helptxt



mainloop

	+PrintString .crlf
	+PrintString .prompt
	ldx #$00
	stz .buf


.inputloop	
	jsr chrin
	cmp #$0d ; return?
	beq .parse

	cmp #$08 ; backspace?
	beq .backspace

	sta .buf, x
	inx
	stz .buf, x
	cpx #80
	beq mainloop

.next	
	jsr chrout
	bra .inputloop

.backspace
	dex
	stz .buf, x
	bra .next	

.parse
	lda .buf

	+toUpper

	sta .buf

	ldx #$00
	ldy #$00

-	inx
	lda .buf,x
	beq .end_parse   ; end of input line?
    cmp #"-" ; Ignore everything below "-"
    bcc -
    
    cpy #12
    beq ++   ; read 11 bytes?

	+toUpper 

    sta .filename,y
	iny
	lda #$00
	sta .filename,y

++	
	bra -


.end_parse
	ldx #$00
-	lda .cmdlist+2,x
	beq mainloop

	cmp .buf
	bne +
	
	jmp (.cmdlist,x) ; 65c02 FTW!!

+	; Next entry in list
	inx
	inx
	inx
	bra -

	

	
.dir
	+PrintString .crlf
	jsr .fat_read_dir
	jmp mainloop


.cdroot
	+PrintString .cdtxt
	+PrintChar '/'
	+Copy root_dir_first_clus, cluster_number, 3
	jmp mainloop 

.cd
	+PrintString .crlf
	jsr .fat_open
	
	; in case ".." points to the root dir, the cluster number will be 0. In that case, we use the
	; root cluster number from the BPB
	!for .i,3,0 {
		lda file0_cluster_no + .i
		bne +		
	}

	bra .cdroot
+	+Copy file0_cluster_no, cluster_number, 3
++	+PrintString .cdtxt
	jmp mainloop 


.load	
	+PrintString .crlf

	jsr .readfile

	sei 

	ldx #$ff
	txs

	jmp .steckos_start

	; jmp mainloop 

.type	
	+PrintString .crlf

	jsr .readfile
	+PrintString .crlf

	+PrintString .steckos_start

	jmp mainloop

.readfile
	jsr .fat_open

	+SetVector .steckos_start, sd_blkptr
	+Copy file0_cluster_no, cluster_number, 3
	jsr .fat_read
	rts


; .irq
; 	pha
; 	bit via1ifr		; Interrupt from VIA?
; 	bpl +

; 	bit via1t1cl	; Acknowledge timer interrupt

; 	lda .key		; already char in buffer? do nothing
; 	bne +

; 	jsr getkey
; 	cmp #$00
; 	beq +
; 	sta .key

; +	pla
; 	rti

; .keyin
; -	lda .key
; 	beq -

; 	stz .key
; 	rts

.hellotxt		!text "SteckShell 0.03 ",$00
.helptxt		!text $0a,$0d,"d            - directory "
				!text $0a,$0d,"l <name>     - load file "
				!text $0a,$0d,"c <name>     - change directory "
				!text $0a,$0d,"u            - serial upload",$0a,$0d,$00
.prompt			!text "> ",$00
.crlf			!byte $0a,$0d,$00
.cdtxt			!text "CD: ",$00
; .filename  				!text "NAME    BIN",$00
; .filename  				!text "TEST    TXT",$00
; .filename  				!text "HELLO   BIN",$00
; .filename  				!text "TESTDIR",$00


.cmdlist
	!word .dir
	!byte 'D'
	
	!word .load
	!byte 'L'

	!word .type
	!byte 'T'

	!word .cd
	!byte 'C'
	
	!word .cdroot
	!byte '/'
	
	!word $f000
	!byte 'U'

	!word .hello
	!byte 'H'

	; End of list
	!word $0000
	!byte $00

!src "../fat/fat.a"
