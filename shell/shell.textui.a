!src "../vdp/t9929.h.a"
!src "../vdp/t99xx.lib.a"

.screen=$c000
.screen_status !byte 0
.screen_frames !byte 0
.saved_char	!byte ' '
.saved_crs_ptr	!word 0
.COLS=32
.ROWS=24
.WRITE=1<<0
.DIRTY=1<<1
.CURSOR=1<<2

.textui_init
	jsr	vdp_display_off			;display off
	
	+SetVector charset, .adrl	;setup vram with characters
	ldx	#$08
	lda	#$00
	ldy	#$40+$00
	jsr	vdp_memcpy

	jsr	.textui_blank			;blank screen
		
	;TODO FIXME remove after init
	jsr	vdp_mode_gfx1_blank		;blank screen vram
	
	lda	#Cyan<<4|Black			;gfx 1 with cyan/black
	jsr	vdp_mode_gfx1
	
	stz	crs_x
	stz	crs_y
	jmp .textui_update_crs_ptr		;init cursor pointer

.textui_blank
	ldx	#$00
	lda	#' '
-	sta	.screen,x
	sta	.screen+256,x
	sta	.screen+512,x
	inx
	bne	-
	ldx	#$00
-	sta	.screen+768,x	;last line for scroll up
	inx
	cpx	#.COLS
	bne	-
	rts
	
.textui_cursor
	lda .screen_status
	and	#.WRITE
	bne	+++
	lda .screen_frames
	and	#$0f
	bne	+++
	lda .screen_status
	ora	#.CURSOR
	eor	.screen_status
	sta .screen_status		; or/eor to alternate .CURSOR bit
	and	#.CURSOR
	beq	+
;	lda	crs_ptr				; save crs vector
;	sta	.saved_crs_ptr
;	lda	crs_ptr+1
;	sta	.saved_crs_ptr+1
	lda	#160
	jmp	++
+  	lda	.saved_char
++	jmp _textui_put
+++	rts
	
.textui_update_screen
;	lda	#Gray
;	jsr	vdp_bgcolor	

	inc	.screen_frames
	
	jsr	.textui_cursor
	
	;TODO dirty check .screen_status AND 1 ...
	lda	.screen_status
	and	#.DIRTY
	beq	+		;exit if not dirty
	
	+SetVector	.screen, .adrl
	lda	#$00
	ldy	#$40+$18
	ldx	#$03
	jsr	vdp_memcpy
	
	lda	.screen_status		;clean dirty
	and	#!.DIRTY
	sta	.screen_status

+	lda	#Black
	jsr	vdp_bgcolor
	rts	

.textui_scroll_up
	ldx	#$00
-	lda	.screen+.COLS,x
	sta	.screen,x
	lda	.screen+256+.COLS,x
	sta	.screen+256,x
	lda	.screen+512+.COLS,x
	sta	.screen+512,x
	inx
	bne	-
	rts
	
.inc_cursor_y
	lda crs_y
	cmp	#23		;last line
	bne	+
	jmp	.textui_scroll_up	; scroll and exit
+	inc crs_y
	rts
	
.textui_update_crs_ptr
	pha
	lda	crs_y	; * .COLS
	asl	
	asl	
	asl	
	asl
	asl
	ora	crs_x
	sta	crs_ptr
	
	lda	crs_y	; * .COLS
	lsr			; /8 -> page offset 0-2
	lsr
	lsr
	clc
	adc	#>.screen
	sta	crs_ptr+1
	pla
	rts


_textui_print
	inc .screen_status	;write on
	ldy	#$00
-	lda	(msgptr),y
	beq	+
	jsr .textui_dispatch_char
	iny
	bne	-
+	dec	.screen_status	;write off
	jmp	.textui_screen_dirty

_textui_chrout
	beq	+	; \0 char
	pha		; safe char
	inc .screen_status	;write on
	jsr .textui_dispatch_char
	dec	.screen_status	;write off
	jsr	.textui_screen_dirty
	pla		; restore char
+	rts

.textui_dispatch_char
	cmp	#$0a
	bne	+
	lda	#' '
	sta	(crs_ptr)		;cariage return, we do not write anything, therefore erase a possible not blank cursor before write
	stz	crs_x
	jmp	++
+	cmp	#$0d	
	bne	+
	jsr	.inc_cursor_y
	jmp	++
+	sta	(crs_ptr)
	inc	crs_x
	lda	crs_x
	and	#$20
	beq ++
	stz	crs_x
	jsr	.inc_cursor_y
++	jmp	.textui_update_crs_ptr
	
.textui_screen_dirty
	lda	.screen_status		;set dirty
	ora	#.DIRTY
	sta	.screen_status
	rts

_textui_put
	sta	(crs_ptr)
	jmp	.textui_screen_dirty
	rts
	
_textui_println
	jmp	_textui_print
	
!macro	V_Print .word {
	+SetVector .word, msgptr
	jsr	_textui_print
}

!macro	V_Println .word {
	+SetVector .word, msgptr
	jsr	_textui_println
}

.bg	!byte 0
