!initmem $ea
*=0
	nop
*= $1000

!src <defs.h.a>
!src <shell.h.a>

KEY_RETURN 		= $0d
;KEY_BACKSPACE 		= $08
KEY_BACKSPACE 		= $7f
KEY_ESCAPE		= $1b
BUF_SIZE		= 32

!address {
.bufstart			= $2000
.bufptr				= $00
chrout				= $f001
chrin				= $f004
}



.init	
	lda #<.bufstart
	sta .bufptr
	lda #>.bufstart
	sta .bufptr+1

	jmp	.hello
	
	
mainloop
	; output prompt character
	+ShellPrintString .prompt

	; reset input buffer
	lda #$00
	tay
	sta (.bufptr)

	; put input into buffer until return is pressed
.inputloop	
	jsr keyin

	cmp #KEY_RETURN ; return?
	beq .parse

	cmp #KEY_BACKSPACE
	beq .backspace

	sta (.bufptr),y
	iny

	jsr .terminate
	

-	sta chrout

	; prevent overflow of input buffer 
	cpy #BUF_SIZE
	beq mainloop

	
	bra .inputloop

.backspace
	jsr .terminate
	dey
	lda #$08
	bra -

.terminate
	tax
	lda #$00
	sta (.bufptr),y
	txa
	rts

.parse
	+copyPointer .bufptr, cmdptr

	; find begin of command word
-	lda (cmdptr)	; skip non alphanumeric stuff	
	beq mainloop
	cmp #$20
	bne +
	inc cmdptr
	bra -
+
	+copyPointer cmdptr, paramptr


	; find begin of parameter (everything behind the command word, separated by space)
	; first, fast forward until space or abort if null (no parameters then)
-	lda (paramptr)
	beq ++
	cmp #$20
	beq +
	inc paramptr
	bra -
+	
	; space found.. fast forward until non space or null
-	lda (paramptr)
	beq ++
	cmp #$20
	bne +
	inc paramptr
	bra -
+
++

	; advance bufptr by BUF_SIZE bytes
	lda #BUF_SIZE
	clc
	adc .bufptr
	sta .bufptr
	bcc +
	inc .bufptr+1
+

	; compare 	
	ldx #$00
-	ldy #$00
--	lda (cmdptr),y

	; if not, there is a terminating null
	; cmp #$00
	beq .cmdfound

	; command string in buffer is terminated with $20 if there are cmd line arguments
	cmp #$20
	beq .cmdfound

	; make lowercase
	ora #$20

	cmp .cmdlist,x
	bne +	; difference. this isnt the command were looking for

	iny
	inx

	bra --

	; next cmdlist entry
+
--	inx
	lda .cmdlist,x
	bne --
	inx
	inx
	inx

	lda .cmdlist,x
	cmp #$ff
	beq .unknown
	bra -

.cmdfound

	inx

	jmp (.cmdlist,x) ; 65c02 FTW!!	
.unknown
	+ShellPrintString .txt_msg_unknown_cmd
	jmp mainloop





.cmdlist
	!text "dir"
	!byte $00
	!word .dir

	!text "ll"
	!byte $00
	!word .dir

	!text "ls"
	!byte $00
	!word .ls

	!text "type"
	!byte $00
	!word .type

	!text "cd"
	!byte $00	
	!word .cd
	
	!text "help"
	!byte $00	
	!word .help

	!text "hello"
	!byte $00	
	!word .hello

	
	; End of list
	!byte $ff



.hellotxt		!text "SteckShell 0.10 ",$00
.helptxt1		
				!text $0a,$0d,"cd <name>   - change directory"
				; !text $0a,$0d,"run <name>  - run program"		
				!byte $00

.crlf			!byte $0a,$0d,$00
.prompt			!text $0a,$0d,">",$00
.txt_msg_unknown_cmd	!text $0a,$0d,"unknown command (try 'help')",$00
; .txt_msg_param_error	!text $0a,$0d,"parameter error",$0a,$0d,$00


; .atoi
; 	cmp #"9"+1
; 	bcc + 	; 0-9?
; 	; must be hex digit
; 	adc #$08
; 	and #$0f
; 	rts

; +	sec
; 	sbc #$30
; 	rts



; !src <util.a>

strout:
	pha
	phy

	ldy #$00
-	lda (msgptr),y
	beq +	
	sta chrout
	iny
	bne -
+
	ply
	pla
	rts

getkey:
	lda chrin
	rts

keyin:
-	jsr getkey
	cmp #$00
	beq -
	rts



.ls
.dir
.cd
.run
.load
.type
	ldy #$00
-	lda (paramptr),y
	beq +
	sta chrout
	iny
	bne -
+

	jmp mainloop

	

.hello
	+ShellPrintString .crlf
	+ShellPrintString .hellotxt
	; +ShellPrintString .helptxt
	jmp mainloop

.help
	+ShellPrintString .crlf
	
	+ShellPrintString .helptxt1
	
	jmp mainloop
