!initmem $ff
!cpu 65c02
!src "defs.h.a"
!src "via.h.a"
!src "sdcard.h.a"
!src "uart.h.a"
!src "lcd.h.a"
!src "../vdp/t9929.h.a"
*= $e000			; ROM Start
!src "../charsets/char.ascii.vc20.h.a"

biosversion	!text "V0501", $00	; Version String

start_msg
!text "SteckBIOS 0.1", $0d
!text "BIOS    : V0501a", $0d
;!text "Clock   :", $0d
!text "RAM end : ", $0
ready_msg
!text $0d,$0d,"READY.", $0d
!text $0
crlf	!byte $0d, $00
*=$f000
!src "../vdp/t99xx.lib.a"


.upload
			; ldx #$00
			; ldy #$01
			; jsr i_lcdxy

			; lda #$c0
			; sta lcdctl
			; jsr i_lcdbusy

			; load start address
			jsr i_uart_rx
			sta startaddr
			
			jsr i_uart_rx
			sta startaddr+1


			lda startaddr+1
			; jsr i_lcdhex
			jsr i_hexout
			lda startaddr
			; jsr i_lcdhex
			jsr i_hexout

			lda #' '
			; jsr lcdprint
			jsr chrout

			lda #'O'
			jsr i_uart_tx
			lda #'K'
			jsr i_uart_tx

			; +PrintChar 'O'
			; +PrintChar 'K'

			;jsr strout

			; load number of bytes to be uploaded
			jsr i_uart_rx
			sta length
			
			jsr i_uart_rx
			sta length+1

			lda length+1
			; jsr i_lcdhex
			jsr i_hexout

			lda length
			; jsr i_lcdhex
			jsr i_hexout
			
			lda #' '
			; jsr lcdprint
			jsr chrout

			; calculate end address
			clc
			lda length
			adc startaddr
			sta endaddr

			lda length+1
			adc startaddr+1
			sta endaddr+1

			lda endaddr+1
			; jsr i_lcdhex
			jsr i_hexout

			lda endaddr
			; jsr i_lcdhex
			jsr i_hexout
			
			lda #' '
			; jsr lcdprint
			jsr chrout

			lda startaddr
			sta addr
			lda startaddr+1
			sta addr+1	

			lda #'O'
			jsr i_uart_tx
			lda #'K'
			jsr i_uart_tx

			; +PrintChar 'O'
			; +PrintChar 'K'

			ldy #$00
-			jsr i_uart_rx
			sta (addr),y

			iny	
			cpy #$00
			bne +
			inc addr+1
+		

			; msb of current address equals msb of end address?
			lda addr+1
			cmp endaddr+1
			bne - ; no? read next byte

			; yes? compare y to lsb of endaddr
			cpy endaddr
			bne - ; no? read next byte

			; yes? write OK and jump to start addr	

			lda #'O'
			jsr i_uart_tx
			lda #'K'
			jsr i_uart_tx

			; +PrintChar 'O'
			; +PrintChar 'K'


;			cli
			rts
			
;----------------------------------------------------------------------------------------------
; RESET Routine. Call subroutines to init all components 
;----------------------------------------------------------------------------------------------
.start_check = $0300
.do_reset
			; disable interrupt
			sei

			; clear decimal flag
			cld

			; init stack pointer
			ldx #$ff
			txs

   			; Check zeropage and Memory
.check_zp
		    ; Start at $ff
			ldy #$ff
			; Start with pattern $03 : $ff
-			ldx #.num_patterns
--			lda .pattern,x
			sta $00,y

			cmp $00,y
			bne +

			dex
			bne --

			dey
			bne -

.check_stack
			ldy #$ff
-			ldx #.num_patterns
--			lda .pattern,x
			sta $0100,y
			cmp $0100,y
			bne +

			dex
			bne --

			dey
			bne --	

			; Copy self modifying memcheck routine to ZP
			ldx #.selfmod_end - .selfmod_start
-			lda .selfmod_start - 1, x
			sta <.target - 1, x
			dex
			bne -
 			jmp .target ; Execute memcheck routine in ZP

			; Broken ZP or stack

+			txa
			jsr lcdclear
			jsr lcdhex
-			jmp -

.back_from_memcheck

			stz chn_out
			stz chn_in 

			; init VDP
			+SetVector vdp_init_bytes,	adrl
			jsr vdp_init_reg

			jsr	vdp_clear_vram
			jsr vdp_clear_screen
			jsr vdp_load_charset
			jsr vdp_color


			
			; init IO devices
			jsr init_lcd
			jsr init_via1
			jsr init_uart

			; Set IRQ Vector
			+SetVector .irqhandler, irqvec

			lda #dev_lcd
			sta chn_out

			lda #'$'
			jsr chrout

			lda ram_end_l
			jsr hexout
			lda ram_end_h
			jsr hexout

			+PrintStringAt biosversion, $00, $02
			
			+SetVector start_msg, msgptr
			jsr	vdp_print

			stz chn_out
			
			lda #'$'
			jsr chrout

			lda ram_end_l
			jsr hexout
			lda ram_end_h
			jsr hexout

			+SetVector crlf, msgptr
			jsr	vdp_print


			lda	#v_reg1_16k|v_reg1_display_on;v_reg1_int
			ldy	#v_reg1
			jsr	vdp_sreg

			jsr init_sdcard

			lda sd_cmd_errno
			beq +
			ldy #$01
			ldx #$00
			jsr lcdxy
			; SD Card init failed
			cmp #$ff
			bne ++

			lda #dev_lcd
			sta chn_out 
			+PrintString nocard			
			jsr vdp_print
			

++			cmp #$0f
			bne ++
			+PrintString invalidcard
			jsr vdp_print

++			cmp #$1f
			bne ++
			+PrintString initfail
			jsr vdp_print
			bra ++

+			+SetVector cardok, msgptr
			jsr	vdp_print
		
++

			+SetVector ready_msg, msgptr
			jsr	vdp_print
			
			jsr .upload
			
			; re-init stack pointer
			ldx #$ff
			txs

			

			; jump to new code
			jmp (startaddr)
	

;----------------------------------------------------------------------------------------------
; IO_NMI Routine. Handle NMI
;----------------------------------------------------------------------------------------------
.do_nmi 
			
			; pha
			; jsr lcdclear

			; jsr lcdhex
			
			; lda #' '
			; jsr lcdprint
			
			; txa
			; jsr lcdhex

			; lda #' '
			; jsr lcdprint


			; tya
			; jsr lcdhex

		
			; pla
			jmp .do_reset
			rti

;----------------------------------------------------------------------------------------------
; IO_IRQ Routine. Handle IRQ
;----------------------------------------------------------------------------------------------
.do_irq
			jmp (irqvec)
			

.irqhandler
			pha
			phy
			lda a_vreg

			jsr vdp_cursor
			pla
			ply
			rti

;----------------------------------------------------------------------------------------------
; IO Wrapper
;----------------------------------------------------------------------------------------------
.chrin
		pha
		lda chn_in
		bne +  ; $00 - keyboard
		pla
		jmp .kbd_chrin
+		cmp #$01
		bne +
		pla
		jmp i_uart_rx
+
		pla
		rts
;----------------------------------------------------------------------------------------------
; Output character on active output device
;----------------------------------------------------------------------------------------------
i_chrout
		pha
		lda chn_out
		bne +
		pla
		jmp	vdp_chrout

+		; LCD
		cmp #$01
		bne +
		pla
		jmp i_lcdprint

+		; UART
		cmp #$02
		bne +

		pla
		jmp i_uart_tx

+		
		rts
;----------------------------------------------------------------------------------------------
; Output string on active output device
;----------------------------------------------------------------------------------------------
i_strout 	pha                 ;save a, y to stack
			lda #chn_out
			bne +

			pla
			jmp vdp_print

+			phy

			ldy #$00
-		  	lda (msgptr),y
			beq +
			jsr i_chrout
			iny
			bne -

+			ply                 ;restore a, y
			pla
			rts

;----------------------------------------------------------------------------------------------
; Output byte as hex string on active output device
;----------------------------------------------------------------------------------------------
i_hexout    pha
			phy
			phx
			
			tax
			lsr                ;shift high nybble into low nybble
			lsr 
			lsr 
			lsr 
			tay
			lda hexascii,y      ;convert to ascii
			jsr i_chrout        ;print value 
			
			txa                 ;restore original value
			and #$0f            ;select low nybble
			tay
			lda hexascii,y      ;convert to ascii
			jsr i_chrout        ;print value 
			
			plx
			ply
			pla
			rts

			
vdp_clear_vram:
	lda #$00
	ldy	$00+$40
	lda #$00
	sta adrl
	ldx	#$40
	jmp vdp_fill	;clear vram

;----------------------------------------------------------------------------------------------
; clear VDP Screen
;----------------------------------------------------------------------------------------------
vdp_clear_screen:
	lda	#$20
	sta	adrl
   lda   #$00
   ldy   #$18+$40
   ldx	 #$03
	jmp 	vdp_fill

;----------------------------------------------------------------------------------------------
; Load Charset into VDP VRAM
;----------------------------------------------------------------------------------------------
vdp_load_charset:
   +SetVector charset, adrl
   lda   #$00
   ldy   #$00+$40
   ldx	 #$08
   jmp 	 vdp_memcpy

;----------------------------------------------------------------------------------------------
; Set Text Color
;----------------------------------------------------------------------------------------------
vdp_color:
   lda   #$00
   ldy   #$60
   jsr   vdp_sreg
   ldx   #$00
   ldy   #TEXT_COLOR<<4|Transparent
-  +nops VRAM_WAIT
   sty   a_vram
   inx
   cpx   #$20
   bne   -
   rts


;----------------------------------------------------------------------------------------------
; Write to VDP VRAM
;----------------------------------------------------------------------------------------------
vdp_write:
   lda   #$00
   ldy   #$18+$40
   jsr   vdp_sreg
   ldy   #$00
-  lda   (msgptr),y
   beq   +
   +nops VRAM_WAIT
   sta   a_vram
   iny
   bne   -
+  rts

;----------------------------------------------------------------------------------------------
; Display Cursor
;----------------------------------------------------------------------------------------------
vdp_cursor:
   lda   #$20
   ldy   #$54
   jsr   vdp_sreg
   lda   crs_x
   and   #$10
   beq   +
   lda   #231
   jmp   ++
+  lda   #' '
++ sta   a_vram
   inc   crs_x
   rts
;----------------------------------------------------------------------------------------------



!src "via.a"



!src "lcd.a"


;----------------------------------------------------------------------------------------------
; LCDDECZ - output byte in A as decimal ASCII with leading zeros
;----------------------------------------------------------------------------------------------
i_decoutz
   phx
   phy
   ldx #2
   ldy #$4c
-- sty tmp0
   lsr
-  rol
   bcs +
   cmp dec_tbl,x
   bcc ++
+  sbc dec_tbl,x
   sec
++ rol tmp0
   bcc -
   tay
   lda tmp0
   jsr i_chrout
   tya
   ldy #$13
   dex
   bpl --
   ply
   plx
   rts

;----------------------------------------------------------------------------------------------
; LCDDEC - output byte in A as decimal ASCII without leading zeros
;----------------------------------------------------------------------------------------------
i_decout
   phx
   phy
   ldx #1
   stx tmp1
   inx
   ldy #$40
-- sty tmp0
   lsr
-  rol
   bcs ++
   cmp dec_tbl,x
   bcc +
++ sbc dec_tbl,x
   sec
+  rol tmp0
   bcc -
   tay
   cpx tmp1
   lda tmp0
   bcc +
   beq ++
   stx tmp1
+  eor #$30
   jsr i_chrout
++ tya
   ldy #$10
   dex
   bpl --
   ply
   plx

   rts

!src "uart.a"
!src "spi.a"
!src "sdcard.a"


;---------------------------------------------------------------------
; enable keyboard controller on SPI bus
;---------------------------------------------------------------------
.kbd_enable
	pha
	; Select SPI SS for keyboard
	lda #%01111010
	; and via1portb
	sta via1portb

	lda #$7f
	and kbd_flg
	sta kbd_flg

	pla
	rts

;---------------------------------------------------------------------
; disable keyboard controller on SPI bus
;---------------------------------------------------------------------
.kbd_disable
	pha

	; Deselect any SPI devices
	lda #%11111110
	sta via1portb
	
	pla
	rts

;---------------------------------------------------------------------
; get key from keyboard, wait if $00
;---------------------------------------------------------------------
.kbd_chrin
-
	jsr .kbd_enable	
	jsr i_spi_r_byte
	jsr .kbd_disable
	beq -
	rts


;----------------------------------------------------------------------------------------------
; Tables and lookup data
;----------------------------------------------------------------------------------------------
; Lookup table for HEX to ASCII
hexascii	!text "0123456789ABCDEF"

; Lookup table for decimal to ASCII
dec_tbl		!byte 128,160,200

; SD Card init status messages
cardok		!text "SD Card OK", $00
nocard		!text "NO SD Card ", $00
invalidcard	!text "Invalid SD Card!", $00
initfail	!text "SD Init failed!", $00

;----------------------------------------------------------------------------------------------
;	divisor values for 1.8432 MHz Crystal
;	value		; baud	; #
uart_divisor	
	!word -1 	; dunno	; 0
	!word 2304	; 50	; 1
	!word 1536	; 75	; 2	
	!word 1047	; 110	; 3
	!word 857	; 134.5	; 4
	!word 768	; 150	; 5
	!word 384 	; 300	; 6
	!word 192	; 600	; 7
	!word 96	; 1200	; 8
	!word 64	; 1800	; 9
	!word 58	; 2000	; 10
	!word 48	; 2400	; 11
	!word 32	; 3600	; 12
	!word 24	; 4800	; 13
	!word 16	; 7200	; 14
	!word 12	; 9600	; 15
	!word 6		; 19200	; 16
	!word 3		; 38400	; 17
	!word 2		; 56000	; 18
	!word 1 	; 115200; 19
;----------------------------------------------------------------------------------------------

;----------------------------------------------------------------------------------------------
; VDP initialisation data
;----------------------------------------------------------------------------------------------
vdp_init_bytes	
	!byte 0
	!byte v_reg1_16k
	!byte ($1800 / $400)	; name table - value * $400
	!byte ($2000 / $40)	; color table - value * $40 (gfx1), 7f/ff (gfx2)
	!byte ($0000 / $800) ; pattern table (charset) - value * $800  --> offset in VRAM 
	!byte ($2800 / $80)	; sprite attribute table - value * $80 --> offset in VRAM 
	!byte ($0000 / $800)	; sprite pattern table - value * $800  --> offset in VRAM 
	!byte TEXT_BGCOLOR

;----------------------------------------------------------------------------------------------
; Memcheck routine to be copied to ZP
;----------------------------------------------------------------------------------------------
.num_patterns = $03
.pattern  !byte $aa,$55,$ff,$00

.selfmod_start
!pseudopc $0000 {
.target
      stz ram_end_h
      
-     ldx #.num_patterns
--    lda .pattern,x
a     sta .start_check   ; Start at $0200. skip stack for now      
b     cmp .start_check
      bne +
      
      dex 
      bne --

      inc a+1
      inc b+1
      bne -

      ;inc a+2
      ;inc b+2

      ; Stop at $e000 to prevent overwriting BIOS Code when ROMOFF
      ldx a+2
      inx
      stx a+2
      stx b+2
      cpx #$e0
      
      bne -

+	  
	  lda a+2
	  sta ram_end_l
	  lda a+1
	  sta ram_end_h

      jmp .back_from_memcheck
}
.selfmod_end

;----------------------------------------------------------------------------------------------
; Jump table
;----------------------------------------------------------------------------------------------
*=$ff00
sys_chrout
chrout		jmp i_chrout
sys_chrin
chrin		jmp .chrin
sys_lcdclear
lcdclear	jmp i_lcdclear
sys_lcdprint
lcdprint 	jmp i_lcdprint
sys_lcdstring
lcdstring 	jmp i_lcdstring
sys_lcdhex
lcdhex 		jmp i_lcdhex 
sys_decout
decout 		jmp i_decout
sys_decoutz
decoutz 	jmp i_decoutz
sys_irqhandler
irqhandler  jmp .irqhandler
sys_lcdbusy
lcdbusy 	jmp i_lcdbusy
sys_lcdxy
lcdxy 		jmp i_lcdxy

sys_spi_rw_byte	
spi_rw_byte	jmp i_spi_rw_byte

sys_spi_r_byte	
spi_r_byte	jmp i_spi_r_byte

sys_upload	jmp .upload

sys_sd_write_block
sd_write_block 	jmp i_sd_write_block

sys_sd_read_block
sd_read_block 	jmp i_sd_read_block

sys_sd_param_init
sd_param_init 	jmp i_sd_param_init

sys_sd_deselect_card
sd_deselect_card 	jmp i_sd_deselect_card
sys_sd_select_card
sd_select_card 	jmp i_sd_select_card
sys_sd_cmd
sd_cmd 		jmp i_sd_cmd
sys_strout
strout 		jmp i_strout
sys_hexout
hexout 		jmp i_hexout

;----------------------------------------------------------------------------------------------

;----------------------------------------------------------------------------------------------
; Interrupt vectors
;----------------------------------------------------------------------------------------------
; $FFFA/$FFFB NMI Vector
*= $fffa
!word .do_nmi
; $FFFC/$FFFD reset vector
;*= $fffc
!word .do_reset
; $FFFE/$FFFF IRQ vector
;*= $fffe
!word .do_irq
