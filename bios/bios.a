!initmem $ff
!cpu 65c02
!src "defs.h.a"
!src "../vdp/t9929.h.a"
*= $e000			; ROM Start
!src "../charsets/char.ascii.c64.h.a"
!text "This space intentionally left blank", $00
startmsg
!text "STECKSCHWEIN 1.0                ", $00
!text "Thomas Woinke", $0a, $0d, $00
!text "Marko Lauke", $0a, $0d, $00

*=$f000
upload
			ldx #$00
			ldy #$01
			jsr i_lcdxy

			lda #$c0
			sta lcdctl
			jsr i_lcdbusy

			; load start address
			jsr chrin
			sta startaddr
			
			jsr chrin
			sta startaddr+1


			lda startaddr+1
			jsr i_lcdhex
			lda startaddr
			jsr i_lcdhex

			lda #' '
			jsr lcdprint

			+PrintChar 'O'
			+PrintChar 'K'

			;jsr strout

			; load number of bytes to be uploaded
			jsr chrin
			sta length
			
			jsr chrin
			sta length+1

			lda length+1
			jsr i_lcdhex

			lda length
			jsr i_lcdhex
			
			lda #' '
			jsr lcdprint

			; calculate end address
			clc
			lda length
			adc startaddr
			sta endaddr

			lda length+1
			adc startaddr+1
			sta endaddr+1

			lda endaddr+1
			jsr i_lcdhex

			lda endaddr
			jsr i_lcdhex
			
			lda #' '
			jsr lcdprint

			lda startaddr
			sta addr
			lda startaddr+1
			sta addr+1	

			+PrintChar 'O'
			+PrintChar 'K'

			ldy #$00
-			jsr chrin
			sta (addr),y

			iny	
			cpy #$00
			bne +
			inc addr+1
+		

			; msb of current address equals msb of end address?
			lda addr+1
			cmp endaddr+1
			bne - ; no? read next byte

			; yes? compare y to lsb of endaddr
			cpy endaddr
			bne - ; no? read next byte

			; yes? write OK and jump to start addr	
			+PrintChar 'O'
			+PrintChar 'K'

			; re-init stack pointer
			ldx #$ff
			txs

			cli
			rts
			
;----------------------------------------------------------------------------------------------
; RESET Routine. Call subroutines to init all components 
;----------------------------------------------------------------------------------------------
do_reset
			; disable interrupt
			sei

			; clear decimal flag
			cld

			; init stack pointer
			ldx #$ff
			txs

			; init VDP
			jsr vdp_init	
			jsr vdp_clear_vram	

			jsr vdp_clear_screen
			jsr vdp_load_charset
			jsr vdp_color


			lda	#v_reg1_16k|v_reg1_display_on|v_reg1_int
			ldy	#v_reg1
			jsr	vdp_sreg

			; init IO devices
			jsr init_lcd
			jsr init_via1
			jsr init_uart



			; Set IRQ Vector
			+SetVector i_irqhandler, irqvec

			
;			cli

;	Memcheck disabled for now
;			jsr memcheck

			ldy #$02
			ldx #$00
			jsr lcdxy

			+SetVector biosversion, msgptr

			jsr lcdstring
			jsr vdp_write	

			jsr upload
			; jump to new code
			jmp (startaddr)
	
; adrl	   =$00
; adrh	   =$01

memcheck:
	+PrintChar '$'

	lda   #$00
	sta   adrl
	lda   #$03
	sta   adrh
	ldy   #$00
	jsr   mem_ca
	ldx   #$00
-	
	lda   pattern, x
	sta   (adrl),y
	lda   (adrl),y
	cmp   pattern, x
	bne   +
	inx
	cpx   #$0a
	bne   -
	ldx   #$00
	iny
	bne   -
	inc   adrh
	jsr   mem_ca
	jmp   -
+	pha            ;save erroneous pattern
	jsr   mem_ca
	lda   #$20
	jsr   lcdprint   
	
	+PrintChar '$'
	
	pla   
	jsr   lcdhex
	rts

mem_ca:
	phx
	phy
	ldx #$01
	ldy #$01
	jsr lcdxy
	plx
	ply


	tya            ;save adress low byte
	pha
;	jsr   lcdclear
	lda   adrh
	jsr   lcdhex
	pla
	jsr   lcdhex
	rts
pattern  !byte $f0,$0f,$5a,$aa,$00,$ff

;----------------------------------------------------------------------------------------------
; IO_NMI Routine. Handle NMI
;----------------------------------------------------------------------------------------------
do_nmi 
			;jmp read_data
			rti

;----------------------------------------------------------------------------------------------
; IO_IRQ Routine. Handle IRQ
;----------------------------------------------------------------------------------------------
do_irq
			jmp (irqvec)
			

i_irqhandler
			pha
			phy
			lda a_vreg

			jsr vdp_cursor
			pla
			ply
			rti


;----------------------------------------------------------------------------------------------
; init VDP, set memory map
;----------------------------------------------------------------------------------------------
vdp_init:
		ldx   	#$00
		ldy		#$80
-  		lda   	vdp_init_bytes,x
		jsr		vdp_sreg	; write data to vdp - write the register number to vdp, 80 - reg0 , 81 - reg1 ... see datasheet page 4.1
		iny
		inx
		cpx   #$08
		bne   -
		rts

vdp_sreg:
		sta   a_vreg
		sty   a_vreg
   		rts

;----------------------------------------------------------------------------------------------
; clear VDP VRAM
;----------------------------------------------------------------------------------------------
vdp_clear_vram:
   lda   #$00
   ldy   #$40
   jsr   vdp_sreg
   lda   #$00
   ldx   #$00
   ldy   #$00
-
   +nops VRAM_WAIT
   sta   a_vram
   inx
   bne   -
   iny
   cpy   #$40
   bne   -
   rts

;----------------------------------------------------------------------------------------------
; clear VDP Screen
;----------------------------------------------------------------------------------------------
vdp_clear_screen:
   lda   #$00
   ldy   #$54
   jsr   vdp_sreg
   lda   #$20
   ldx   #$00
   ldy   #$00
- 
   +nops VRAM_WAIT
   sta   a_vram
   inx   
   bne   -
   iny
   cpy   #$04
   bne   -
   rts

;----------------------------------------------------------------------------------------------
; Load Charset into VDP VRAM
;----------------------------------------------------------------------------------------------
vdp_load_charset:

   +SetVector charset, adrl
 	
   lda   #$00
   ldy   #$40
   jsr   vdp_sreg
   ldx   #$00; page counter   
   ldy   #$00
-  
   +nops VRAM_WAIT
   lda   (adrl),y
   sta   a_vram
   iny
   bne   -
   inc   adrh
   inx   
   cpx   #$08     ;2k charset - $0800
   bne   -
   rts

;----------------------------------------------------------------------------------------------
; Set Text Color
;----------------------------------------------------------------------------------------------
vdp_color:
   lda   #$00
   ldy   #$60
   jsr   vdp_sreg
   ldx   #$00
   ldy   #TEXT_COLOR<<4|Transparent
-  +nops VRAM_WAIT
   sty   a_vram
   inx
   cpx   #$20
   bne   -
   rts


;----------------------------------------------------------------------------------------------
; Write to VDP VRAM
;----------------------------------------------------------------------------------------------
vdp_write:
   lda   #$00
   ldy   #$54
   jsr   vdp_sreg
   ldy   #$00
-  
   
   nop
   lda   (msgptr),y
   beq   +
   sta   a_vram
   iny
   bne   -
+  rts

;----------------------------------------------------------------------------------------------
; Display Cursor
;----------------------------------------------------------------------------------------------
vdp_cursor:
   lda   #$20
   ldy   #$54
   jsr   vdp_sreg
   lda   crs_x
   and   #$10
   beq   +
   lda   #231
   jmp   ++
+  lda   #' '
++ sta   a_vram
   inc   crs_x
   rts
;----------------------------------------------------------------------------------------------



;----------------------------------------------------------------------------------------------
; init VIA1 - set all ports to input
;----------------------------------------------------------------------------------------------
init_via1
			pha
			; VIA1
			lda #%00000000
			sta via1ddra
			sta via1ddrb

			lda #$00
			sta via1ier             ; enable VIA1 T1 interrupts

			; SR shift in, External clock on CB1
			lda #%00001100
			sta via1acr

			; Port b all outputs
			lda #$ff
			sta via1ddrb

			; SPICLK low, MOSI low, SPI_SS HI
			lda #%01111110
			sta via1portb


			; lda #<count
			; sta via1t1cl            ; set low byte of count
			; lda #>count
			; sta via1t1ch            ; set high byte of count
			
			; lda #%11000000
			; sta via1ier             ; enable VIA1 T1 interrupts

			; lda #%01000000
		 ; 	sta via1acr             ; T1 continuous, PB7 disabled
		 	
		 	pla
		 	rts

;----------------------------------------------------------------------------------------------
; init UART
;----------------------------------------------------------------------------------------------
init_uart
	; ok, we detected a 16550A, i.e. a chip 
	; with working FIFO
	lda #%10000000
	sta uart1lcr

	ldx #19*2	; 115200 BAUD

;	ldx #17*2	; 38400 BAUD
;	ldx #15*2	; 9600 BAUD
;	ldx #11*2	; 2400 BAUD

	lda uart_divisor,x
	sta uart1dll	

	lda uart_divisor+1,x
	sta uart1dlh

	lda #%00000011	; 8N1

	sta uart1lcr

	lda #$00
	sta uart1fcr	; FIFO off
	sta uart1ier	; polled mode (so far) 
	sta uart1mcr	; reset DTR, RTS

	and #%00001100			; keep OUT1, OUT2 values
	sta uart1mcr		; reset DTR, RTS
	clc

	rts

;----------------------------------------------------------------------------------------------
; *** LCD initialisation
;----------------------------------------------------------------------------------------------
init_lcd  	ldx #$04            ;do function set 4 times
-		  	lda #$38            ;function set: 8 bit, 2 lines, 5x7
			sta lcdctl
			jsr i_lcdbusy         ;wait for busy flag to clear
			dex
			bne -
			lda #$06            ;entry mode set: increment, no shift
			sta lcdctl
			jsr i_lcdbusy
			lda #$0e            ;display on, cursor on, blink off
			sta lcdctl
			jsr i_lcdbusy
			lda #$01            ;clear display
			sta lcdctl
			jsr i_lcdbusy
			lda #$80            ;ddram address set: $00
			sta lcdctl
			jsr i_lcdbusy
			rts

; *** Clear LCD display and return cursor to home
; registers preserved
i_lcdclear  pha
			lda #$01
			sta lcdctl
			jsr i_lcdbusy
			lda #$80
			sta lcdctl
			jsr i_lcdbusy
			pla
			rts

; *** Wait for LCD busy bit to clear
; registers preserved
i_lcdbusy   pha
-			lda lcdctl            ;read from lcd register 0
			and #$80            ;check bit 7 (busy)
			bne -
			pla
			rts



; *** Print character on LCD (40 character)
; registers preserved
i_lcdprint  pha
			sta lcddata            ;output the character
			jsr i_lcdbusy
			lda lcdctl            ;get current ddram address
			and #$7f
			cmp #$28          	;wrap from pos $13 (line 1 char 20)...
			bne +
			lda #$c0            	;...to $40 (line 2 char 1)
			sta lcdctl
			jsr i_lcdbusy
+			pla
			rts

; *** print string on lcd
; registers preserved
i_lcdstring pha                 ;save a, y to stack
			tya
			pha
			ldy #$00
-		  	lda (msgptr),y
			beq +
			jsr lcdprint
			iny
			bne -
+			pla                 ;restore a, y
			tay
			pla
			rts

; *** Print 2 digit hex number on LCD
; A, X registers preserved
i_lcdhex    pha
			phy
			phx
			
			tax
			lsr                ;shift high nybble into low nybble
			lsr 
			lsr 
			lsr 
			tay
			lda hexascii,y      ;convert to ascii
			jsr lcdprint        ;print value on the lcd
			
			txa                 ;restore original value
			and #$0f            ;select low nybble
			tay
			lda hexascii,y      ;convert to ascii
			jsr lcdprint        ;print value on the lcd
			
			plx
			ply
			pla
			rts

;----------------------------------------------------------------------------------------------
; lcdxy 
; Set LCD-Cursor to position
; row in Y, col in X
;----------------------------------------------------------------------------------------------

i_lcdxy
	pha

	lda #$80
	sta tmp0

	cpy #$02
	bne +
	lda #$c0
	sta tmp0
+
	txa
	clc
	adc tmp0

	sta lcdctl
	jsr lcdbusy

	pla
	rts
;----------------------------------------------------------------------------------------------



;----------------------------------------------------------------------------------------------
; send byte in A 
;----------------------------------------------------------------------------------------------
i_uart_tx
	pha


-	lda uart1lsr
	and #$20
	beq -

	pla 

	sta uart1rxtx

	rts

;----------------------------------------------------------------------------------------------

;----------------------------------------------------------------------------------------------
; receive byte, store in A 
;----------------------------------------------------------------------------------------------
i_uart_rx
-	lda uart1lsr 
	and #$1f
	cmp #$01
	bne -
	
	lda uart1rxtx
 
	rts

;----------------------------------------------------------------------------------------------
; LCDDECZ - output byte in A as decimal ASCII with leading zeros
;----------------------------------------------------------------------------------------------
i_lcddecz
   phx
   phy
   ldx #2
   ldy #$4c
-- sty tmp0
   lsr
-  rol
   bcs +
   cmp dec_tbl,x
   bcc ++
+  sbc dec_tbl,x
   sec
++ rol tmp0
   bcc -
   tay
   lda tmp0
   jsr lcdprint
   tya
   ldy #$13
   dex
   bpl --
   ply
   plx
   rts

;----------------------------------------------------------------------------------------------
; LCDDEC - output byte in A as decimal ASCII without leading zeros
;----------------------------------------------------------------------------------------------
i_lcddec
   phx
   phy
   ldx #1
   stx tmp1
   inx
   ldy #$40
-- sty tmp0
   lsr
-  rol
   bcs ++
   cmp dec_tbl,x
   bcc +
++ sbc dec_tbl,x
   sec
+  rol tmp0
   bcc -
   tay
   cpx tmp1
   lda tmp0
   bcc +
   beq ++
   stx tmp1
+  eor #$30
   jsr lcdprint
++ tya
   ldy #$10
   dex
   bpl --
   ply
   plx

   rts

;----------------------------------------------------------------------------------------------
; Transmit byte VIA SPI
; Byte to transmit in A, received byte in A at exit
; Destructive: A,X,Y
;----------------------------------------------------------------------------------------------
i_spi_rw_byte
	sta tmp0	; zu transferierendes byte im akku nach tmp0 retten

	ldx #$08
	
	lda via1portb	; Port laden
	and #$fe        ; SPICLK loeschen

	asl		; Nach links rotieren, damit das bit nachher an der richtigen stelle steht
	tay		 ; bunkern

-	
	rol tmp0
	tya		; portinhalt
	ror		; datenbit reinschieben

	sta via1portb	; ab in den port
	inc via1portb	; takt an
	sta via1portb	; takt aus 

	dex
	bne -		; schon acht mal?
	
	lda via1sr	; Schieberegister auslesen

	rts

;----------------------------------------------------------------------------------------------
; Receive byte VIA SPI
; Received byte in A at exit
; Destructive: A,Y
;----------------------------------------------------------------------------------------------
	
i_spi_r_byte
       lda via1portb   ; Port laden
       AND #$7e  ;    * Daten und Takt ausschalten
       TAY             ; aufheben
       ORA #$01

       STA via1portb ; Takt An 1
       STY via1portb ; Takt aus
       STA via1portb ; Takt An 2
       STY via1portb ; Takt aus
       STA via1portb ; Takt An 3
       STY via1portb ; Takt aus
       STA via1portb ; Takt An 4
       STY via1portb ; Takt aus
       STA via1portb ; Takt An 5
       STY via1portb ; Takt aus
       STA via1portb ; Takt An 6
       STY via1portb ; Takt aus
       STA via1portb ; Takt An 7
       STY via1portb ; Takt aus
       STA via1portb ; Takt An 8
       STY via1portb ; Takt aus

       lda via1sr
       rts

;----------------------------------------------------------------------------------------------
; Tables and lookup data
;----------------------------------------------------------------------------------------------
; Lookup table for HEX to ASCII
hexascii	!text "0123456789ABCDEF"

; Lookup table for decimal to ASCII
dec_tbl		!byte 128,160,200

; Version String
biosversion	!text "V0409 VDP", $00

;----------------------------------------------------------------------------------------------
;	divisor values for 1.8432 MHz Crystal
;	value		; baud	; #
uart_divisor	
	!word -1 	; dunno	; 0
	!word 2304	; 50	; 1
	!word 1536	; 75	; 2	
	!word 1047	; 110	; 3
	!word 857	; 134.5	; 4
	!word 768	; 150	; 5
	!word 384 	; 300	; 6
	!word 192	; 600	; 7
	!word 96	; 1200	; 8
	!word 64	; 1800	; 9
	!word 58	; 2000	; 10
	!word 48	; 2400	; 11
	!word 32	; 3600	; 12
	!word 24	; 4800	; 13
	!word 16	; 7200	; 14
	!word 12	; 9600	; 15
	!word 6		; 19200	; 16
	!word 3		; 38400	; 17
	!word 2		; 56000	; 18
	!word 1 	; 115200; 19
;----------------------------------------------------------------------------------------------

;----------------------------------------------------------------------------------------------
; VDP initialisation data
;----------------------------------------------------------------------------------------------
vdp_init_bytes	
	!byte 0
	!byte v_reg1_16k|v_reg1_int
	!byte ($1400 / $400)	; name table - value * $400
	!byte ($2000 / $40)	; color table - value * $40 (gfx1), 7f/ff (gfx2)
	!byte ($0000 / $800) ; pattern table (charset) - value * $800  --> offset in VRAM 
	!byte ($2800 / $80)	; sprite attribute table - value * $80 --> offset in VRAM 
	; !byte ($0000 / $800)	; sprite pattern table - value * $800  --> offset in VRAM 
	!byte $00
	!byte TEXT_BGCOLOR

;----------------------------------------------------------------------------------------------
; Jump table
;----------------------------------------------------------------------------------------------
*=$ff00
sys_chrout
chrout		jmp i_uart_tx
sys_chrin
chrin		jmp i_uart_rx
sys_lcdclear
lcdclear	jmp i_lcdclear
sys_lcdprint
lcdprint 	jmp i_lcdprint
sys_lcdstring
lcdstring 	jmp i_lcdstring
sys_lcdhex
lcdhex 		jmp i_lcdhex 
sys_lcddec
lcddec 		jmp i_lcddec
sys_lcddecz
lcddecz 	jmp i_lcddecz
sys_irqhandler
irqhandler  jmp i_irqhandler
sys_lcdbusy
lcdbusy 	jmp i_lcdbusy
sys_lcdxy
lcdxy 		jmp i_lcdxy

sys_spi_rw_byte	
spi_rw_byte	jmp i_spi_rw_byte

sys_spi_r_byte	
spi_r_byte	jmp i_spi_r_byte

sys_upload	jmp upload

;----------------------------------------------------------------------------------------------

;----------------------------------------------------------------------------------------------
; Interrupt vectors
;----------------------------------------------------------------------------------------------
; $FFFA/$FFFB NMI Vector
*= $fffa
!word do_nmi
; $FFFC/$FFFD reset vector
;*= $fffc
!word do_reset
; $FFFE/$FFFF IRQ vector
;*= $fffe
!word do_irq
