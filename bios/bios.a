!initmem $ff
!cpu 65c02

!src <defs.h.a>
!src <via.h.a>
!src <sdcard.h.a>
!src <uart.h.a>
!src <lcd.h.a>
!src <fat32.h.a>
!src <params.h.a>
!address	.target = $00
!address	.nvram  = $0400
*= $e000			; ROM Start
charset_8x8
!src "../charsets/char.ascii.vc20.h.a"
;!align 255,0
charset_5x8
!src "../charsets/char.ascii.6x8.big.h.a"
biosversion	!text "V1505", $00	; Version String

.start_msg
!text "BIOS    : ", $0d
;!text "Clock   :", $0d
!text "RAM end : ", $0
.ready_msg
!text $0d,$0d,"READY.", $0d
!text $0
.crlf	!byte $0a, $0d, $00
*=$f050
!src "vdp.a"

.upload
			+Print .crlf
			+Print .serial_upload
			ldy #param_baud
			lda (paramvec),y
			jsr .hexout
			+Print .crlf

			; ldx #$00
			; ldy #$01
			; jsr .lcdxy

			; lda #$c0
			; sta lcdctl
			; jsr .lcdbusy

			; load start address
			jsr .uart_rx
			sta .startaddr
			
			jsr .uart_rx
			sta .startaddr+1


			lda .startaddr+1
			jsr .hexout
			lda .startaddr
			jsr .hexout

			lda #' '
			jsr chrout

			lda #'O'
			jsr .uart_tx
			lda #'K'
			jsr .uart_tx

			; load number of bytes to be uploaded
			jsr .uart_rx
			sta .length
				
			jsr .uart_rx
			sta .length+1

			; calculate end address
			clc
			lda .length
			adc .startaddr
			sta .endaddr

			lda .length+1
			adc .startaddr+1
			sta .endaddr+1

			lda .endaddr+1
			jsr .hexout

			lda .endaddr
			jsr .hexout
			
			lda #' '
			jsr chrout

			lda .startaddr
			sta .addr
			lda .startaddr+1
			sta .addr+1	

			lda #'O'
			jsr .uart_tx
			lda #'K'
			jsr .uart_tx

			ldy #$00
-			jsr .uart_rx
			sta (.addr),y

			iny	
			cpy #$00
			bne +
			inc .addr+1
+		

			; msb of current address equals msb of end address?
			lda .addr+1
			cmp .endaddr+1
			bne - ; no? read next byte

			; yes? compare y to lsb of endaddr
			cpy .endaddr
			bne - ; no? read next byte

			; yes? write OK and jump to start addr	

			lda #'O'
			jsr .uart_tx
			lda #'K'
			jsr .uart_tx

			lda #'O'
			jsr chrout
			lda #'K'
			jsr chrout

			rts
			
;----------------------------------------------------------------------------------------------
; RESET Routine. Call subroutines to init all components 
;----------------------------------------------------------------------------------------------
!address 	.start_check = $0300
.do_reset
			; disable interrupt
			sei

			; clear decimal flag
			cld

			; init stack pointer
			ldx #$ff
			txs

   			; Check zeropage and Memory
.check_zp
		    ; Start at $ff
			ldy #$ff
			; Start with pattern $03 : $ff
-			ldx #.num_patterns
--			lda .pattern,x
			sta addr($00),y

			cmp addr($00),y
			bne .zp_broken

			dex
			bne --

			dey
			bne -


.check_stack
			ldy #$ff
-			ldx #.num_patterns
--			lda .pattern,x
			sta addr($0100),y
			cmp addr($0100),y
			bne .stack_broken

			dex
			bne --

			dey
			bne --	


			; Copy self modifying memcheck routine to ZP
			ldx #.selfmod_end - .selfmod_start
-			lda .selfmod_start - 1, x
			sta addr(<(.target - 1)) , x
			dex
			bne -
 			jmp .target ; Execute memcheck routine in ZP

.mem_broken
 			lda #$c0
 			sta memctl
-			jmp -

			; Broken ZP 
.zp_broken	lda #$80
			sta memctl
-			jmp -

			; Broken stack
.stack_broken
			lda #$40
			sta memctl
-			jmp -




.back_from_memcheck

			+SetVector .default_params, paramvec
			; init IO devices
			jsr init_lcd
			jsr init_via1


			jsr .read_nvram


			jsr init_uart

			jsr	init_vdp
			
			; Set IRQ Vector
			+SetVector .irqhandler, irqvec

			+SetVector .lcdprint, outvec
			+SetVector .kbd_chrin, invec

			+PrintString biosversion

			+Print biosversion
			+Print .crlf
			
			; for testing purpose only, feel free...
; 			ldx	#$40
; -			txa
; 			jsr	vdp_chrout
; 			lda	#$0a
; 			jsr	vdp_chrout
; 			inx
; 			bne	-
			; end test


			
			; ldx #$06
			; jsr .lcdxy
			
			+SetVector vdp_chrout, outvec
			
			lda #'$'
			jsr chrout
			
			lda ram_end_l
			jsr .hexout
			lda ram_end_h
			jsr .hexout

			+Print .crlf

		
			; ldy #$02
			; ldx #$00
			; jsr .lcdxy

			jsr .init_sdcard

			lda sd_cmd_errno
			beq +

			; SD Card init failed
 			cmp #$ff
 			bne ++

			+Print .nocard               

++			cmp #$0f
 			bne ++




			+Print .invalidcard
++			cmp #$ef 
			bne ++
			+Print .unsupportedcard
++			cmp #$1f
			bne ++

			+Print .initfail

			bra ++


+
			jsr .boot_from_card

++			
			jsr .upload
			
			; re-init stack pointer
.startup	ldx #$ff
			txs

			

			; jump to new code
			jmp (.startaddr)

.boot_from_card
			+Print .bootup_txt

			lda #%01111110
			sta via1portb

			jsr .fat_mount
			lda fat_errno
			bne .fat_end


			; just use cluster_begin_lba if reading root dir cluster
			+Copy cluster_begin_lba, lba_addr, 4
			; +Copy root_dir_first_clus, cluster_number,4
			; Calculate cluster LBA address for anything else
			; jsr .calc_lba_addr

			jsr .fat_bootfile
	
.fat_end
			jsr .sd_deselect_card

			+Print .bootup_failed

++			rts
	

;----------------------------------------------------------------------------------------------
; IO_NMI Routine. Handle NMI
;----------------------------------------------------------------------------------------------
.do_nmi 
			; disable interrupt
			sei

			; clear decimal flag
			cld

			; init stack pointer
			ldx #$ff
			txs
		
			jmp .back_from_memcheck
;			rti

;----------------------------------------------------------------------------------------------
; IO_IRQ Routine. Handle IRQ
;----------------------------------------------------------------------------------------------
.do_irq
			jmp (irqvec)
			

.irqhandler
			rti

;----------------------------------------------------------------------------------------------
; IO Wrapper
;----------------------------------------------------------------------------------------------
; .chrin
; 		pha
; 		lda chn_in
; 		bne +  ; $00 - keyboard
; 		pla
; 		jmp .kbd_chrin
; +		cmp #dev_uart
; 		bne +
; 		pla
; 		jmp .uart_rx
; +
; 		pla
; 		rts
;----------------------------------------------------------------------------------------------
; Output character on active output device
;----------------------------------------------------------------------------------------------
; .chrout
; 		jmp (outvec)

;----------------------------------------------------------------------------------------------
; Output string on active output device
;----------------------------------------------------------------------------------------------
.strout 	pha                 ;save a, y to stack
			lda chn_out
			bne +

			pla
+			phy

			ldy #$00
-		  	lda (msgptr),y
			beq +
			jsr chrout
			iny
			bne -

+			ply                 ;restore a, y
			pla
			rts

;----------------------------------------------------------------------------------------------
; Output byte as hex string on active output device
;----------------------------------------------------------------------------------------------

.hexout
	pha
	phx

	tax
	lsr
	lsr
	lsr
	lsr				
	and     #%00001111      ;mask lsd for hex print
	ora     #"0"            ;add "0"
	cmp     #"9"+1          ;is it a decimal digit?
	bcc     +	            ;yes! output it
	adc     #6              ;add offset for letter a-f
+	jsr		chrout

	txa 
	and     #%00001111      ;mask lsd for hex print
	ora     #"0"            ;add "0"
	cmp     #"9"+1          ;is it a decimal digit?
	bcc     +	            ;yes! output it
	adc     #6              ;add offset for letter a-f
+	jsr		chrout

	plx
	pla
	rts

			

;----------------------------------------------------------------------------------------------
; LCDDECZ - output byte in A as decimal ASCII with leading zeros
;----------------------------------------------------------------------------------------------
.decoutz
   phx
   phy
   ldx #2
   ldy #$4c
-- sty tmp0
   lsr
-  rol
   bcs +
   cmp .dec_tbl,x
   bcc ++
+  sbc .dec_tbl,x
   sec
++ rol tmp0
   bcc -
   tay
   lda tmp0
   jsr chrout
   tya
   ldy #$13
   dex
   bpl --
   ply
   plx
   rts

;----------------------------------------------------------------------------------------------
; LCDDEC - output byte in A as decimal ASCII without leading zeros
;----------------------------------------------------------------------------------------------
.decout
   phx
   phy
   ldx #1
   stx tmp1
   inx
   ldy #$40
-- sty tmp0
   lsr
-  rol
   bcs ++
   cmp .dec_tbl,x
   bcc +
++ sbc .dec_tbl,x
   sec
+  rol tmp0
   bcc -
   tay
   cpx tmp1
   lda tmp0
   bcc +
   beq ++
   stx tmp1
+  eor #$30
   jsr chrout
++ tya
   ldy #$10
   dex
   bpl --
   ply
   plx

   rts

!src "via.a"
!src "lcd.a"
!src "uart.a"
!src "spi.a"
!src "sdcard.a"
!src "kbd.a"

;---------------------------------------------------------------------
; FAT32 routines
;---------------------------------------------------------------------
!src "fat32.a"

;---------------------------------------------------------------------
; read 96 bytes from RTC as parameter buffer
;---------------------------------------------------------------------
.read_nvram
	+save
	; select RTC
	lda #%01110110
	sta via1portb

	lda #$20
	jsr .spi_rw_byte

	ldx #$00
-		
	phx
	jsr .spi_r_byte
	plx
	sta .nvram,x
	inx
	cpx #96
	bne -

	; deselect all SPI devices
	lda #%01111110
	sta via1portb


	lda #$42 
	cmp .nvram + param_sig
	bne +					; Wrong signature? stick to the default

	stz <CRC
-	lda .nvram,x
	jsr crc8
	inx
	cpx #param_checksum
	bne -

	cmp .nvram + param_checksum
	bne +					; Wrong checksum? defaults

	+SetVector .nvram, paramvec
+
	+restore
	rts

; stolen from 
; http://6502.org/source/integers/crc-more.html
!address CRC  = $f8
; CRC     EQU $6          ; current value of CRC
crc8:
        EOR addr(<CRC)         ; A contained the data
        STA addr(<CRC)         ; XOR it with the byte
        ASL             ; current contents of A will become x^2 term
        BCC +         ; if b7 = 1
        EOR #$07        ; then apply polynomial with feedback
+		EOR addr(<CRC)         ; apply x^1
        ASL             ; C contains b7 ^ b6
        BCC +
        EOR #$07
+		EOR addr(<CRC)         ; apply unity term
        STA addr(<CRC)         ; save result
        RTS


;----------------------------------------------------------------------------------------------
; Tables and lookup data
;----------------------------------------------------------------------------------------------
; Lookup table for HEX to ASCII
;hexascii	!text "0123456789ABCDEF"

; Lookup table for decimal to ASCII
.dec_tbl		!byte 128,160,200

; SD Card init status messages
; .cardok		!text "SD Card OK", $00
.serial_upload			!text "Serial upload. baud rate: $", $00
.nocard					!text "NO SD Card ", $00
.invalidcard			!text "Invalid SD Card!", $00
.unsupportedcard		!text "Unsupp. SD Card!", $00
.initfail				!text "SD Init failed!", $00
.fat_err_signature 		!text "bad block signature", $00
.fat_err_partition 		!text "invalid partition type", $00
.fat_err_bad_sect_size 	!text "sector size unsupported", $00
.fat_err_num_fats	  	!text "invalid number of FATs (!= 2)", $00
.bootup_txt 			!text "Boot ", $00
.bootup_failed 			!text "failed ", $00



;----------------------------------------------------------------------------------------------
;	divisor values for 1.8432 MHz Crystal
;	value		; baud	; #
.uart_divisor	
	!word -1 	; dunno	; 0
	!word 2304	; 50	; 1
	!word 1536	; 75	; 2	
	!word 1047	; 110	; 3
	!word 857	; 134.5	; 4
	!word 768	; 150	; 5
	!word 384 	; 300	; 6
	!word 192	; 600	; 7
	!word 96	; 1200	; 8
	!word 64	; 1800	; 9
	!word 58	; 2000	; 10
	!word 48	; 2400	; 11
	!word 32	; 3600	; 12
	!word 24	; 4800	; 13
	!word 16	; 7200	; 14
	!word 12	; 9600	; 15
	!word 6		; 19200	; 16
	!word 3		; 38400	; 17
	!word 2		; 56000	; 18
	!word 1 	; 115200; 19
;----------------------------------------------------------------------------------------------
.default_params
	!byte $42
	!byte $00
	!text "LOADER  BIN" 
	!byte $0f
	!byte %00000011
	!fill .default_params + param_checksum - *, $00
	!byte $00

;----------------------------------------------------------------------------------------------
; Memcheck routine to be copied to ZP
;----------------------------------------------------------------------------------------------
.num_patterns = $03
.pattern  !byte $aa,$55,$ff,$00

.selfmod_start
!pseudopc .target {

      stz ram_end_h
      
-     ldx #.num_patterns
--    lda .pattern,x
.a     sta .start_check   ; Start at $0200. skip stack for now      
.b     cmp .start_check
      bne +
      
      dex 
      bne --

      inc .a+1
      inc .b+1
      bne -

      ; Stop at $e000 to prevent overwriting BIOS Code when ROMOFF
      ldx .a+2
      inx
      stx .a+2
      stx .b+2
      cpx #$e0
      
      bne -

+	  
	  lda .a+2
	  sta ram_end_l
	  lda .a+1
	  sta ram_end_h

      jmp .back_from_memcheck
}
.selfmod_end

;----------------------------------------------------------------------------------------------
; Jump table
;----------------------------------------------------------------------------------------------
*=$ff00


sys_chrout
chrout		jmp (outvec)
sys_chrin
chrin		jmp (invec)
sys_lcdclear
lcdclear	jmp .lcdclear
sys_lcdprint
lcdprint 	jmp .lcdprint
sys_lcdstring
lcdstring 	jmp .lcdstring
sys_lcdhex
lcdhex 		jmp .lcdhex 
sys_decout
decout 		jmp .decout
sys_decoutz
decoutz 	jmp .decoutz
sys_irqhandler
irqhandler  jmp .irqhandler
sys_lcdbusy
lcdbusy 	jmp .lcdbusy
sys_lcdxy
lcdxy 		jmp .lcdxy

sys_spi_rw_byte	
spi_rw_byte	jmp .spi_rw_byte

sys_spi_r_byte	
spi_r_byte	jmp .spi_r_byte

sys_upload	jmp .upload

sys_sd_write_block
sd_write_block 	jmp .sd_write_block

sys_sd_read_block
sd_read_block 	jmp .sd_read_block


sys_sd_param_init
sd_param_init 	jmp .sd_param_init

sys_sd_deselect_card
sd_deselect_card 	jmp .sd_deselect_card
sys_sd_select_card
sd_select_card 	jmp .sd_select_card
sys_sd_cmd
sd_cmd 		jmp .sd_cmd
sys_strout
strout 		jmp .strout
sys_hexout
hexout 		jmp .hexout
sys_uart_rx
uart_rx     jmp .uart_rx
sys_uart_tx
uart_tx     jmp .uart_tx
sys_fat_mount
fat_mount   jmp .fat_mount
sys_getkey
getkey 		jmp .kbd_getkey	
sys_sd_read_multiblock
sd_read_multiblock 	jmp .sd_read_multiblock

;----------------------------------------------------------------------------------------------

;----------------------------------------------------------------------------------------------
; Interrupt vectors
;----------------------------------------------------------------------------------------------
; $FFFA/$FFFB NMI Vector
*= $fffa
!word .do_nmi
; $FFFC/$FFFD reset vector
;*= $fffc
!word .do_reset
; $FFFE/$FFFF IRQ vector
;*= $fffe
!word .do_irq
