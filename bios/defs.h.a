!cpu 65c02

;----------------------------------------------------------------------------------------------
; constants
;----------------------------------------------------------------------------------------------
clockspeed	= 4 ; 4 MHz
jiffies    = 32767  ; jiffy count 100Hz for 1MHz systen
count		= clockspeed * jiffies

; IO Channels
!address {
chn_out = $00
chn_in  = $01
}

dev_screen = $00
dev_lcd    = $01
dev_uart   = $02


;
;CSUART   ; UART at $0200
;CSVIA    ; VIA  at $0210
;CSVDP    ; VDP  at $0220
;CSSND    ; SND  at $0230
;CSLCD    ; LCD  at $0240
;----------------------------------------------------------------------------------------------
; zeropage locations 
;----------------------------------------------------------------------------------------------

!address {
; Cursor Position
crs_x	= $d0
crs_y	= $d1

; Keyboard buffer pointer
kbd_ptr = $d2
; Keyboard status flags
; Bit 7; Keyboard on/off
kbd_flg = $d3

; IRQ vector
irqvec		= $e0
; ramend
ram_end_l   = $e4
ram_end_h   = ram_end_l+1
; general purpose temp variables
tmp0		= $f0
tmp1		= $f1
tmp2		= $f2
tmp3		= $f3
tmp4		= $f4
tmp5		= $f5
tmp6		= $f6
tmp7		= $f7


; pointer for io block operations
sd_blkptr 	= $fc

; pointer for string output functions 
msgptr 		= $fe

; general purpose address location
; transfer routine addresses
addr 		= $e2
adrl     =addr
adrh     =addr+1

; SD CArd command parameter/result buffer
sd_cmd_param = $0300
sd_cmd_chksum	= sd_cmd_param+4
sd_cmd_result = $031f

; SD Card error
; $ff - No Card
; $0f - Invalid Card
; $00 - No error
sd_cmd_errno = $0320


startaddr	= $0700
endaddr     = $0702
length		= $0704
charset  =$e000
}

;----------------------------------------------------------------------------------------------

;----------------------------------------------------------------------------------------------
; MACROS
;-------------------------------------------------------------------------------------------	---
!macro PrintChar char {
        lda #char
        jsr chrout
}
!macro PrintString .word {
	+SetVector .word, msgptr
        jsr strout
}
!macro PrintStringAt .word,.x,.y {
	ldx #.x
	ldy #.y
	jsr lcdxy	

	+SetVector .word, msgptr
    jsr lcdstring

}
!macro SetVector .word, .addr {
        lda #<.word
        sta .addr
        lda #>.word
        sta .addr+1
}

!macro nops n{
   !for i, 0, n{
      nop
   }
}


!macro save{
	pha
	phy
	phx
}
!macro restore{
	plx
	ply
	pla
}