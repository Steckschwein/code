*=$1000
!src "../bios/defs.h.a"
!src "../bios/bios.h.a"
; adrl     =$f0
; adrh     =$f1
; txtptr   =$f2
; crs_x    =$f4
; crs_c    =$f5

!src "t9929.h.a"

main:
      stz crs_x
      stz crs_y

		sei
		 +SetVector  vdp_irq, irqvec
		jsr vdp_init	
		jsr vdp_clear_vram	

		jsr vdp_clear_screen
		jsr vdp_load_charset
		jsr vdp_color


		lda	#v_reg1_16k|v_reg1_display_on|v_reg1_int
		ldy	#v_reg1
		jsr	vdp_sreg


;		cli


      jsr lcdclear


	      
!for i,0,7 {
      lda #i+48
      jsr vdp_chrout
      inc crs_y   
}      
      lda #30
      sta crs_x
      stz crs_y
!for i,0,7 {
      lda #i+48
      jsr vdp_chrout
      inc crs_y   
}      

      stz crs_x
      stz crs_y
-		jsr chrin
      
		jsr vdp_chrout

      inc crs_x
      jmp -
		

vdp_irq
		bit a_vreg
		bpl +		; VDP interrupt flag set? no, then RTI

		jsr vdp_cursor

+		rti
		;jmp irqhandler

vdp_init:
		ldx   	#$00
		ldy		#$80
-  	lda   	vdp_init_bytes,x
		jsr		vdp_sreg	; write data to vdp - write the register number to vdp, 80 - reg0 , 81 - reg1 ... see datasheet page 4.1
		iny
		inx
		cpx   #$08
		bne   -

		rts
vdp_sreg:
		sta   a_vreg_w
   	sty   a_vreg_w
   	rts

vdp_clear_screen:
   lda   #$00
   ldy   #$54
   jsr   vdp_sreg
   lda   #$20
   ldx   #$00
   ldy   #$00
- 
   +nops VRAM_WAIT
   sta   a_vram_w
   inx   
   bne   -
   iny
   cpy   #$04
   bne   -
   rts

vdp_load_charset:

   +SetVector charset, adrl
 	
   lda   #$00
   ldy   #$40
   jsr   vdp_sreg
   ldx   #$00; page counter   
   ldy   #$00
-  
   +nops VRAM_WAIT
   lda   (adrl),y
   sta   a_vram_w
   iny
   bne   -
   inc   adrh
   inx   
   cpx   #$08     ;2k charset - $0800
   bne   -
   rts
vdp_color:
   lda   #$00
   ldy   #$60
   jsr   vdp_sreg
   ldx   #$00
   ldy   #TEXT_COLOR<<4|Transparent
-  +nops VRAM_WAIT
   sty   a_vram_w
   inx
   cpx   #$20
   bne   -
   rts

vdp_gotoxy
   pha
   clc
   lda #$00
 

   ldx crs_y
   beq +
   clc
-  adc #$20
   dex
   bne -

+  
   clc
   adc crs_x

   sta a_vreg_w
   
   lda crs_y
   cmp #$08
   bcc +
   lda #$55
   bra set
+ lda #$54

set
   sta a_vreg_w

   pla
   rts


vdp_chrout

   jsr vdp_gotoxy
   sta a_vram_w
   rts


vdp_write:
   lda   #$00
   ldy   #$54
   jsr   vdp_sreg
   ldy   #$00
-  
   
   nop
   lda   (msgptr),y
   beq   +
   sta   a_vram_w
   iny
   bne   -
+  rts

vdp_clear_vram:
   lda   #$00
   ldy   #$40
   jsr   vdp_sreg
   lda   #$00
   ldx   #$00
   ldy   #$00
-
   +nops VRAM_WAIT
   sta   a_vram_w
   inx
   bne   -
   iny
   cpy   #$40
   bne   -
   rts

vdp_cursor:
   pha
   phy
   phx 

   ldx  crs_x
   ldy  crs_y

   stx   a_vreg_w
   sty   a_vreg_w

   lda   crs_x
   and   #$10
   beq   +
   lda   #231
   jmp   ++
+  lda   #' '
++ sta   a_vram_w
   inc   crs_x
   
   pla
   ply
   plx
   rts


vdp_init_bytes	
	!byte 0
	!byte v_reg1_16k|v_reg1_int
	!byte ($1400 / $400)	; name table - value * $400
	!byte ($2000 / $40)	; color table - value * $40 (gfx1), 7f/ff (gfx2)
	!byte ($0000 / $800) ; pattern table (charset) - value * $800  --> offset in VRAM 
	!byte ($2800 / $80)	; sprite attribute table - value * $80 --> offset in VRAM 
	; !byte ($0000 / $800)	; sprite pattern table - value * $800  --> offset in VRAM 
	!byte $00
	!byte TEXT_BGCOLOR
msg_1
	!text "STECKSCHWEIN!                   ", $00
