*=$1000
!source <defs.h.a>
!source <bios.h.a>
!source <via.h.a>
!source <lcd.h.a>
!source <t9929.h.a>

txtptr   =$f2
crs_c	 =$f3
adrl=	tmp0
adrh=	tmp1

; c64 program studio - endurion
; cbm studio

; C128 - risen from oblivion, vdc chip 
; bil herd - forum "damals war's..." anbindung video chip

   jmp   main   
!source "t99xx.lib.a"

;msg_2	!text " Hey Thomas, these are the first letters written on screen with          THE TMS9929 VDP!         TODAY IS THE 15.04.2014          +++HAPPY BIRTHDAY+++           so far... /MLA ;)", $00
msg_2	!text "      Welcome to VCFE 15.0!                                         These are some letters         written on screen with          THE TMS9929 VDP!", $00
msg_3 !text "READY.", $0

pic1:
;!bin "tw_192px.gif.raw"
pic2:
;!bin "ml_192px.gif.raw"
;!bin "puppe.raw"
pic3:
;!bin "great_success_256.gif.raw"
pic4_pal:
!bin "NADINE.TIAP"
pic4_col:
!bin "NADINE.TIAC"
!src "../charsets/char.ascii.vc20.h.a"

main:
	jsr   lcdclear
	lda   #'0'
	jsr   lcdprint

	jsr   vdp_init
 	jsr   vdp_clear_vram
   jsr   vdp_clear_screen
   jsr   vdp_load_charset
   jsr   vdp_color
	
	jsr	vdp_colortest
	lda   #'1'
	jsr   lcdprint

;   jsr   vdp_color
;   jsr   vdp_write

;   +SetVector msg_3, txtptr
;   jsr   vdp_write

   +SetVector  vdp_irq, irqvec
   
   lda   #v_reg1_16k
   ldy   #v_reg1
   jsr   vdp_sreg

   lda   #'2'
   jsr   lcdprint 

;  	jsr	vdp_gfx2_init	
;	lda	#v_reg0_m3
;	ldy	#v_reg0
;	jsr	vdp_sreg

	lda	#v_reg1_16k|v_reg1_display_on|v_reg1_int
	ldy	#v_reg1
	jsr	vdp_sreg

; via port a
	lda #$00
	sta via1ier             ; disable VIA1 T1 interrupts
	lda #%00000000 			; set latch
	sta via1acr
	lda #%11001100 			; set level
	sta via1pcr
	lda #%11111000 			; set PA1 to input
	sta via1ddra
	
	cli

-	jmp  -


; bitmap mode
; name table --> $00 to $ff
; color table --> 2 colors
; pattern table --> bitset
vdp_gfx2_init:
	;set 768 different patterns --> name table
	lda	#$00
	ldy	#$18+$40
	jsr	vdp_sreg
	ldy	#$00
	ldx	#$00
-	+nops VRAM_WAIT
	stx	a_vram
	inx
	bne	-
	iny
	cpy	#$03
	bne	-
;load the pic data --> pattern table
	+SetVector	pic4_pal,	adrl
	lda	#$00
	ldy	#$00+$40
	ldx	#$18	;6k bitmap - $1800
	jsr	vdp_memcpy
;load the pic data --> color table
	+SetVector	pic4_col,	adrl
	lda	#$00
	ldy	#$20+$40
	ldx	#$18	;6k bitmap - $1800
	jsr	vdp_memcpy
	
   rts	
	
.bgcolor	!byte 00

vdp_irq:
	pha
	phy
	phx
	
	lda   a_vreg
	bit	a_vreg ; Check VDP interrupt. IRQ is acknowledged by reading.
	bmi +	   ; VDP IRQ flag set? 
	inc	.bgcolor
	lda .bgcolor
	jsr	vdp_bgcolor
+		
	
;	jsr	vdp_colortest
	
;   jsr   vdp_cursor

+	jsr   vdp_sprite
	jsr   sprite_move
;   jsr   lcdclear
;   jsr   lcdhex
	
	plx
	ply
	pla
	rti
	
vdp_init_bytes
	!byte 0
	!byte v_reg1_16k;|v_reg1_int
	!byte ($1800 / $400)	; name table - value * $400
	!byte	($2000 / $40)	; color table - value * $40 (gfx1), 7f/ff (gfx2)
;	!byte	$ff	; color table setting for gfx mode 2 --> $2000
	!byte	($0000 / $800) ; pattern table (charset) - value * $800  --> offset in VRAM 
;	!byte	$03 	; pattern table, either $0000 or $2000 (3)	
	!byte	($3800 / $80)	; sprite attribute table - value * $80 --> offset in VRAM 
	!byte   ($0000 / $800)  ; sprite pattern table - value * $800  --> offset in VRAM
	!byte	Black

vdp_init:
   ;reg 0 0 - ext. video off, 
   ;reg 1 c0 - 4108/4116 DRAM, int disabled, video on, text mode, size 1, magnitude off
   ;reg 2 
   ;reg 3
   ;reg 4
   ;reg 5
   ;reg 6
   ;reg 7 7 - cyan background color
   ldx   	#$00
   ldy		#$80
-  lda   vdp_init_bytes,x
   jsr	vdp_sreg	; write data to vdp - write the register number to vdp, 80 - reg0 , 81 - reg1 ... see datasheet page 4.1
   
   iny
   inx
   cpx   #$08
   bne   -
   rts
	
	
vdp_cursor:
   lda   #$20
   ldy   #$18+$40
   jsr   vdp_sreg
   lda   crs_c
   and   #$10
   beq   +
   lda   #160
   jmp   ++
+  lda   #' '
++ sta   a_vram
   inc   crs_c
   rts
	
sprite_move:
	inc	sprite_attr_table+1+4*0
	inc	sprite_attr_table+1+4*1
	inc	sprite_attr_table+1+4*2
	dec	sprite_attr_table+1+4*3
	dec	sprite_attr_table+1+4*4
	rts

vdp_sprite:
	lda	#$00 ; offset $2000
	ldy	#$38+$40
	jsr	vdp_sreg
    ldy   #$00
-
	+nops VRAM_WAIT
	lda   sprite_attr_table,y
	sta   a_vram
	iny
	cpy	#(5*4)	
	bne   -
  	rts

vdp_clear_vram:
	lda   #$00
	ldy   #$40
	jsr   vdp_sreg
	lda   #$00
   ldx   #$00
   ldy   #$00
c1:
	+nops  VRAM_WAIT
   sta   a_vram
   inx
   bne   c1
   iny
   cpy   #$40
   bne   c1
   rts
	
vdp_load_charset:
   lda   #<charset_vc20
   sta   adrl
   lda   #>charset_vc20
;   clc
;   adc	 #$08
   sta   adrh
	
   lda   #$00
   ldy   #$40
   jsr   vdp_sreg
   ldx   #$00; page counter   
   ldy   #$00
-  lda   (adrl),y
   sta   a_vram
   iny
   bne   -
   inc   adrh
   inx   
   cpx   #$08     ;2k charset - $0800
   bne   -
   rts

vdp_clear_screen:
   lda   #$00
   ldy   #$18+$40
   jsr   vdp_sreg
   lda   #$20
   ldx   #$00
   ldy   #$00
-  sta   a_vram
   inx   
   bne   -
   iny
   cpy   #$04
   bne   -
   rts
   
vdp_colortest:	
   lda   #$00
   ldy   #$18+$40
   jsr   vdp_sreg
	ldx   #$00
    ldy   #$00
	lda	  #'a'
-   sty   a_vram
	+nops	VRAM_WAIT
	iny
	bne   -
	inx
	cpx	#$03
	bne	-
	
   lda   #$00		;set the color
   ldy   #$60
   jsr   vdp_sreg
   ldx   #$00
   ldy   #Light_Blue<<4
-  sty   a_vram
	+nops	VRAM_WAIT
   iny
   inx
   cpx   #$20
   bne   -
   rts
	
vdp_write:
   lda   #$00
   ldy   #$18+$40
   jsr   vdp_sreg
   ldy   #$00
-  lda   (txtptr),y
   beq   +
   sta   a_vram
   iny
   bne   -
+  rts
vdp_color:
   lda   #$00
   ldy   #$60
   jsr   vdp_sreg
   ldx   #$00
   ldy   #Gray<<4|Transparent
-  sty   a_vram
   inx
   cpx   #$20
   bne   -
   rts
   
sprite_attr_table:
	!byte	$64,$64,'V',Medium_Red
	!byte	$64,$64+8,'C',Medium_Green
	!byte	$64,$64+16,'F',Light_Blue
	!byte	$64+8,$64,'1',Dark_Yellow
	!byte	$64+8,$64+8,'5',Light_Yellow

	!byte	$ff,	$64,		'-',Light_Red
	!byte	$ff,	$64+8,	'-',Light_Green
	!byte	$ff,	$64+16,	'-',Light_Blue
	!byte	$ff,	$64,		'-',Dark_Yellow
	!byte	$ff,	$64+8,	'-',Dark_Yellow
