*=$1000
!source "../bios/defs.h.a"
!source "../bios/bios.h.a"
!source "t9929.h.a"
adrl     =$f0
adrh     =$f1
txtptr   =$f2
crs_x    =$f4
crs_c    =$f5
charset  =$e000

; c64 program studio - endurion
; cbm studio

; C128 - risen from oblivion, vdc chip 
; bil herd - forum "damals war's..." anbindung video chip

TEXT_COLOR     = Cyan
TEXT_BGCOLORT  = Black

   jmp   main
	
;msg_2	!text " Hey Thomas, these are the first letters written on screen with          THE TMS9929 VDP!         TODAY IS THE 15.04.2014          +++HAPPY BIRTHDAY+++           so far... /MLA ;)", $00
msg_2	!text "      Welcome to VCFE 15.0!                                         These are some letters         written on screen with          THE TMS9929 VDP!", $00
msg_3 !text "READY.", $0

pic1:
!bin "tw_192px.gif.raw"
pic2:
!bin "ml_192px.gif.raw"
pic3:
!bin "great_success_256.raw"

main:
   jsr   lcdclear
   lda   #'0'
	jsr   lcdprint

	jsr   vdp_init
 	jsr   vdp_clear_vram
   jsr   vdp_clear_screen
   jsr   vdp_load_charset
   jsr   vdp_color
	
;	jsr	vdp_colortest
   lda   #'1'
   jsr   lcdprint

;   jsr   vdp_color
;   jsr   vdp_write

	lda	#v_reg1_16k|v_reg1_display_on|v_reg1_int
	ldy	#v_reg1
	jsr	vdp_sreg

   +SetVector msg_3, txtptr
   jsr   vdp_write

   +SetVector  vdp_irq, irqvec

   lda   #'2'
   jsr   lcdprint 
   cli
-	jmp   -

;	jsr	burn_cycles
;   jsr   vdp_sprite
;	jsr	sprite_move
;   jsr lcdclear
;   lda a_vreg
;   jsr lcdhex
;   jmp	-


vdp_gfx2_init:
	ldx	#$00
	
vdp_gfx2_img:
	

vdp_irq:
   jsr   vdp_cursor
   jsr   vdp_sprite
   jsr   sprite_move
;   jsr   lcdclear
   lda   a_vreg
;   jsr   lcdhex
   rti
vdp_init_bytes
	!byte 0
	!byte v_reg1_16k|v_reg1_int
	!byte ($1400 / $400)	; name table - value * $400
	!byte	($2000 / $40)	; color table - value * $40 (gfx1), 7f/ff (gfx2)
	!byte	($0000 / $800) ; pattern table (charset) - value * $800  --> offset in VRAM 
	!byte	($2800 / $80)	; sprite attribute table - value * $80 --> offset in VRAM 
	!byte	($0000 / $800)	; sprite pattern table - value * $800  --> offset in VRAM 
	!byte	Black

vdp_init:
   ;reg 0 0 - ext. video off, 
   ;reg 1 c0 - 4108/4116 DRAM, int disabled, video on, text mode, size 1, magnitude off
   ;reg 2 
   ;reg 3
   ;reg 4
   ;reg 5
   ;reg 6
   ;reg 7 7 - cyan background color
   ldx   	#$00
   ldy		#$80
-  lda   vdp_init_bytes,x
	jsr	vdp_sreg	; write data to vdp - write the register number to vdp, 80 - reg0 , 81 - reg1 ... see datasheet page 4.1
   iny
   inx
   cpx   #$08
   bne   -
   rts
	
	
burn_cycles:
	ldy	#$20
	ldx	#$ff
-	dex
	bne	-
	dey
	bne	-
	rts
vdp_cursor:
   lda   #$20
   ldy   #$54
   jsr   vdp_sreg
   lda   crs_c
   and   #$10
   beq   +
   lda   #160
   jmp   ++
+  lda   #' '
++ sta   a_vram_w
   inc   crs_c
   rts
	
sprite_move:
	inc	sprite_attr_table+1+4*0
	inc	sprite_attr_table+1+4*1
	inc	sprite_attr_table+1+4*2
	dec	sprite_attr_table+1+4*3
	dec	sprite_attr_table+1+4*4
	rts

vdp_sprite:
	lda	#$00 ; offset $2000
	ldy	#$68 ; #$26 + $40
	jsr	vdp_sreg
   ldy   #$00
-
   lda   sprite_attr_table,y
   +nops VRAM_WAIT
   sta   a_vram_w
   iny
	cpy	#(5*4)	
   bne   -
+  rts
vdp_sreg:
	sta   a_vreg_w
   sty   a_vreg_w
   rts
vdp_clear_vram:
   lda   #$00
   ldy   #$40
   jsr   vdp_sreg
   lda   #$00
   ldx   #$00
   ldy   #$00
c1:
   +nops VRAM_WAIT
   sta   a_vram_w
   inx
   bne   c1
   iny
   cpy   #$40
   bne   c1
   rts
	
vdp_load_charset:
   lda   #<charset
   sta   adrl
   lda   #>charset
   sta   adrh
	
   lda   #$00
   ldy   #$40
   jsr   vdp_sreg
   ldx   #$00; page counter   
   ldy   #$00
-  +nops VRAM_WAIT
   lda   (adrl),y
   sta   a_vram_w
   iny
   bne   -
   inc   adrh
   inx   
   cpx   #$08     ;2k charset - $0800
   bne   -
   rts

vdp_clear_screen:
   lda   #$00
   ldy   #$54
   jsr   vdp_sreg
   lda   #$20
   ldx   #$00
   ldy   #$00
- 	+nops	VRAM_WAIT
   sta   a_vram_w
   inx   
   bne   -
   iny
   cpy   #$04
   bne   -
   rts
   
vdp_colortest:	
   lda   #$00
   ldy   #$54
   jsr   vdp_sreg
	ldx   #$00
   ldy   #$00
   lda   #00
-  +nops VRAM_WAIT
   sta   a_vram_w
	clc
	adc	#$01
   iny
	cpy	#128
	bne   -
	inx
	cpx	#$06
	bne	-
	
	
   lda   #$00
   ldy   #$60
   jsr   vdp_sreg
   ldy   #Black
   ldx   #$00
-  +nops VRAM_WAIT
   sty   a_vram_w
	iny
   inx
   cpx   #$20	
   bne   -
   rts
	
vdp_write:
   lda   #$00
   ldy   #$54
   jsr   vdp_sreg
   ldy   #$00
-  lda   (txtptr),y
   beq   +
   sta   a_vram_w
   iny
   bne   -
+  rts
vdp_color:
   lda   #$00
   ldy   #$60
   jsr   vdp_sreg
   ldx   #$00
   ldy   #Light_Blue<<4|Transparent
-  +nops VRAM_WAIT
   sty   a_vram_w
   inx
   cpx   #$20
   bne   -
   rts
   
vdp_bgcolor:
	stx   a_vreg
	lda   #v_reg7
	sta   a_vreg
	rts
   					
sprite_attr_table:
	!byte	$64,$64,'V',Medium_Red
	!byte	$64,$64+8,'C',Medium_Green
	!byte	$64,$64+16,'F',Light_Blue
	!byte	$64+8,$64,'1',Dark_Yellow
	!byte	$64+8,$64+8,'5',Light_Yellow

	!byte	$ff,	$64,		'-',Light_Red
	!byte	$ff,	$64+8,	'-',Light_Green
	!byte	$ff,	$64+16,	'-',Light_Blue
	!byte	$ff,	$64,		'-',Dark_Yellow
	!byte	$ff,	$64+8,	'-',Dark_Yellow

sprite1:
		+SpriteLine %...#....
		+SpriteLine %...#....
		+SpriteLine %#######.
		+SpriteLine %.#####..
		+SpriteLine %..###...
		+SpriteLine %.##.##..
		+SpriteLine %.#...#..
		+SpriteLine %........
sprite2:
		+SpriteLine %..#.....#..
;		+SpriteLine %...#...#...
;		+SpriteLine %..#######..
;		+SpriteLine %.##.###.##.
;		+SpriteLine %###########
;		+SpriteLine %#.#######.#
;		+SpriteLine %#.#.....#.#
;		+SpriteLine %...##.##...
