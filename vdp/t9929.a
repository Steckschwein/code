*=$1000
!source "t9929.h.a"
adrl     =$f0
adrh     =$f1
msgptr   =$f2

; c64 program studio - endurion
; cbm studio

; C128 - risen from oblivion, vdc chip 
; bil herd - forum "damals war's..." anbindung video chip

TEXT_COLOR     = Cyan
TEXT_BGCOLORT  = Black
VDP_WAIT_CYCLES = 4300; 4300Âµs after vertical blank int, means 0,0043s / 0,0000005s (time for one cpu cycle at 2Mhz) = 8600cycles = 4300 NOP's -
   jmp   main
;msg_2	!text " Hey Thomas, these are the first letters written on screen with          THE TMS9929 VDP!         TODAY IS THE 15.04.2014          +++HAPPY BIRTHDAY+++           so far... /MLA ;)", $00
msg_2	!text "      Welcome to VCFE 15.0!                                         These are some letters         written on screen with          THE TMS9929 VDP!", $00

;last_change="jsajsh js ahjs ajsh"

main:
   jsr   lcdclear
   lda   #'a'
	jsr   lcdprint
	jsr   vdp_init
 	jsr   vdp_clear_vram
   jsr   vdp_clear_screen
   jsr   vdp_load_charset
	
	jsr	vdp_colortest

;   jsr   vdp_color
;   jsr   vdp_write
	
	ldx	#v_reg1_16k|v_reg1_display_on
	ldy	#v_reg1
	jsr	vdp_sreg
	
   lda   #'x'
   jsr   lcdprint	
-	
	jsr	burn_cycles
   jsr   vdp_sprite
	jsr	sprite_move
   jmp	-

vdp_init_bytes
	!byte 0
	!byte v_reg1_16k
	!byte ($1400 / $400)	; name table - value * $400
	!byte	($2000 / $40)	; color table - value * $40 (gfx1), 7f/ff (gfx2)
	!byte	($0000 / $800) ; pattern table (charset) - value * $800  --> offset in VRAM 
	!byte	($2800 / $80)	; sprite attribute table - value * $80 --> offset in VRAM 
	!byte	($0000 / $800)	; sprite pattern table - value * $800  --> offset in VRAM 
	!byte	Dark_Green<<4 | Black
vdp_init:
   ;reg 0 0 - ext. video off, 
   ;reg 1 c0 - 4108/4116 DRAM, int disabled, video on, text mode, size 1, magnitude off
   ;reg 2 
   ;reg 3
   ;reg 4
   ;reg 5
   ;reg 6
   ;reg 7 7 - cyan background color
   ldx   #$00
   ldy	#$80
-  lda   vdp_init_bytes,x
	jsr	vdp_sreg			; write data to vdp - write the register number to vdp, 80 - reg0 , 81 - reg1 ... see datasheet page 4.1
   iny
   inx
   cpx   #$08
   bne   -
   rts
	
	
burn_cycles:
	ldy	#$20
	ldx	#$ff
-	dex
	bne	-
	dey
	bne	-
	rts
	
sprite_move:
	inc	sprite_attr_table+1+4*0
	inc	sprite_attr_table+1+4*1
	inc	sprite_attr_table+1+4*2
	dec	sprite_attr_table+1+4*3
	dec	sprite_attr_table+1+4*4
	rts

vdp_sprite:
	ldx	#$00 ; offset $2000
	ldy	#$68 ; #$26 + $40
	jsr	vdp_sreg
   ldy   #$00
-
   lda   sprite_attr_table,y
   +nops VRAM_WAIT
   sta   a_vram_w
   iny
	cpy	#(5*4)	
   bne   -
+  rts
vdp_sreg:
   +nops VREG_WAIT
	stx   a_vreg_w
   +nops VREG_WAIT
   sty   a_vreg_w
   rts
vdp_clear_vram:
   ldx   #$00
   ldy   #$40
   jsr   vdp_sreg
   lda   #$00
   ldx   #$00
   ldy   #$00
c1:
   +nops VRAM_WAIT
   sta   a_vram_w
   inx
   bne   c1
   iny
   cpy   #$40
   bne   c1
   rts
vdp_load_charset:
   lda   #<charset
   sta   adrl
   lda   #>charset
   sta   adrh
	
   ldx   #$00
   ldy   #$40
   jsr   vdp_sreg
   ldx   #$00; page counter   
   ldy   #$00
-  +nops VRAM_WAIT
   lda   (adrl),y
   sta   a_vram_w
   iny
   bne   -
   inc   adrh
   inx   
   cpx   #$08     ;2k charset - $0800
   bne   -
   rts

vdp_clear_screen:
   ldx   #$00
   ldy   #$54
   jsr   vdp_sreg
   lda   #$20
   ldx   #$00
   ldy   #$00
- 	+nops	VRAM_WAIT
   sta   a_vram_w
   inx   
   bne   -
   iny
   cpy   #$04
   bne   -
   rts
   
vdp_colortest:
   ldx   #$00
   ldy   #$60
   jsr   vdp_sreg
   ldy   #Black<<4|Transparent
-  +nops VRAM_WAIT
   sty   a_vram_w
   +nops VRAM_WAIT
   sty   a_vram_w
	iny
   inx
   cpx   #$20
   bne   -
   rts
	
vdp_write:
   ldx   #$00
   ldy   #$54
   jsr   vdp_sreg
   ldy   #$00
-
   lda   msg_2,y
   beq   +
   +nops VRAM_WAIT
   sta   a_vram_w
   iny
   bne   -
+  rts
vdp_color:
   ldx   #$00
   ldy   #$60
   jsr   vdp_sreg
   ldy   #Cyan<<4|Transparent
-  +nops VRAM_WAIT
   sty   a_vram_w
   inx
   cpx   #$20
   bne   -
   rts

vdp_vram_write:
   lda   adrl
   sta   a_vreg_w
   lda   adrh
   ora   #$40
   sta   a_vreg_w
   +nops VRAM_WAIT
   stx   a_vram_w
   rts
vdp_vram_read:
   lda   adrl
   sta   a_vreg_w
   lda   adrh
   sta   a_vreg_w
   +nops VRAM_WAIT
   lda   a_vram
   rts
   
vdp_bgcolor:
	stx   a_vreg
	lda   #v_reg7
	sta   a_vreg
	rts
vdp_post:
   dex
   bne   vdp_post
   dey
   sty   $d400
   lda   #88
   sta   $d400
   jsr	lcdclear
   tya
   jsr	lcdprint
   rts   
vdp_wait_vb:
-  lda   a_vreg
   and   #$80
   bne -
     ldx   #10
l1:    ldy   #172
l2:   dey
      bne   l2
      dex
      bne   l1
      rts
		
  !source "../charsets/char.ascii.h.a"
   
; TODO FIXME - JUSTT FOR TESTING
; LCD 
;----------------------------------------------------------------------------------------------
lcdctl		= $d200
lcddata		= lcdctl+1
; *** Clear LCD display and return cursor to home
; registers preserved
lcdclear 
         php
         pha
			jsr lcdbusy
			lda #$01
			sta lcdctl
			jsr lcdbusy
			lda #$80
			sta lcdctl
			jsr lcdbusy
			pla
         plp
			rts

; *** Wait for LCD busy bit to clear
; registers preserved
lcdbusy   
         pha
-			lda lcdctl            ;read from lcd register 0
			and #$80            ;check bit 7 (busy)
			bne -
			pla
			rts

; *** Print character on LCD (40 character)
; registers preserved
lcdprint
         pha
			sta lcddata            ;output the character
			jsr lcdbusy
			lda lcdctl            ;get current ddram address
			and #$7f
			cmp #$28          	;wrap from pos $13 (line 1 char 20)...
			bne +
			lda #$c0            	;...to $40 (line 2 char 1)
			sta lcdctl
			jsr lcdbusy
+			pla
			rts
         
; *** print string on lcd
; registers preserved
lcdstring
         pha                 ;save a, y to stack
			tya
			pha
			ldy #$00
-		  	lda (msgptr),y
			beq +
			jsr lcdprint
			iny
			bne -
+			pla                 ;restore a, y
			tay
			pla
			rts          
         
print_x:
         jsr   lcdhex
         lda   #$20
         jsr   lcdprint
         rts
; *** Print 2 digit hex number on LCD
; A, X registers preserved
; *** Lookup table for HEX to ASCII
hexascii	!text "0123456789ABCDEF"
lcdhex 
         pha
			lsr                ;shift high nybble into low nybble
			lsr 
			lsr 
			lsr 
			tay
			lda hexascii,y      ;convert to ascii
			jsr lcdprint        ;print value on the lcd
			pla                 ;restore original value
			pha
			and #$0f            ;select low nybble
			tay
			lda hexascii,y      ;convert to ascii
			jsr lcdprint        ;print value on the lcd      
			pla
			rts      
			
sprite_attr_table:
	!byte	$64,$64,'V',Medium_Red
	!byte	$64,$64+8,'C',Medium_Green
	!byte	$64,$64+16,'F',Light_Blue
	!byte	$64+8,$64,'1',Dark_Yellow
	!byte	$64+8,$64+8,'5',Light_Yellow

	!byte	$ff,	$64,		'-',Light_Red
	!byte	$ff,	$64+8,	'-',Light_Green
	!byte	$ff,	$64+16,	'-',Light_Blue
	!byte	$ff,	$64,		'-',Dark_Yellow
	!byte	$ff,	$64+8,	'-',Dark_Yellow

sprite1:
		+SpriteLine %...#....
		+SpriteLine %...#....
		+SpriteLine %#######.
		+SpriteLine %.#####..
		+SpriteLine %..###...
		+SpriteLine %.##.##..
		+SpriteLine %.#...#..
		+SpriteLine %........
sprite2:
		+SpriteLine %..#.....#..
;		+SpriteLine %...#...#...
;		+SpriteLine %..#######..
;		+SpriteLine %.##.###.##.
;		+SpriteLine %###########
;		+SpriteLine %#.#######.#
;		+SpriteLine %#.#.....#.#
;		+SpriteLine %...##.##...
