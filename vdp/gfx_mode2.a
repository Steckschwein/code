;
;	gfx mode 2 - 40x24 chars - all colors
;
*=$1000
    jmp main
!src <defs.h.a>
!src <t99xx.lib.a>

.safeirq

main
    sei
	jsr	vdp_display_off			;display off
	jsr vdp_mode_sprites_off	;sprites off

	+SetVector .pattern,	ptr1
	+SetVector .color,		ptr2
    
    lda #Cyan<<4|Black
    jsr vdp_mode_gfx2_blank
	jsr vdp_mode_gfx2			;enable gfx2 mode
    	
	lda	#0
	sta	tmp3
	sta	tmp4
	
-	ldx tmp3
	ldy tmp4
	jsr vdp_gfx2_set_pixel
	inc tmp3
	bne	-
	inc	tmp4
	bne	-
	
-	bra -
	
    jsr	vdp_mode_gfx2_load_bitmap

	+SetVector .pattern, addr
	lda	#<ADDRESS_GFX2_PATTERN
	ldy	#.WRITE_ADDRESS + >ADDRESS_GFX2_PATTERN
	ldx	#$18	;6k bitmap - $1800
	jsr	vdp_memcpy					;load the pic data --> pattern table at vram $0000

    lda #1<<0
	sta $0230
    +SetVector  $fffe, .safeirq	
	+SetVector  .blend_isr, $fffe	

	jsr vdp_mode_gfx2			;enable gfx2 mode
	cli
--  
	jsr vdp_gfx2_blend_on
;    jsr vdp_gfx2_blend_off
	
    bra	--
    
    sei
    +SetVector  .safeirq, irqvec
    cli

;	set pixel to gfx2 mode screen
;
;	X - x coordinate [0..ff]
;	Y - y coordinate [0..bf]
;	A - color [0..f]
;
; 	VRAM ADDRESS = 8(INT(X DIV 8)) + 256(INT(Y DIV 8)) + (Y MOD 8)
vdp_gfx2_set_pixel:
		+SyncBlank
		and #$0f
		sta tmp1	
		; calculate low byte vram adress
		txa
		and	#$f8
		sta	tmp2
		tya
		and	#$07
		ora	tmp2
		sta	a_vreg	;4 set vdp vram address low byte
		sta	tmp2	;3 safe vram low byte
		
		; high byte vram address - div 8, result is vram address "page" $0000, $0100, ...
		tya						;2
		lsr						;2
		lsr						;2
		lsr						;2
		sta	a_vreg				;set vdp vram address high byte
		ora #.WRITE_ADDRESS		;2 adjust for write
		tay						;2 safe vram high byte for write in y
	
		txa						;2 set the appropriate bit 
		and	#$07				;2
		tax						;2
;		nop						;2
		lda	bitmask,x			;4
		ora	a_vram				;4 read current byte in vram and OR with new pixel
		tax						;2 or value to x
		nop						;2
		nop						;2
		nop						;2
		lda	tmp2				;2
		sta a_vreg
		tya						;2
		nop						;2
		nop						;2
		sta	a_vreg
		+vnops
		stx a_vram	;set vdp vram address high byte
		rts
bitmask:
	!byte $80,$40,$20,$10,$08,$04,$02,$01

	
.blend_isr
    bit a_vreg
    bpl +
    +save
    lda #$80
    sta tmp5
    lda	#Black
	jsr vdp_bgcolor
	+restore
    
+   rti
    
    
.row=$100
vdp_gfx2_blend_off
    lda #Transparent<<4|Transparent
    bra +
vdp_gfx2_blend_on
    lda #$ff
+   sta tmp2
    +SetVector  (.WRITE_ADDRESS<<8)+ADDRESS_GFX2_COLOR+0,          ptr1
    +SetVector  (.WRITE_ADDRESS<<8)+ADDRESS_GFX2_COLOR+.row+$f8,   ptr2; +1 row and $f8 end of line

    stz tmp0
    lda #8
    sta tmp1
    lda #$f8
    sta tmp3
    stz tmp4
    stz tmp5
    
--  bit tmp5
    bpl --
    stz tmp5
    
    ldx	#12
-   lda ptr1l
    ldy ptr1h
	+vdp_sreg
 	ldy tmp0
.c  lda .color,y
    and tmp2
	sta a_vram
	iny
    cpy tmp1
	bne   .c
	inc   .c+2
	inc   .c+2
    inc   ptr1h
    inc   ptr1h
	dex
	bne  -

    sty tmp0    ;new offset
    sty ptr1l
    tya
    clc
    adc #08
    sta tmp1
    
    lda #(.WRITE_ADDRESS)+>ADDRESS_GFX2_COLOR
    sta ptr1h
    lda #>.color
    sta .c+2
    
    ldx	#12
-   lda ptr2l
    ldy ptr2h
	+vdp_sreg
    ldy tmp3
.c2 lda .color+.row,y
    and tmp2
	sta a_vram
	iny
    cpy tmp4
	bne   .c2
	inc   .c2+2
	inc   .c2+2
    inc   ptr2h
    inc   ptr2h
	dex
	bne  -
    
    lda tmp3
    sta tmp4
    sec
    sbc #08
    sta tmp3
    sta ptr2l
    
    lda #(.WRITE_ADDRESS)+>ADDRESS_GFX2_COLOR+.row+$f8
    sta ptr2h
    lda #>.color+.row
    sta .c2+2
    lda tmp0
    beq +
    jmp --
+   rts


	
!align 255,0
.pattern
;!bin "test/BRUNI_TRUDI.TIAP"
;!bin "test/DIGITS_0-9_2.TIAP"
;!bin "VESPA.TIAP"
;!bin "test/GIRL_02.TIAP"
.color
;!bin "test/BRUNI_TRUDI.TIAC"
;!bin "test/DIGITS_0-9_2.TIAC"
;!bin "VESPA.TIAC"
;!bin "test/GIRL_02.TIAC"