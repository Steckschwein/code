vdp_sreg:
	sta   a_vreg
	+nops	VRAM_WAIT
	sty   a_vreg
	rts
	
	
vdp_display_off:
	lda		#v_reg1_16k	;enable 16K ram, disable screen
	sta 	a_vreg
	+nops	VRAM_WAIT
	lda	  #v_reg1
	sta   a_vreg
	rts

;	input:
;	adrl/adrh vector set to vdp init table for al 8 vdp registers
vdp_init_reg:
	; setup video registers
   ldy	#$00
   ldx	#v_reg0
-  lda  (adrl),y
   sta   a_vreg
   +nops VRAM_WAIT
   stx   a_vreg
   iny
   inx
   cpy   #$08
   bne   -
   
   stz	vdp_x
   stz	vdp_y
   
   rts
	
vdp_bgcolor:
	stx   a_vreg
	lda   #v_reg7
	+nops	VRAM_WAIT
	sta   a_vreg
	rts


vdp_load_sprites16:
;	input:
;	adrl/adrh vector set to sprite table
;	a - low byte vram adress
;	y - high byte vram adress
;   x - amount of sprites
	stx	vdp_load_sprites16_c+1
	jsr	vdp_sreg
	ldx #$00
--	ldy	#$00
-	lda	(adrl),y
	+nops	VRAM_WAIT
	sta a_vram
	iny
	iny
	cpy	#$20
	bne	-
	ldy	#$00
	inc	adrl
-	lda	(adrl),y
	+nops	VRAM_WAIT
	sta a_vram
	iny
	iny
	cpy	#$20
	bne	-
	lda	adrl
	clc	
	adc	#$1f
	sta	adrl
	inx
vdp_load_sprites16_c:
	cpx   #$00
	bne   --
	rts
	
;	input:
;	a - low byte vram adress
;	y - high byte vram adress
;   x - amount of bytes to fill with pattern
;	adrl - pattern
vdp_fills:
	jsr   vdp_sreg
	lda   adrl
-   +nops	VRAM_WAIT
	sta   a_vram
	dex
	bne	-
	rts
	
; fill vram with pattern
;
vdp_fill:
;	a - low byte vram adress
;	y - high byte vram adress
;	x - amount of 256byte blocks
;	adrl - pattern
	jsr   vdp_sreg
	stx	vdp_fill_c+1				;modify compare :)
   ldx   #$00; page counter   
   ldy   #$00
   lda   adrl
-  +nops	VRAM_WAIT
   sta   a_vram
   iny
   bne   -
   inx   
vdp_fill_c:
   cpx   #$00
   bne   -
   rts
	
;	input:
;	adrl/adrh vector set
;	a - low byte vram adress
;	y - high byte vram adress
;  x - amount of 256byte blocks
vdp_memcpy:
	jsr   vdp_sreg
	stx	vdp_memcpy_c+1		;modify compare :)
   ldx   #$00; page counter   
   ldy   #$00
-  lda   (adrl),y
   +nops	VRAM_WAIT
   sta   a_vram
   iny
   bne   -
   inc   adrh
   inx   
vdp_memcpy_c:
   cpx   #$00
   bne   -
   rts
	
;	input:
;	adrl/adrh vector set
;	a - low byte vram adress
;	y - high byte vram adress
;  	x - amount of bytes to copy
vdp_memcpys:
	jsr	vdp_sreg
	stx	vdp_memcpys_c+1	;modify compare 
	ldy   #$00
-  	lda   (adrl),y
	+nops	VRAM_WAIT
	sta   a_vram
	iny
vdp_memcpys_c:
	cpy	#$00
	bne	-
	rts
	
vdp_x	!byte	0	;col
vdp_y	!byte	0  	;row
vdp_print:
	ldy		#$00
--	jsr		vdp_set_addr
-	lda		(adrl),y
	beq		++
	cmp		#$0d
	bne		+
	stz		vdp_x
	inc		vdp_y
	iny
	jmp		--
+	+nops 	VRAM_WAIT
	sta		a_vram
	iny
	bne		-
++	rts

vdp_set_addr:
	lda	vdp_x
;	and	#$1f	;0-31
;	sta vdp_x
	lda	vdp_y	; * 32
	asl	
	asl	
	asl	
	asl
	asl
	ora	vdp_x
	sta	a_vreg	
	
	lda	vdp_y	; * 32
	lsr			; /8 -> page offset 0-2
	lsr
	lsr
	clc
	adc	#$18+$40
	sta	a_vreg
	rts

vdp_xy:
	stx	vdp_x
	sty	vdp_y
	rts
	
!macro V_GotoXY .x, .y {
	lda	.x
	sta vdp_x
	lda .y
	sta	vdp_y
}