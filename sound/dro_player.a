; ---------------------------------------------------------------------
; DRO AdLib OPL2 player for Commodore 64 equipped with SFX
; Sound Expander cartridge with YM3812 chip (the "normal" chip
; this cartridge was shipped with may work, but since OPL2 features
; do not exist on those, music will be somewhat "odd" to listen to).
; VERSION: 1.2a
; ---------------------------------------------------------------------
; (C)2011 LGB (Gábor Lénárt) lgb@lgb.hu, this program can be used
; according to the GNU/GPL 2 or 3 (or later, if a new one is released) license.
; License: http://www.gnu.org/licenses/gpl-2.0.html
; License: http://www.gnu.org/licenses/gpl-3.0.html
; Personal note: PLEASE drop me a mail if you have ideas to modify
; this program (patches, bugs, features etc) or if you use it in your work,
; as the GPL defines, you should provide the source of your work then
; too as it must be GPL then. Thanks! Of course any feedback is welcome, anyway.
; ---------------------------------------------------------------------
; Needs Sound Expander cartridge equipped with YM3812 chip.
; It plays DOSBOX captured "DRO" files, version2 format is supported only
; (see later in the source at the .DEFINE DRO_FILE statement).
; ---------------------------------------------------------------------
; QUICK INSTALL/TEST HOWTO:
;
; Assembler:
;	Get ca65 from the cc65 suite (www.cc65.org). Yes, it's a C
;	compiler for 6502 in general, but we need only the
;	assembler&linker only, not the compiler itself.
; Preparation:
;	You must get a DRO (v2) file from somewhere (grab one with DOSBOX
;	for example), you must place it into the directory where this
;	asm source is, and you may want to modify the source at the
;	.DEFINE DRO_FILE for incbin'ing the right file. I can't
;	distribute music too much, since I haven't got an own one ...
;	PLEASE CONTACT ME, if you have DRO file which can be distributed
;	- as an example - with the source! IT WOULD BE REALLY NICE!
; Compilation:
;	Command: cl65 -t c64 -o c64_play.prg c64_play.asm
;	Do not forget the "-t c64"!
; Test (with VICE emulator):
;	Command: x64 -sfxse -sfxsetype 3812 -autostart c64_play.prg
;	You can configure the SFX Sound Expander cartridge "by hand"
;	too in the menu of the VICE, of course. About VICE: it did not
;	work for me (version 2.3) on Linux (no sound and/or even crash),
;	also I've heard reports
;	that it has problems with Windows too (I don't have Windows,
;	so I can't tell) sometimes (?) at least. You may want to check
;	VICE's SVN repository out for the development release; it works
;	for me now (2.3.11, SVN revision I've tested with: 24920)!!
;	The best thing is test on the real hardware though!
;	UPDATE:
;	* thanks to Raj for testing it on a real hardware :)
;	* thanks to Soci for suggesting devel version of VICE to test with
; ---------------------------------------------------------------------
; What I could test with VICE (video):
;	http://www.youtube.com/watch?v=umiL62CPObg
; Project can be found here:
;	https://code.google.com/p/c64-sfx-cartridge-player/
; ---------------------------------------------------------------------
; TODO list:
;	* rework the player to use IRQ for playing
;	* get a "safe" (free to distribute) DRO music to include
;	* SID mode: try to mimic the cartridge with SID: will sound
;	  awful (with rapidly changed channels) but it can be used to
;	  test the stuff without a cartridge too
; ---------------------------------------------------------------------

*=$1000
	jmp main

ZP=$80			;	.RES 2 ; general purpose zeropage locations we use (two bytes)
song_p=$82		;	.RES 2 ; byte pointer inside the DRO stream (two bytes)

.nops_addr = 14
.nops_data = 96

screen_reg_addrs:
!fill	512,32


;song_length		= song + 12  ; we don't use length currently, but the label after the included DRO to match against the position counter
cmd_short_delay		= song + 23
cmd_long_delay		= song + 24
codemap_len		= song + 25
codemap			= song + 26

SFX_YM_SELECT_REGISTER	= $250
SFX_YM_DATA_REGISTER	= SFX_YM_SELECT_REGISTER + 1 

SCREEN_ADDRESS		= $0400
;COLOR_ADDRESS		= $D800
;COLOR_RAM_OFFSET	= COLOR_ADDRESS - SCREEN_ADDRESS
REGDUMP_START_POS	= SCREEN_ADDRESS + 41
SONG_POSITION_POS	= SCREEN_ADDRESS + 24*40
MSG_POS			= SCREEN_ADDRESS + 22*40
SONG_NAME_POS		= SONG_POSITION_POS + 15

; You need a version 2 DRO file here
; DOSBOX 0.74 (maybe 0.73 too, but note: older versions
; produces older formatted DRO files which are NOT supported
; at all!) can produce such a file in OPL2 capture mode
; No check about the file, it must be version 2 DRO, and
; the whole C64 program must fit into the memory of course
; with the DRO included.
; This name is also stored as the song name (and shown in the
; player) however, since we use screen codes, it won't be so
; correct. File name should not be too long because it should
; fit onto the screen. The name is also used to .INCBIN the
; actual file, see later at .INCBIN
;.DEFINE DRO_FILE "dune_title.dro"
;.DEFINE DRO_FILE "test.dro"

;header: .BYTE " C64 DRO player v1.2a by LGB lgb@lgb.hu "
;header_size = * - header

song:
	; Do not put anything extra here: label "song" must be
	; just before the DRO stream, and "song_end" should be
	; after it! Also read note at the .DEFINE line above.
;.INCBIN DRO_FILE
!ifdef dn2_1 {
!bin "dn2_1.dro"
}
!ifdef dn2_2 {
!bin "dn2_2.dro"
}
!ifdef prowla {
!bin "prowla.dro"
}

song_end:

;dro_file_name: .BYTE DRO_FILE
;dro_file_name_size = * - dro_file_name


	
reset_sfx:
	LDA #0
	TAY
-	
	STY SFX_YM_SELECT_REGISTER ; select YM register

	; wait 12 cycles according to spec
	!for .i,1,.nops_addr {
		NOP
	}

    STA SFX_YM_DATA_REGISTER ; write to selected YM register now
    jsr .wait_data
    LDX #4 ; some more delay we need here ...
    INY
    BNE -
	RTS




main:
	; Disable interrupts (timing can be "perfect")
	; Note: later, the stuff should be rewritten to be
	; IRQ based player ...
	; The timing is a disaster in the current code:
	; we only count instruction cycles more or less correctly
	; assuming about 1MHz clock (the more accurate value
	; depends on PAL/NTSC, etc). Also, because of other things
	; (fetching byte, writing SFX regs, displaying) needs
	; time and it is not counted, the exact timing is surely bad.
	; This is only a quick TEST, do not except advanced
	; features now.
	SEI
	LDY #0 ; AdLib register counter
	LDX #13 ; number of bytes to display within a C64 text line


main_player:
	; We must find the (C64 memory) address of the first byte
	; to be "played". DRO's header is not a fix sized in length,
	; we must add the size of "codemap table" after it's starting
	; address to get that.

	; Initialize low byte
	LDA #<(codemap)
	CLC
	ADC codemap_len
	STA song_p
	; Initialize high byte
	LDA #>(codemap)
	ADC #0 ; use carry too!
	STA song_p+1
	
	; Clear SFX registers ...
	JSR reset_sfx
	; Start playing actually ...
play_loop:
	JSR chk_kbd
	; fetch two bytes from the DRO stream, store those in zeropage vars ZP and ZP+1
	; we can't increment pointer in "once" (with Y being 0 then 1, then
	; the pointer increment) as we don't know the
	; stream is algined two 2 bytes boundary (depends on the codemap table
	; size, specific to a given DRO file - even if the start of the file is aligned!)
	LDY #0
	LDA (song_p),Y
	STA ZP
	INC song_p
	BNE +
	INC song_p+1
+	LDA (song_p),Y
	STA ZP+1
	INC song_p
	BNE +
	INC song_p+1
+
	; Ok, check the fetched byte now
	LDA ZP ; now we must examine the 1st byte: can be command or codemap position
	CMP cmd_short_delay ; is it a short delay command?
	BEQ short_delay
	CMP cmd_long_delay  ; is it a long delay command?
	BEQ long_delay
	; no delay commands: the byte is a codemap position
	TAX ; move to X
	; clear delay info, no delay
	; Convert into register number
	LDA codemap,X
	; Note: we should use delays after writing registers (see: reset_sfx)
	; However, at this point we have enough instructions between writes,
	; so I simply don't need any additional delay (I hope so, at least)
	STA SFX_YM_SELECT_REGISTER
	; Wait 12 cycles according to spec
	!for .i,1,.nops_addr {
		NOP 
	}
	STA ZP ; store YM register number in ZP

	LDA ZP+1
	STA SFX_YM_DATA_REGISTER
	jsr .wait_data

	LDA song_p+1
	CMP #>(song_end)
	BCC play_loop
	LDA song_p
	CMP #<(song_end)
	BCC play_loop
	JMP main_player ; end of the song: start it again!
; In delay codes we check keyboard to see if we want to exit.
; That also used as a part of the delay.
short_delay: ; "short delay" in DRO files means waiting X+1 miliseconds
	LDX ZP+1 ; after this, we should wait X+1 msecs
	INX
-	LDY #40  ;25*40=1000 cycles [25=20 - see below - plus 5], about one msec.
--	JSR chk_kbd ; 6 cycles for JSR, 14 for the subrutine: 20 cycles
	DEY   ; 2 cycles
	BNE --  ; 3 cycles
	DEX
	BNE -
	JMP play_loop
long_delay: ; "long delay" in DRO files means waiting (X+1)*256 miliseconds
	LDX ZP+1  ; after this, we should wait (X+1)*256 msecs
	INX
-	TXA
	PHA
	LDX #0
--	LDY #40
--- JSR chk_kbd
	DEY
	BNE ---
	DEX
	BNE --
	PLA
	TAX
	DEX
	BNE -
	JMP play_loop
chk_kbd:  ; if I am correct, it's about 14 cycles normally
;	LDA $DC01	; 4 cycles

;	AND #%10000000	; 2 cycles
	!for .i,0,84 {
		nop
	} 
	

;	BEQ reset	; 2 cycles (branch is not taken)
	RTS		; 6 cycles
reset: ; It's now safe to turn off your computer. :)
	JSR reset_sfx

.wait_data
	; .nops_data - 2*6 cycles (JSR/RTS)
	!for .i,1,.nops_data - 12 {
		NOP 
	}
	rts 
