!source <defs.h.a>
!src <kernel.h.a>

!source <shell.h.a>
!source <bios.h.a>
!source <ym3812.h.a>
;!source <t9929.h.a>

!source <via.h.a>

CPU_CLOCK=clockspeed * 1000000

.imf_ptr=tmp2
.imf_ptr_h=tmp3
.delayh=tmp4
.delayl=tmp5

*=steckos_start

main
;    +SetVector .test_filename, filenameptr
	+copyPointer paramptr, filenameptr

	ldy #$00
-	lda (filenameptr),y
	beq +
	
	iny
	bra -
+
	dey 
	lda (filenameptr),y
	and #!$20
	cmp #'F'
	beq +
	jmp .error
+

	dey 
	lda (filenameptr),y
	and #!$20
	cmp #'L'
	bne +

	dey 
	lda (filenameptr),y
	and #!$20
	cmp #'W'
	bne +

	lda #$04
	sta .temponr
+
	jsr open
    phx         ;save fd offset

	lda errno
	beq +
	jmp .error
+
	+SetVector imf_data, sd_blkptr

	jsr read    
	lda errno
	beq +
	jmp .error
+   
	plx
	lda fd_area + FD_file_size + 0, x
	clc
	adc #<imf_data 
	sta imf_end

	lda fd_area + FD_file_size + 1, x
	adc #>imf_data
	sta imf_end+1
    
	jsr close

	+SetVector	imf_data, .imf_ptr
	stz .delayl
	stz .delayh

	jsr .init_opl2

	sei
	; TODO - set clockspeed according to filename extension
	; 560 for imf
	; 700 for wlf

	; tempo is one of 280Hz (DN2), 560Hz (imf), 700Hz (.wlf) -> 4Mhz
	; 280 Hz --> 14280
	; 560 Hz -->  7140
	; 700 Hz -->  5714
	; tempo = 560
	ldx .temponr
	; ldx #$02
	lda .tempo+0,x
	; lda #<(CPU_CLOCK/tempo)
	sta via1t1cl  
	lda .tempo+1,x
	          ; set low byte of count
	; lda #>(CPU_CLOCK/tempo)
	sta via1t1ch            ; set high byte of count

    lda #%11000000
	sta via1ier             ; enable VIA1 T1 interrupt
	lda #%01000000          ; T1 continuous, PB7 disabled  
	sta via1acr 

	+copyPointer user_isr, old_isr
	+SetVector .player_isr, user_isr

	cli
    
    +Println
-	
 	jsr keyin
 	cmp #'x'
 	beq +
 	jmp -
+	
 	sei
    
 	lda #%01111111          ; disable T1 interrupt
    sta via1ier             
; SR shift in, External clock on CB1
    lda #%00001100
    sta via1acr

 	+copyPointer old_isr, user_isr
 	jsr .init_opl2
 	cli
 	jmp (retvec)

.player_isr
	bit via1ifr		; Interrupt from VIA?
	bpl +++

	bit via1t1cl	; Acknowledge timer interrupt by reading channel low	

	; delay counter zero? 
	lda .delayh    
	clc
	adc .delayl
	beq ++	
	
	; if no, 16bit decrement and exit routine
	+dec16 .delayh

	bra +++
++	
	ldy #$00
	lda (.imf_ptr),y
	sta opl_stat
	
	iny
	lda (.imf_ptr),y

	jsr opl2_delay_register

	sta opl_data		

	; jsr opl2_delay_data

	iny
	lda (.imf_ptr),y
	sta .delayh

	iny
	lda (.imf_ptr),y
	sta .delayl

	; song data end reached? then jump back to the beginning
	lda .imf_ptr_h
	cmp imf_end+1
	bne +
	lda .imf_ptr
	cmp imf_end+0
	bne +
	+SetVector	imf_data, .imf_ptr
	bra +++
+	

	;advance pointer by 4 bytes
	clc
	lda #$04
	adc .imf_ptr
	sta .imf_ptr
	bcc +
	inc .imf_ptr_h
+	
    lda #10
    jsr chrout
    lda .imf_ptr_h
    jsr hexout
    lda .imf_ptr
    jsr hexout

+++
    rts


.error
	+PrintString .errtxt
.end	
	jmp (retvec)
.errtxt		!text "load error", $00
.tempo
	!16 (CPU_CLOCK/240)
	!16 (CPU_CLOCK/560)
	!16 (CPU_CLOCK/700)
.temponr
	!byte $02
.test_filename  !text "test.wlf",0

!source <ym3812.a>
!source <t99xx.lib.a>
old_isr	!16 $ffff
imf_end	!16 $ffff
imf_data