!source <defs.h.a>
!src <kernel.h.a>

!source <shell.h.a>
!source <bios.h.a>
!source <ym3812.h.a>
;!source <t9929.h.a>

!source <via.h.a>


CPU_CLOCK=clockspeed * 1000000


.delayh=tmp0
.delayl=tmp1
imfptr =tmp2

*=$1000

main	
	; lda #$02
	; sta .temponr
	+copyPointer paramptr, filenameptr
	; +SetVector .filename, filenameptr


	ldy #$00
-	lda (filenameptr),y
	beq +
	
	iny
	bra -
+
	dey 
	lda (filenameptr),y
	and #!$20
	cmp #'F'
	beq +
	jmp .error
+

	dey 
	lda (filenameptr),y
	and #!$20
	cmp #'L'
	bne +

	dey 
	lda (filenameptr),y
	and #!$20
	cmp #'W'
	bne +

	lda #$04
	sta .temponr
+

	jsr open
 	phx

	lda errno
	beq +
	jmp .error
+

	+SetVector imf_data, sd_blkptr

	jsr read
	lda errno
	beq +
	jmp .error
+

	plx

	lda fd_area + FD_file_size + 0, x
	clc
	adc #<imf_data 
	sta imf_end

	lda fd_area + FD_file_size + 1, x
	adc #>imf_data
	sta imf_end+1

	jsr close


	; +Println
	sei
	bit	a_vreg

	jsr vdp_irq_off
	+SetVector	imf_data, adrl
	stz .delayl
	stz .delayh

	jsr .init_opl2

	sei
	; TODO - set clockspeed according to filename extension
	; 560 for imf
	; 700 for wlf

	; tempo is one of 280Hz (DN2), 560Hz (imf), 700Hz (.wlf) -> 4Mhz
	; 280 Hz --> 14280
	; 560 Hz -->  7140
	; 700 Hz -->  5714
	; tempo = 560
	ldx .temponr
	; ldx #$02
	lda .tempo+0,x
	; lda #<(CPU_CLOCK/tempo)
	sta via1t1cl  
	lda .tempo+1,x
	          ; set low byte of count
	; lda #>(CPU_CLOCK/tempo)
	sta via1t1ch            ; set high byte of count
 
	lda #%11000000
	sta via1ier             ; enable VIA1 T1 interrupts
	lda #%01000000
	sta via1acr             ; T1 continuous, PB7 disabled  
	
	+SetVector .irq, irqvec
	cli


; -	
; 	jsr .getkey
; 	cmp #'x'
; 	beq +
; 	jmp -

; +
; 	jsr .init_opl2
-	jmp -

.irq
	; +save
	
	bit via1ifr		; Interrupt from VIA?
	bpl +++

	bit via1t1cl	; Acknowledge timer interrupt by reading channel low
	

	; delay counter zero? 
	lda .delayh
	clc
	adc .delayl
	beq ++ 

	
+	
	; if no, 16bit decrement and exit routine
	+dec16 .delayh



	bra +++

++	

	ldy #$00
	lda (adrl),y
	sta opl_stat
	
	
	iny
	lda (adrl),y

	jsr opl2_delay_register

	sta opl_data		


	; jsr opl2_delay_data

	iny
	lda (adrl),y
	sta .delayh

	iny
	lda (adrl),y
	sta .delayl

	; song data end reached? then jump back to the beginning
	lda adrh
	cmp >imf_end
	bne +
	lda adrl
	cmp <imf_end
	bne +
	+SetVector	imf_data, adrl
	bra +++
+	


	;advance pointer by 4 bytes
	clc
	lda #$04
	adc adrl
	sta adrl
	bcc +
	inc adrh
+	

+++
	; +restore
	rti


.error
	+PrintString .errtxt

.end	
	jmp (retvec)
.errtxt		!text "load error", $00
; .filename 	!text "foo.imf",$00
.tempo
	!16 (CPU_CLOCK/240)
	!16 (CPU_CLOCK/560)
	!16 (CPU_CLOCK/700)
.temponr
	!byte $02

!source <ym3812.a>
!source <t99xx.lib.a>
imf_end	!16 $ffff
imf_data