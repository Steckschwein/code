!source <defs.h.a>
!source <bios.h.a>
!source <ym3812.h.a>
!source <via.h.a>

CPU_CLOCK=8000000
.regsel=tmp0
.regval=tmp1
.delayh=tmp2
.delayl=tmp3

imfptr 	= tmp4
*=$1000



; !source <t99xx.lib.a>

main	
	+Println
	+SetVector	imf_data, adrl
	jsr .init_opl2
	jsr .init_timer


-	
	jmp -



tempo = 700
.init_timer
	sei
							; tempo is one of 280Hz (DN2), 560Hz (imf), 700Hz (.wlf) -> 4Mhz
							; 280 Hz --> 14280
							; 560 Hz -->  7140
							; 700 Hz -->  5714
	lda #<(CPU_CLOCK/tempo)
	sta via1t1cl            ; set low byte of count
	lda #>(CPU_CLOCK/tempo)
	sta via1t1ch            ; set high byte of count
 
	lda #%11000000
	sta via1ier             ; enable VIA1 T1 interrupts
	lda #%01000000
	sta via1acr             ; T1 continuous, PB7 disabled  
	+SetVector .irq, irqvec
	cli
	rts

.irq
	; +save

	
	bit via1ifr		; Interrupt from VIA?
	bpl +++
	
	bit via1t2cl	; Acknowledge timer interrupt by reading channel low


	; delay counter zero? 
	lda .delayh
	bne +
	lda .delayl
	bne +

	; if yes, jump to register setting
	bra ++
+	
	; if no, 16bit decrement
	dec .delayl
	bne +
	dec .delayh
+
	bra +++

++
	; song data end reached? then dont do anything anymore
	lda adrh
	cmp #>.songend
	bne +
	lda adrl
	cmp #<.songend
	beq +++
+

	
	

	; +Println

	; lda #':'
	; jsr chrout
	; lda #' '
	; jsr chrout
	
	ldy #$00
	lda (adrl),y
	tax
	; jsr hexout

	; lda #' '
	; jsr chrout

	ldy #$01
	lda (adrl),y
	; jsr hexout

	stx opl_stat
	jsr opl2_delay_register
	sta opl_data
	jsr opl2_delay_data


	; lda #' '
	; jsr chrout

	ldy #$03
	lda (adrl),y
	sta .delayl
	; jsr hexout
	ldy #$02
	lda (adrl),y
	sta .delayh
	; jsr hexout



	clc
	lda #$04
	adc adrl
	sta adrl
	bcc +
	inc adrh
+	


	; +Println

+++
	; +restore
	rti

	
; .play_imf
; 	+SetVector	imf_data, .adrl
; 	jsr	.song_length
	
; 	ldy	#$00
; --	lda	.imf_update_wait	;wait until flag cleared
; 	bne	--

; 	inc	tmp4
; 	lda	tmp4
; 	jsr	vdp_bgcolor
	
; 	jsr	.next_data			;next data block
; 	jsr .is_songend			;song end ? indicated by carry=1
; 	bcs	++
	
; 	lda	.regsel		;reg select
; 	sta	a_sound_rs
; 	+snd_nops
; 	lda	.regval		;reg data
; 	sta	a_sound_rw
	
; 	lda	.delayl		;delay > 0, wait until next update
; 	bne	+
; 	lda	.delayh
; 	bne	+
; -	tya				;y overflow?
; 	bne	--
; 	inc	.adrh
; 	lda	#'.'
; 	jsr	chrout
; 	jmp	--
; +	inc	.imf_update_wait	; trigger delay countdown
; 	bra	-
; ++	rts

; .song_length
; 	clc
; 	lda	#<.songend
; 	sbc	.adrl
; 	sta	.length_l
; 	lda	#>.songend
; 	sbc	.adrh
; 	sta	.length_h
; 	rts

; .is_songend
; 	phy
; 	ldy	#$00
; -	lda	(.adrl),y
; 	cmp	.songend,y
; 	bne	+
; 	iny	
; 	cpy	#$04
; 	bne	-
; 	sec
; 	bra	++
; +	clc
; ++	ply
; 	rts

; .next_data
; 	lda	(.adrl),y			
; 	sta	.regsel
; 	iny
; 	lda	(.adrl),y
; 	sta	.regval
; 	iny
; 	lda	(.adrl),y
; 	sta	.delayh
; 	iny
; 	lda	(.adrl),y
; 	sta	.delayl
; 	iny
; 	rts
		
; .load_imf
; 	ldx	#$00
; -	lda	adlib_id,x	;check ADLIB signature
; 	cmp	.imf_file,x
; 	bne	+
; 	inx
; 	cpx	#$05
; 	bne	-
; 	bra	.load_imf_normal
; +	lda	adlib_id+5	;check version != 1
; 	cmp	#$01
; 	bne	.load_imf_normal
; 	bra	.load_imf_with_header
; 	;TODO			;check file name
					
; +	clc				;no imf - clear carry
; 	rts
; .load_imf_normal
; .load_imf_with_header	
; 	sec
; 	rts

; .length_h 	!byte 0
; .length_l	!byte 0
; .imf_update_wait !byte 0
; adlib_id !text "ADLIB"

!align 255,0
imf_data
.imf_file
!bin "test/pacman.wlf"
.songend
!byte $55, $aa, $55, $aa

!source <ym3812.a>