; pointer for string output functions 
msgptr 		= $f8
;0011    f3    -
;0100    f4    +
;0101    f5    +
;0110    f6    +
;0111    f7    +
;1000    f8    +
;1001    f9    +
;1010    fa    -
;1011    fb    -
;1100    fc    +
;1101    fd    -(+)
;1110    fe    -

; *** Print character on LCD (40 character)
; registers preserved
lcdctl		= $d200
lcddata		= lcdctl+1 
lcdprint
i_lcdprint  pha
			sta lcddata            ;output the character
			jsr i_lcdbusy
			lda lcdctl            ;get current ddram address
			and #$7f
			cmp #$28          	;wrap from pos $13 (line 1 char 20)...
			bne +
			lda #$c0            	;...to $40 (line 2 char 1)
			sta lcdctl
			jsr i_lcdbusy
+			pla
			rts

; *** print string on lcd
; registers preserved
lcdstring
i_lcdstring 
         pha                 ;save a, y to stack
			tya
			pha
			ldy #$00
-		  	lda (msgptr),y
			beq +
			jsr lcdprint
			iny
			bne -
+			pla                 ;restore a, y
			tay
			pla
			rts

; *** Print 2 digit hex number on LCD
; A, X registers preserved
; Lookup table for HEX to ASCII
hexascii	!text "0123456789ABCDEF"
lcdhex
i_lcdhex
         pha
			phy
			phx
         tax
			lsr                ;shift high nybble into low nybble
			lsr 
			lsr 
			lsr 
			tay
			lda hexascii,y      ;convert to ascii
			jsr lcdprint        ;print value on the lcd
         txa
			and #$0f            ;select low nybble
			tay
			lda hexascii,y      ;convert to ascii
			jsr lcdprint        ;print value on the lcd
			
			plx
			ply
			pla
			rts
; *** Clear LCD display and return cursor to home
; registers preserved
lcdclear
i_lcdclear  
         pha
			lda #$01
			sta lcdctl
			jsr i_lcdbusy
			lda #$80
			sta lcdctl
			jsr i_lcdbusy
			pla
			rts

; *** Wait for LCD busy bit to clear
; registers preserved
i_lcdbusy   pha
-			lda lcdctl            ;read from lcd register 0
			and #$80            ;check bit 7 (busy)
			bne -
			pla
			rts
