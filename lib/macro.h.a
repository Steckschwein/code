!ifdef macro_h_a !eof
macro_h_a = 1

!macro SetVector .word, .addr {
        lda #<.word
        sta .addr
        lda #>.word
        sta .addr+1
}

!macro PrintChar char {
        lda #char
        jsr chrout
}
!macro Println {
    lda #10
    jsr chrout
    lda #13
    jsr chrout
}

!macro PrintString .word {
		+SetVector .word, msgptr
        jsr strout
}
!macro String .addr {
		phy
    	ldy #$00
-		lda .addr,y
		beq +
		jsr chrout
		iny
		bne -
+		ply
}
!macro PrintStringAt .word,.x,.y {
 	lda #.x
	sta	crs_x
	lda	#.y
	sta crs_y
	+PrintString .word
 }

!macro save{
	pha
	phy
	phx
}
!macro restore{
	plx
	ply
	pla
}

!macro Copy .src, .trgt, .len {
	ldx #.len
-	lda .src,x
	sta .trgt,x
	dex
	bpl -
}

!macro toUpper {

	cmp #$60 ; Is lowercase?
	bcc +
	and	#$DF
+
}

!macro toLower {
	ora #$20
}


; !macro SDBlockAddr .src {
; 	ldx #$03
; 	ldy #$00

; -	lda .src,x
; 	sta sd_cmd_param,y	
; 	iny
; 	dex
; 	bpl -
; }
!macro debug .x {
	lda #.x
	jsr chrout
} 
!macro debug32 .x {
!for i,3,0 {
	lda .x+i
	jsr hexout
}
}

!macro ShellPrint {
	jsr chrout
}

!macro ShellPrintHex {
	jsr	hexout
}
; !macro ShellPrintDec {
; 	; leading zero hack
; 	cmp #10
; 	bcs +
; 	pha
; 	+PrintChar '0'
; 	pla
; +	
; 	jsr decout
; }

!macro ShellPrintString .word {
	+SetVector .word,	msgptr
	jsr strout
}

