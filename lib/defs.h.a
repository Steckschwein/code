!ifdef defs_h_a !eof
defs_h_a = 1

;----------------------------------------------------------------------------------------------
; constants
;----------------------------------------------------------------------------------------------
clockspeed	= 4 ; 4 MHz
jiffies    = 32767  ; jiffy count 100Hz for 1MHz systen
count		= clockspeed * jiffies

; IO Channels
!address {
chn_out = $00
chn_in  = $01
}

dev_screen = $00
dev_lcd    = $01
dev_uart   = $02


;
;CSUART   ; UART at $0200
;CSVIA    ; VIA  at $0210
;CSVDP    ; VDP  at $0220
;CSSND    ; SND  at $0230
;CSLCD    ; LCD  at $0240
;----------------------------------------------------------------------------------------------
; zeropage locations 
;----------------------------------------------------------------------------------------------

!address {
; 	dividend = $c0
; ; divisor = $c4
; remainder = $c6
; result = dividend

; Address pointers for serial upload
.startaddr	= $c0
.endaddr    = $c2
.length		= $c4

; Cursor Position
crs_x	= $d0
crs_y	= $d1
crs_ptr	= $d2 ; 2 bytes

; Character Ouput stream
;coutvec = $d4


; IRQ vector
irqvec		= $e0
; ramend
ram_end_l   = $e4
ram_end_h   = ram_end_l+1

outvec		= $e6
invec		= $e8
paramvec	= $ea


; general purpose temp variables
tmp0		= $f0
tmp1		= $f1
tmp2		= $f2
tmp3		= $f3
tmp4		= $f4
tmp5		= $f5
tmp6		= $f6
tmp7		= $f7


; pointer to filename for fs operations (open...)
filenameptr		= $fa

; pointer for io block operations
sd_blkptr 	= $fc


; pointer for string output functions 
msgptr 		= $fe

; general purpose address location
; transfer routine addresses
.addr 		= $e2
.adrl     = .addr
.adrh     = .addr+1

; MEMCTL Register
memctl    = $02f0
; SD CArd command parameter/result buffer
sd_cmd_param = $0300
sd_cmd_chksum	= sd_cmd_param+4
sd_cmd_result = $031f

fat_errno	 		= $0300
;OBSOLETE
; fat_begin_lba 		= $0301 ; Begin of FAT32, 4 bytes

fat_reserved_sect 	= $0310 ; number of reserved sectors, 2 bytes
cluster_begin_lba 	= $0312 ; begin of cluster area, 4 bytes
; sectors_per_fat 	= $0320 ; sectors per fat, 4 bytes
sectors_per_cluster = $0316 ; sectors per cluster, 1 byte
;lba_addr			= $0325 ; lba address, 4 bytes
lba_addr = $20
cluster_number		= $0317
root_dir_first_clus = $031b ; first cluster of root dir, 4 bytes

fd_area				= $0320 ; File descriptor area, 16x8byte 



sd_blktarget 		= $0400

.steckos_start		= $1000	

; SD Card error
; $ff - No Card
; $0f - Invalid Card
; $00 - No error
sd_cmd_errno = $0300
errno = $0300

charset  	 =$e000
charset_6x8  =$e800
}

;----------------------------------------------------------------------------------------------

;----------------------------------------------------------------------------------------------
; MACROS
;-------------------------------------------------------------------------------------------	---
!macro SetVector .word, .addr {
        lda #<.word
        sta .addr
        lda #>.word
        sta .addr+1
}

!macro PrintChar char {
        lda #char
        jsr chrout
}
!macro PrintString .word {
		+SetVector .word, msgptr
        jsr strout
}
!macro String .addr {
		phy
    	ldy #$00
-		lda .addr,y
		beq +
		jsr chrout
		iny
		bne -
+		ply
}
!macro PrintStringAt .word,.x,.y {
	ldx #.x
	ldy #.y
	jsr lcdxy	

	+SetVector .word, msgptr
    jsr lcdstring

}

!macro save{
	pha
	phy
	phx
}
!macro restore{
	plx
	ply
	pla
}

!macro Copy .src, .trgt, .len {
	ldx #.len
-	lda .src,x
	sta .trgt,x
	dex
	bpl -
}

!macro toUpper {
    cmp #$60 ; Is lowercase?
	bcc +
	sec
	sbc #$20 ; Yes, make uppercase
+	
}


; !macro SDBlockAddr .src {
; 	ldx #$03
; 	ldy #$00

; -	lda .src,x
; 	sta sd_cmd_param,y	
; 	iny
; 	dex
; 	bpl -
; }
!macro debug .x {
	lda #.x
	jsr lcdprint
} 
!macro debug32 .x {
!for i,3,0 {
	lda .x+i
	jsr lcdhex
}
}
