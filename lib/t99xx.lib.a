!source <macro.h.a>
!source <t9929.h.a>

.ROWS=23
;
;	TODO	
;		improve some functions,  avoid nop for vdp write delay 2µs by opcode reordering
;		investigate the difference between wdc and rockwell if no nop is used
;

vdp_nopslide:
		nop			;2cl
		nop			;2cl
		nop			;2cl
		nop			;2cl
		nop			;2cl
		nop			;2cl
		nop			;2cl
		nop			;2cl
		nop			;2cl
		nop			;2cl
		nop			;2cl
		nop			;2cl
		rts			;6cl

vdp_irq_off
	lda #v_reg1_16k|v_reg1_display_on|v_reg1_spr_size	;switch interupt off
	ldy	#v_reg1
vdp_sreg:
	+vdp_sreg
	rts

vdp_display_off:
;	jsr	.vdp_wait_blank
	lda		#v_reg1_16k	;enable 16K ram, disable screen
	sta 	a_vreg
    +vnops
    lda	  	#v_reg1
	sta   	a_vreg
	rts

;	input:
;	a - low byte vram adress
;	y - high byte vram adress
;  	x - amount of bytes to fill with pattern
;	adrl - pattern
vdp_fills:
	+vdp_sreg
	lda   adrl     ;3
-  	+vnops          ;2
	dex             ;2
	sta   a_vram    ;4
	bne	-           ;3
	rts
	
; fill vram with pattern
;
vdp_fill:
;	a - low byte vram adress
;	y - high byte vram adress
;	x - amount of 256byte blocks (page counter)
;	adrl - pattern
	+vdp_sreg
	ldy   #$00      ;2
	lda   adrl     ;3
-  	+vnops          ;2
	iny             ;2
	sta   a_vram    ;
	bne   -         ;3
	dex
	bne   -
	rts

;	input:
;	adrl/adrh vector set
;	a - low byte vram adress
;	y - high byte vram adress
;  	x - amount of 256byte blocks (page counter)
vdp_memcpy
	+vdp_sreg
	ldy   #$00      ;2
-  	lda   (addr),y ;5
	iny             ;2
	+vnops
	sta   a_vram    ;1 opcode fetch
	
	bne   -         ;3
	inc   adrh
	dex
	bne   -
	rts
	
;	input:
;	adrl/adrh vector set
;	a - low byte vram adress
;	y - high byte vram adress
;  	x - amount of bytes to copy
vdp_memcpys:
	+vdp_sreg
	ldy   #$00
-  	lda   (adrl),y ;5
	iny             ;2
	dex             ;2
	+vnops
	sta   a_vram    ;4
	bne	-
	rts

vdp_mode_text_blank
	ldx	#$04				; 4 x 256 bytes
	bra	+
vdp_mode_gfx1_blank		; 3 x 256 bytes
	ldx	#$03
+	lda	#' '					;fill vram screen with blank
	sta	adrl
	lda	#<ADDRESS_GFX1_SCREEN
	ldy	#.WRITE_ADDRESS + >ADDRESS_GFX1_SCREEN
	bra	vdp_fill

!ifndef bios_stuff {
;
; blank gfx mode 2 with 
; adrl - color to fill
;    
vdp_mode_gfx2_blank:		; 2 x 6K
	sta adrl
	lda #<ADDRESS_GFX2_COLOR
	ldy #.WRITE_ADDRESS + >ADDRESS_GFX2_COLOR
	ldx	#$18
	jsr	vdp_fill
	stz adrl
	lda #<ADDRESS_GFX2_PATTERN
	ldy #.WRITE_ADDRESS + >ADDRESS_GFX2_PATTERN
	ldx	#$18
	bra	vdp_fill
}

vdp_mode_gfx1_sprites_off
vdp_mode_sprites_off
	lda	#$d0					;sprites off, at least y=$d0 will disable the sprite subsystem
	sta	adrl
	ldx	#32*4
	lda	#<ADDRESS_GFX_SPRITE
	ldy	#.WRITE_ADDRESS + >ADDRESS_GFX_SPRITE
	jmp	vdp_fills

.vdp_init_bytes_gfx1
	!byte 	0
	!byte	v_reg1_16k|v_reg1_display_on|v_reg1_spr_size|v_reg1_int
	!byte 	(ADDRESS_GFX1_SCREEN / $400)	; name table - value * $400					--> characters 
	!byte 	(ADDRESS_GFX1_COLOR /  $40)	; color table - value * $40 (gfx1), 7f/ff (gfx2)
	!byte 	(ADDRESS_GFX1_PATTERN / $800) ; pattern table (charset) - value * $800  	--> offset in VRAM 
	!byte	(ADDRESS_GFX1_SPRITE / $80)	; sprite attribute table - value * $80 		--> offset in VRAM
	!byte 	(ADDRESS_GFX1_SPRITE_PATTERN / $800)  ; sprite pattern table - value * $800  		--> offset in VRAM
	!byte	Black

;
;	gfx mode 1 - 32x24 character mode, 16 colors with same color for 8 characters in a block
;
vdp_mode_gfx1
	sta	adrl		;set character color
	ldx	#$20
	lda	#<ADDRESS_GFX1_COLOR
	ldy	#.WRITE_ADDRESS + >ADDRESS_GFX1_COLOR	;color vram
	jsr	vdp_fills
	+SetVector .vdp_init_bytes_gfx1, adrl
    ;go on below
	
; setup video registers upon given table
;	input:
;	adrl/adrh vector set to vdp init table for al 8 vdp registers
vdp_init_reg
	ldy	#$00
	ldx	#v_reg0
-  	lda (adrl),y
	sta a_vreg
	iny				;iny first, burn cycle to avoid vdp nop
	+vnops
	stx a_vreg
	inx
	cpy	#$08
	bne   -
	rts

;	
;
!ifndef bios_stuff {
;
;	gfx 2 - each pixel can be addressed - e.g. for image
;	
vdp_mode_gfx2:
	jsr	.vdp_fill_name_table
	+SetVector	vdp_init_bytes_gfx2, adrl
	bra	vdp_init_reg

;
;	gfx 3 - 4x4 color block - multicolor mode
;	
vdp_mode_gfx_mc
	+SetVector	.vdp_init_bytes_gfx_mc, adrl
	bra	vdp_init_reg

;
;	text mode - 40x24 character mode, 16 colors with same color for 8 characters in a block
;
vdp_mode_text

	+SetVector .vdp_init_bytes_text, adrl
	bra	vdp_init_reg

.vdp_wait_blank
	php
	sei
    +SyncBlank
	pla
	and	#$04	;check interupt was set?
	bne	+
	cli
+	rts

;
;	requires	gfx2_mode_bitmap_address and gfx2_mode_ptr_bitmap_color_address setup correctly with the adresses to image and color data
;
gfx2_mode_ptr_bitmap_address 		!word ADDRESS_GFX2_PATTERN	;default data adress $1000
gfx2_mode_ptr_bitmap_color_address	!word ADDRESS_GFX2_COLOR	;default data adress $2800
vdp_mode_gfx2_load_bitmap
	lda	gfx2_mode_ptr_bitmap_address
	sta	adrl
	lda	gfx2_mode_ptr_bitmap_address+1
	sta	adrh
	lda	#<ADDRESS_GFX2_PATTERN
	ldy	#.WRITE_ADDRESS + >ADDRESS_GFX2_PATTERN
	ldx	#$18	;6k bitmap - $1800
	jsr	vdp_memcpy					;load the pic data --> pattern table at vram $0000
	; load color
	lda	gfx2_mode_ptr_bitmap_color_address
	sta	adrl
	lda	gfx2_mode_ptr_bitmap_color_address+1
	sta	adrh
	lda	#<ADDRESS_GFX2_COLOR
	ldy	#.WRITE_ADDRESS+ >ADDRESS_GFX2_COLOR
	ldx	#$18	;6k color map - $1800
	jmp	vdp_memcpy					;load the pic data --> color table at vram $2000

gfx3_mode_bitmap_address		!word	$1800
vdp_mode_gfx3_load_bitmap
	lda	gfx3_mode_bitmap_address
	sta	adrl
	lda	gfx3_mode_bitmap_address+1
	sta	adrh
	lda	#$00
	ldy	#.WRITE_ADDRESS+$00
	ldx	#$03	;768 byte
	jsr	vdp_memcpy					;load the pic data --> pattern table at vram $0000
	rts
	
.vdp_fill_name_table
	;set 768 different patterns --> name table
	lda	#<ADDRESS_GFX2_SCREEN
	ldy	#.WRITE_ADDRESS+ >ADDRESS_GFX2_SCREEN
	+vdp_sreg
	ldy	#$03
	ldx	#$00
-	+vnops
    stx	a_vram  ;
	inx         ;2
	bne	-       ;3
	dey
	bne	-
rts
	
.vdp_init_bytes_text
	!byte 0
	!byte v_reg1_16k|v_reg1_display_on|v_reg1_int|v_reg1_m1
	!byte 	(ADDRESS_GFX1_SCREEN / $400)	; name table - value * $400					--> characters 
	!byte 	0	; not used
	!byte 	(ADDRESS_GFX1_PATTERN / $800) ; pattern table (charset) - value * $800  	--> offset in VRAM 
	!byte	0	; not used
	!byte 	0	; not used
	!byte	Medium_Green<<4|Black

vdp_init_bytes_gfx2
	!byte 	v_reg0_m3		; 
	!byte 	v_reg1_16k|v_reg1_display_on|v_reg1_spr_size |v_reg1_int
	!byte 	(ADDRESS_GFX2_SCREEN / $400)	; name table - value * $400
	!byte	$ff				; color table setting for gfx mode 2 --> only Bit 7 is taken into account 0 => at vram $0000, 1 => at vram $2000, Bit 6-0 AND to character number
	!byte	$03 			; pattern table - either at vram $0000 (Bit 2 = 0) or at vram $2000 (Bit 2=1), Bit 0,1 are AND to select the pattern array
	!byte	(ADDRESS_GFX2_SPRITE / $80)	; sprite attribute table - value * $80 --> offset in VRAM
	!byte	(ADDRESS_GFX2_SPRITE_PATTERN / $800)	; sprite pattern table - value * $800  --> offset in VRAM
	!byte	Black

.vdp_init_bytes_gfx_mc
	!byte 	0		; 
	!byte 	v_reg1_16k|v_reg1_display_on|v_reg1_m2|v_reg1_spr_size; |v_reg1_int
	!byte 	(ADDRESS_GFX_MC_SCREEN / $400)		; name table - value * $400 -> 3 * 256 pattern names (3 pages)
	!byte	$ff									; color table not used in multicolor mode
	!byte	(ADDRESS_GFX_MC_PATTERN / $800) 	; pattern table, 1536 byte - 3 * 256 
	!byte	(ADDRESS_GFX_MC_SPRITE / $80)	; sprite attribute table - value * $80 --> offset in VRAM
	!byte	(ADDRESS_GFX_MC_SPRITE_PATTERN / $800)	; sprite pattern table - value * $800  --> offset in VRAM
	!byte	Black
	
;
;   input:	a - color
;
vdp_bgcolor
	sta   a_vreg
	lda   #v_reg7
	+vnops
	sta   a_vreg
	rts
}

;
;direct vram access - used i.e. in bios
;
!ifdef bios_stuff {
    .COLS=32
.vdp_scroll_up
	+SetVector	ADDRESS_GFX1_SCREEN+.COLS, ptr1		        ; +.COLS - offset second row
	+SetVector	ADDRESS_GFX1_SCREEN+(.WRITE_ADDRESS<<8), ptr2	; offset first row
	lda	a_vreg  ; clear v-blank bit, we dont know where we are...
--	bit	a_vreg  ; sync with next v-blank, so that we have the full 4,3µs
	bpl	--
-	lda	ptr1l	; 3cl
	sta	a_vreg
	lda	ptr1h	; 3cl
	sta	a_vreg
	nop			; wait 2µs, 4Mhz = 8cl => 4 nop
	nop			; 2cl
	nop			; 2cl
	nop			; 2cl
	ldx	a_vram	;
	nop			; 2cl
	nop			; 2cl
	nop			; 2cl
	nop			; 2cl
	lda	ptr2l	; 3cl
	sta	a_vreg
	lda	ptr2h	; 3cl
	sta a_vreg
	nop			; 2cl
	nop			; 2cl
	nop			; 2cl
	nop			; 2cl
    stx	a_vram
	inc	ptr1l	; 5cl
	bne	+		; 3cl
	inc	ptr1h
	lda	ptr1h
	cmp	#>(ADDRESS_GFX1_SCREEN+(.COLS * 24))	;screen ram $1800 - $1b00
	beq	++
+	inc	ptr2l  ; 5cl
	bne	-		; 3cl
	inc	ptr2h
	bra	--
++	ldx	#.COLS	; write address is already setup from loop
	lda	#' '
-	sta	a_vram
    nop
	dex
	bne	-
	rts

.inc_cursor_y
	lda crs_y
	cmp	#.ROWS		;last line ?
	bne	+
	bra	.vdp_scroll_up	; scroll up, dont inc y, exit
+	inc crs_y
	rts
	
;
; vdp direct char out, no backbuffer is used. vdp vram is accessed directly
;
.KEY_CR=$0d
.KEY_LF=$0a
.KEY_BACKSPACE=$08
vdp_chrout
	cmp	#.KEY_CR			;cariage return ?
	bne	+
	stz	crs_x
	rts
+	cmp	#.KEY_LF			;line feed
	bne	+
	bra	.inc_cursor_y
+	cmp	#.KEY_BACKSPACE
	bne	+
	lda	crs_x
	beq	++
	dec	crs_x
	bra +++
++	lda	crs_y			; cursor y=0, no dec
	beq	++
	dec	crs_y
	lda	#(.COLS-1)		; set x to end of line above
	sta	crs_x
+++ lda #' '
    bra	vdp_putchar
+	jsr	vdp_putchar
	lda	crs_x
	cmp	#(.COLS-1)
	beq +
	inc	crs_x
++	rts
+	stz	crs_x
	bra	.inc_cursor_y
    
vdp_putchar
	pha
	jsr .vdp_set_addr
	pla
	sta a_vram
    rts
	
.vdp_set_addr			; set the vdp vram adress to write one byte afterwards
	lda	crs_y   		; * 32
	asl
	asl
	asl
	asl
	asl
	ora	crs_x
	sta	a_vreg
    
	lda crs_y   		; * 32
	lsr					; div 8 -> page offset 0-2
	lsr
	lsr
	ora	#.WRITE_ADDRESS + >ADDRESS_GFX1_SCREEN
	sta a_vreg
	rts
}
